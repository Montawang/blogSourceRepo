{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.JPG","path":"images/alipay.JPG","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.JPG","path":"images/wechatpay.JPG","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/HighSierra.jpg","path":"images/HighSierra.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1537071268655},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1537071268655},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1537071268655},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1537071268655},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1537071268655},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1537071268670},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1537071268670},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1537071268670},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1537071268670},{"_id":"themes/next/README.md","hash":"2d142fa1bdfab00abf8e99f972346e15572c9b12","modified":1537071268670},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1537071268655},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1537071268756},{"_id":"themes/next/_config.yml","hash":"7dd69fea1c1942c3d892c6f03fdb13dc5dd3aa90","modified":1537071268670},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1537071268690},{"_id":"source/_posts/HEXO-NexT-主题提高博客颜值.md","hash":"d5f41792606df7422fae0662e725f9182951b3f5","modified":1537071268540},{"_id":"source/_posts/C-奇技淫巧-终极快速读入-输出.md","hash":"6724268348304b1d0c3c6c93f6f64f41ea9d7984","modified":1538381250778},{"_id":"source/_posts/Hello-world.md","hash":"f8ab508833266f1a13a2a98d0df8a5e71fb55b97","modified":1537071268540},{"_id":"source/_posts/HEXO-hexo-中加入-AdSense-广告服务的方法.md","hash":"090ddc6d328dd21a36993acfa35147e2da974fb3","modified":1537880181863},{"_id":"source/about/index.md","hash":"bcc122e020e63f16ea61cb4956c76aa4ef8be5f1","modified":1537071268587},{"_id":"source/_posts/HEXO-hexo-中插入视频的方法.md","hash":"c90ca9a293aa64843c061af028cd794e4ee52ab0","modified":1537071268540},{"_id":"source/_posts/LeetCode-刷题日志-LeetCode-3-无重复字符的最长子串.md","hash":"4558b16959b7e8b629e4478640dc4ab1097a43bc","modified":1538381202484},{"_id":"source/_posts/NOIP-初赛-各类排序算法时间-空间复杂度整理.md","hash":"c2690d636ea48f7cfa5b0156c8abca152a455c65","modified":1538139808353},{"_id":"source/_posts/C-奇技淫巧-流迭代器使用.md","hash":"2206917f4e2c457178c0fc555f8402ecb058ac4d","modified":1537071268540},{"_id":"source/_posts/NOIP-模拟-2018-8-7-题解-我写了个自己都看不懂的程序.md","hash":"c3bc202a9cd16c50539ee33c27c41b19e1bd07c6","modified":1537071268555},{"_id":"source/_posts/NOIP-初赛-总结一波读程序写结果题目.md","hash":"16aad9b3c76b4d4ef5523ac151e5395e3b79f978","modified":1537868807763},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试.md","hash":"12b631d9eb4d8e06bfa29bc191d2e61f5ffe06e7","modified":1537071268555},{"_id":"source/_posts/NOIP-初赛-总结各种坑人基础知识.md","hash":"449c69af83230bcdd30e7e3a39ca00e5b90ff6bf","modified":1537868807769},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从.md","hash":"07bda9aa7c61334afe78b4e6ed23f5c9de96ee43","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-记录一道坑题.md","hash":"d0c53803fd80e77922efc5a8bd83a5ae41fe4352","modified":1537071268555},{"_id":"source/_posts/图论-Dijkstra-最短路计数.md","hash":"30c79c153d9d8b741abca8734a328c487147feab","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-一次出卷老师把题目出反的模拟赛.md","hash":"d52f15b1ce84a72813c40786c341fe965726d871","modified":1538468602602},{"_id":"source/_posts/图论-图论基础知识.md","hash":"0933e784d10b8893e89bdc0cc46925d8b53a9c99","modified":1537071268555},{"_id":"source/_posts/平衡树-Treap-总结.md","hash":"734c614738a87d45b05aec7b7d3f49c2d3122249","modified":1537071268571},{"_id":"source/_posts/数论-OI-中的模运算计算方法.md","hash":"8494ec9b2f39eab4fda6e9497dfc8b3fee3f4e03","modified":1537071268571},{"_id":"source/_posts/猴排！？一道高考题！？出题人的无下限猴子专场.md","hash":"75a7d3624aabc48a5ab92bbf1163f1ea6eda8a99","modified":1538549160491},{"_id":"source/_posts/数论-OI-中素数有关的算法整理.md","hash":"0765893f3098cd1826010d01fc6a230d8fd77367","modified":1537071268571},{"_id":"source/_posts/数论-数论基础知识-莫比乌斯函数.md","hash":"2a0e1a8b7dd214b88eccf7c4235df9977556a2a8","modified":1537071268571},{"_id":"source/_posts/杂谈-编程规范那些事.md","hash":"87b3afaa249660aed136cd2345106f2d7a7cf824","modified":1537071268571},{"_id":"source/categories/index.md","hash":"1bc2a039cff743120f19db5638742bd42f128bc7","modified":1537071268587},{"_id":"source/schedule/index.md","hash":"fc0243f0c7dec190e85839ea58040b79ad597032","modified":1537071268587},{"_id":"source/tags/index.md","hash":"15fa96d310762039cc78903c18224aca45bc5af6","modified":1537071268587},{"_id":"source/_posts/算法-RMQ-问题与-ST-算法.md","hash":"4352b0791734261c754aa71d3baab45cfc4bebfa","modified":1537071268587},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串.md","hash":"0b2ca112e3db0ae25f88de4335e45fa3efe910a0","modified":1537071268587},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1537071268655},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1537071268655},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1537071268655},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1537071268655},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537071268655},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1537071268670},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1537071268670},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1537071268670},{"_id":"themes/next/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1537071268655},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1537071268670},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1537071268670},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1537071268670},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1537071268670},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1537071268670},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1537071268691},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1537071268693},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1537071268670},{"_id":"themes/next/languages/default.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1537071268692},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1537071268694},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1537071268695},{"_id":"themes/next/languages/ja.yml","hash":"576af89e8228f5c852a1ddd7276a128a6bcbe785","modified":1537071268695},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1537071268698},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1537071268693},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1537071268697},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1537071268696},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1537071268699},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1537071268700},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1537071268699},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1537071268697},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1537071268701},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1537071268701},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1537071268756},{"_id":"themes/next/layout/_layout.swig","hash":"38ab719c684d28bfffe63645720688ec2be7e73a","modified":1537071268705},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1537071268756},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1537071268756},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1537071268702},{"_id":"themes/next/layout/post.swig","hash":"ef2bbeedc8c7a48d7ac42514b73cf499970ba837","modified":1537868807781},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1537071268756},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1537071268756},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1537071268756},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1537071268756},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1537071268756},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1537071268756},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1537071268927},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1537071268927},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1537071268927},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268818},{"_id":"source/_posts/C-奇技淫巧-终极快速读入-输出/photo1.png","hash":"f17cd827824cda8a3b46ad5697d508bc0cb2fcaf","modified":1537868807757},{"_id":"source/_posts/HEXO-hexo-中加入-AdSense-广告服务的方法/photo1.png","hash":"2721505c4aaf8247272b64658d906fe0668b356f","modified":1537880170101},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/翻译1.jpg","hash":"40d05fc11a337ad01a866398a047cb478759d1a7","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/翻译3.jpg","hash":"2363506123b6144519ab3b9b85b3f2584a075630","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/黑人问号.jpg","hash":"e377914255ca05beb30b885b4287e1015dc9bbdd","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/翻译2.jpg","hash":"7e6fffb7b49c6986fb9d485bb830f724e1412819","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/T1_2.jpg","hash":"40e0e7ee2f67ce95370a393cdc5b99b49e9cab1c","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic1.jpg","hash":"d8b1a2ce10815e45e8e2431b7d5a2d8172536cae","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/T1_1.jpg","hash":"adf909229ed24d225e40f3f580c6e09619fcd4fb","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-一次出卷老师把题目出反的模拟赛/photo1.png","hash":"c81604ec96e6dee689cf6e7993e037787dbc91ab","modified":1538381514862},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/T2_1.jpg","hash":"3d0b6a612f9b6920184dadc67868d22cbf77871e","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic3.jpg","hash":"782d8b64f0d7e01a83e89a7c10a380fc6b303445","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic2.jpg","hash":"73ef2734033cb53220e25fa20f7570a72a969009","modified":1537071268555},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic4.jpg","hash":"b44e8f8e7839a7597b27942c624ab7528b7723a6","modified":1537071268555},{"_id":"source/_posts/图论-图论基础知识/pic1.jpg","hash":"a16af98698161a2aaad41cb9bbb210e0686a6d32","modified":1537071268555},{"_id":"source/_posts/图论-图论基础知识/pic3.jpg","hash":"bb29f1a546950abfe0b9b9e29cea70454d92eaad","modified":1537071268571},{"_id":"source/_posts/图论-图论基础知识/pic2.jpg","hash":"2433bbf7bd61406a5b45f5ef6f97f29b15161086","modified":1537071268555},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic2.jpg","hash":"6439e9f7a6903be21492eb5192323dc0e1f07dce","modified":1537071268587},{"_id":"source/_posts/平衡树-Treap-总结/zigzag.png","hash":"8916752985a143707fce947bb2289ef2686dc657","modified":1537071268571},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic1.jpg","hash":"096aa5522771cf3aed36316ca0d12c74c72e134b","modified":1537071268587},{"_id":"source/_posts/数论-OI-中素数有关的算法整理/pic1.png","hash":"61b36303cbd4c6f7cc3f8e2d7ee4c85b24cb67a4","modified":1537071268571},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic5.jpg","hash":"8b9ec8444154c92c71a0dea5d6056b926b814dc2","modified":1537071268587},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1537071268670},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1537071268670},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1537071268670},{"_id":"themes/next/docs/ru/README.md","hash":"bbe7ac3ef6352b7fedbba2ab800915e33251adf8","modified":1537071268670},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1537071268670},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1537071268670},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1537071268670},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1537071268686},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic3.jpg","hash":"422e51f2570ab261c5032d94209adbbd61332015","modified":1537071268587},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic4.jpg","hash":"07d820ebdd9646c50062e82cf8ed9bfcd5437d32","modified":1537071268587},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1537071268687},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1537071268704},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1537071268687},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1537071268704},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1537071268709},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1537071268688},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1537071268689},{"_id":"themes/next/docs/zh-CN/README.md","hash":"74547943ee6cba2e2bbbd67d306ee4de9db1a2bd","modified":1537071268688},{"_id":"themes/next/layout/_macro/post-copyright.swig.del","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1537071268709},{"_id":"themes/next/layout/_custom/google_adsense.swig","hash":"f7fa6c09a44267f303f9802b3994bb49e929d20d","modified":1537868807775},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"f9e821890d8ece6630665b84fef5499702fe2890","modified":1537071268707},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1537071268709},{"_id":"themes/next/layout/_custom/head.swig","hash":"267c0edc2be4ec9819d195c7133eeefcff34cad9","modified":1537071268704},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"c7c9b2801a68c2bab10abe68c62c2c86c966d294","modified":1537071268709},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1537071268709},{"_id":"themes/next/layout/_macro/post.swig","hash":"6929fefe81eee4ce24daba4988cfe9c6d57f3db3","modified":1537071268709},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1537071268709},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1537071268709},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1537071268709},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1537071268709},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1537071268709},{"_id":"themes/next/layout/_partials/footer.swig","hash":"523c594c00f43ea9a503b587ec212fd4745bffaa","modified":1537071268709},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1537071268709},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1537071268724},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1537071268724},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1537071268724},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1537071268740},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1537071268724},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1537071268724},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1537071268740},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1537071268740},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1537071268740},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1537071268740},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1537071268740},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1537071268756},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1537071268756},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1537071268756},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1537071268756},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"2b969ca830862b2bc119b69ede4bd971e27a6ff8","modified":1537071268756},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1537071268756},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1537071268756},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1537071268756},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1537071268756},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1537071268740},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1537071268896},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1537071268740},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537071268912},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1537071268818},{"_id":"themes/next/source/images/avatar.jpg","hash":"c130db636feabfe53b9aeade81eb13d2b9fa90fb","modified":1537071268912},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1537071268912},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1537071268912},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537071268912},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1537071268912},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1537071268912},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537071268912},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1537071268912},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537071268912},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1537071268912},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537071268912},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1537071268912},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1537071268912},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1537071268912},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1537071268912},{"_id":"source/_posts/NOIP-初赛-总结一波读程序写结果题目/photo1.jpg","hash":"b650c043c1685b999ec310e6434de7a7b7e0c36c","modified":1537441797842},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537071268912},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537071268912},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268724},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268724},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268802},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268802},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268802},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268818},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537071268818},{"_id":"themes/next/source/images/alipay.JPG","hash":"20ec1071b62b782782f635912650a3aa1cc2b954","modified":1537071268912},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1537071268707},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1537071268709},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1537071268706},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1537071268709},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1537071268709},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1537071268709},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1537071268709},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"39a670bffe261ffa3f0bb72775960cde3e6dd55d","modified":1537071268709},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1537071268709},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1537071268724},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1537071268724},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1537071268709},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1537071268709},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1537071268709},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1537071268724},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1537071268709},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1537071268724},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1537071268724},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1537071268724},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"809f6d31c24ee0012e12631f5893a79f69e7bc84","modified":1537071268724},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1537071268740},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1537071268740},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1537071268740},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1537071268740},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1537071268740},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"694483f2d853c65b87a6a70e38dbc40e40eb1332","modified":1537071268740},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1537071268740},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1537071268740},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1537071268740},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1537071268740},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1537071268740},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1537071268740},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1537071268802},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1537071268802},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1537071268740},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c96d7a2abc78419ba341f041996699793a2c5d61","modified":1537071268802},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1537071268818},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0882d76333ab409e8d3362c284b91a0f0ae761ae","modified":1537071268802},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1537071268912},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1537071268912},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1537071268912},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1537071268912},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1537071268818},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1537071268912},{"_id":"themes/next/source/js/src/motion.js","hash":"6b5a2646b775609630b9ff6221fa58b6823a25fa","modified":1537071268912},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1537071268927},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1537071268927},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1537071268927},{"_id":"themes/next/source/js/src/utils.js","hash":"9cddff04f9ff64b1e3202e1726eff512a2ef8497","modified":1537071268927},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1537071268927},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1537071268927},{"_id":"themes/next/source/images/wechatpay.JPG","hash":"3654caf2d562b85f43f2aa3a2749ecaf077c2d80","modified":1537071268912},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1537071268818},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1537071268927},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1625e3e1da6c453108526e027dae25e311b18adf","modified":1537071268818},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1537071268927},{"_id":"source/_posts/数论-OI-中素数有关的算法整理/pic2.png","hash":"2a3c87f40455099fa4bf814583b3ad09f9a563a4","modified":1537071268571},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1537071268740},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1537071268802},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1537071268740},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1537071268756},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1537071268756},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1537071268756},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1537071268756},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1537071268771},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1537071268802},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1537071268771},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1537071268787},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7e4e499964c2112d47e6f9d2b6e87c31ec8269e2","modified":1537071268802},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1537071268802},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1537071268802},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1537071268818},{"_id":"source/_posts/HEXO-hexo-中插入视频的方法/movie.mp4","hash":"c90b44a96ed080c1a6c8ce8888a40a5aaaa7e7ca","modified":1537071268540},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1537071268818},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"6ed3f2389457daa382de96a08633d9faaaaf53fb","modified":1537071268927},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"d8ad2d6613aa7f8b5337805b2ec681331a37bcee","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl.del","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ff50a32ae6fea5fcdf2939dc9b01e1eb76cc73f0","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"dbfab4a7f7ad61f93986e619b1495ce0987d443c","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1537071268802},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"02ee0eb49c256ecb4e71bbc65072f9147418d7d7","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1537071268771},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1537071268787},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1537071268787},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1537071268927},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1537071268818},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1537071268818},{"_id":"source/_posts/猴排！？一道高考题！？出题人的无下限猴子专场/photo1.png","hash":"2795db41d6f3e319707903e3698d86b216dec9f5","modified":1538549113638},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1537071268818},{"_id":"source/_posts/杂谈-编程规范那些事/pic1.jpg","hash":"6cf9bd5521b2861d0e452e9ddf4001697505e650","modified":1537071268587},{"_id":"source/_posts/HEXO-NexT-主题提高博客颜值/photo1.jpg","hash":"8512edf6f8ddeb5ffb33ac1db0b90617fc138256","modified":1537071268540},{"_id":"source/_posts/HEXO-hexo-中加入-AdSense-广告服务的方法/pic1.jpg","hash":"29ed74d0e432570836c1ff871b47fb371167dbc9","modified":1537879066920},{"_id":"source/_posts/图论-图论基础知识/pic4.jpg","hash":"7f5b2a55ee1b88902f5643912234698781dd5457","modified":1537071268571},{"_id":"themes/next/source/images/HighSierra.jpg","hash":"8188c292fe776382a97f2cfdbe60485afe2c6873","modified":1537071268896}],"Category":[{"name":"奇技淫巧","_id":"cjmssgbg50001rgc8tjvcppxh"},{"name":"杂谈","_id":"cjmssgbn20009rgc84fu4x8gd"},{"name":"hexo","_id":"cjmssgbnd000grgc8pr30fvrs"},{"name":"LeetCode","_id":"cjmssgbni000mrgc8c0jcsojh"},{"name":"NOIP","_id":"cjmssgbnt000wrgc8dzoqpz3a"},{"name":"图论","_id":"cjmssgbo5001irgc8jfl4syqv"},{"name":"平衡树","_id":"cjmssgbo7001nrgc8esoch2w0"},{"name":"数论","_id":"cjmssgbo9001urgc8jyq87y5v"},{"name":"算法","_id":"cjmssgboa001yrgc8y3pola4i"}],"Data":[],"Page":[{"title":"关于","date":"2018-08-30T09:01:56.000Z","type":"about","_content":"\n<div class=\"note info\">\n  <p>\n    我是一个正在奋斗的 OIer，以前几乎没有接触过 OI 的内容，2018 年的暑假是我第一次接触这些有关 OI 的东西，渐渐的，OI 已经成为了我学习生活的一部分，OI 的坎坷旅程不仅没有削弱我的斗志，反而是让我愈挫愈勇，我会一直努力的！\n  </p>\n</div>\n\n\n<div class=\"note default\"><p>\n{% cq %}\n\n假如没有 OI\n---\n**假如没有 OI，\n我会像其他大多数人一样抬头看天，\n低头看书，\n安静的过完整个高中**\n\n**假如没有 OI，\n我会一个人，\n一边写着作业，\n一边做着肥皂般繁华的梦**\n\n**假如没有 OI，\n我可能会努力地挤进学校前 50 名，\n然后静静地等着高考到来**\n\n**假如没有 OI，\n我可以只用一半自习课的时间写完所有作业，\n而不是晚上熬到深夜**\n\n**假如没有 OI，\n我从来都不会知道逆元，\n莫比乌斯反演，\n容斥原理等原本不属于我们这个年龄的东西**\n\n**假如没有 OI，\n我会花钱买一本《人间词话》，\n而不是板砖一样的《C++ primer》**\n\n**假如没有 OI，\n我的空间里会有一篇篇自己写的诗或散文，\n而不是一堆解题报告**\n\n**假如没有 OI，\n我永远也不会听说 OIER 这个名词，\n也永远不会去 luogu，\ncodeforces 等网站**\n\n**假如没有 OI，\n我在学校最常去的地方是图书馆，\n而不是机房**\n\n**假如没有 OI，\n我的电脑里会塞满游戏，\n而不是装着 编辑器，\n编译器和一包包的测试数据**\n\n**假如没有 OI，\n我每天都会有大把的时间可以去放肆地挥霍**\n\n**假如没有 OI，\n我以后可能会做一名金融家或者建筑设计师**\n\n**假如没有 OI，\n我永远也不知道“犇”的读音**\n\n**假如没有 OI，\n我可能不会知道梦的含义，\n还有什么是拼搏**\n\n**假如没有 OI，\n我以后可能永远也接触不到算法和数据结构**\n\n**假如没有 OI，\n我会像所有的普通人一样，\n平平淡淡，\n终其一生。**\n\n{% endcq %}\n</p></div>","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-08-30 17:01:56\ntype: \"about\"\n---\n\n<div class=\"note info\">\n  <p>\n    我是一个正在奋斗的 OIer，以前几乎没有接触过 OI 的内容，2018 年的暑假是我第一次接触这些有关 OI 的东西，渐渐的，OI 已经成为了我学习生活的一部分，OI 的坎坷旅程不仅没有削弱我的斗志，反而是让我愈挫愈勇，我会一直努力的！\n  </p>\n</div>\n\n\n<div class=\"note default\"><p>\n{% cq %}\n\n假如没有 OI\n---\n**假如没有 OI，\n我会像其他大多数人一样抬头看天，\n低头看书，\n安静的过完整个高中**\n\n**假如没有 OI，\n我会一个人，\n一边写着作业，\n一边做着肥皂般繁华的梦**\n\n**假如没有 OI，\n我可能会努力地挤进学校前 50 名，\n然后静静地等着高考到来**\n\n**假如没有 OI，\n我可以只用一半自习课的时间写完所有作业，\n而不是晚上熬到深夜**\n\n**假如没有 OI，\n我从来都不会知道逆元，\n莫比乌斯反演，\n容斥原理等原本不属于我们这个年龄的东西**\n\n**假如没有 OI，\n我会花钱买一本《人间词话》，\n而不是板砖一样的《C++ primer》**\n\n**假如没有 OI，\n我的空间里会有一篇篇自己写的诗或散文，\n而不是一堆解题报告**\n\n**假如没有 OI，\n我永远也不会听说 OIER 这个名词，\n也永远不会去 luogu，\ncodeforces 等网站**\n\n**假如没有 OI，\n我在学校最常去的地方是图书馆，\n而不是机房**\n\n**假如没有 OI，\n我的电脑里会塞满游戏，\n而不是装着 编辑器，\n编译器和一包包的测试数据**\n\n**假如没有 OI，\n我每天都会有大把的时间可以去放肆地挥霍**\n\n**假如没有 OI，\n我以后可能会做一名金融家或者建筑设计师**\n\n**假如没有 OI，\n我永远也不知道“犇”的读音**\n\n**假如没有 OI，\n我可能不会知道梦的含义，\n还有什么是拼搏**\n\n**假如没有 OI，\n我以后可能永远也接触不到算法和数据结构**\n\n**假如没有 OI，\n我会像所有的普通人一样，\n平平淡淡，\n终其一生。**\n\n{% endcq %}\n</p></div>","updated":"2018-09-16T04:14:28.587Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjmssgbmu0005rgc86c8en4l4","content":"<div class=\"note info\"><br>  <p><br>    我是一个正在奋斗的 OIer，以前几乎没有接触过 OI 的内容，2018 年的暑假是我第一次接触这些有关 OI 的东西，渐渐的，OI 已经成为了我学习生活的一部分，OI 的坎坷旅程不仅没有削弱我的斗志，反而是让我愈挫愈勇，我会一直努力的！<br>  </p><br></div>\n\n\n<div class=\"note default\"><p><br><blockquote class=\"blockquote-center\"><h2 id=\"假如没有-OI\"><a href=\"#假如没有-OI\" class=\"headerlink\" title=\"假如没有 OI\"></a>假如没有 OI</h2><p><strong>假如没有 OI，<br>我会像其他大多数人一样抬头看天，<br>低头看书，<br>安静的过完整个高中</strong></p>\n<p><strong>假如没有 OI，<br>我会一个人，<br>一边写着作业，<br>一边做着肥皂般繁华的梦</strong></p>\n<p><strong>假如没有 OI，<br>我可能会努力地挤进学校前 50 名，<br>然后静静地等着高考到来</strong></p>\n<p><strong>假如没有 OI，<br>我可以只用一半自习课的时间写完所有作业，<br>而不是晚上熬到深夜</strong></p>\n<p><strong>假如没有 OI，<br>我从来都不会知道逆元，<br>莫比乌斯反演，<br>容斥原理等原本不属于我们这个年龄的东西</strong></p>\n<p><strong>假如没有 OI，<br>我会花钱买一本《人间词话》，<br>而不是板砖一样的《C++ primer》</strong></p>\n<p><strong>假如没有 OI，<br>我的空间里会有一篇篇自己写的诗或散文，<br>而不是一堆解题报告</strong></p>\n<p><strong>假如没有 OI，<br>我永远也不会听说 OIER 这个名词，<br>也永远不会去 luogu，<br>codeforces 等网站</strong></p>\n<p><strong>假如没有 OI，<br>我在学校最常去的地方是图书馆，<br>而不是机房</strong></p>\n<p><strong>假如没有 OI，<br>我的电脑里会塞满游戏，<br>而不是装着 编辑器，<br>编译器和一包包的测试数据</strong></p>\n<p><strong>假如没有 OI，<br>我每天都会有大把的时间可以去放肆地挥霍</strong></p>\n<p><strong>假如没有 OI，<br>我以后可能会做一名金融家或者建筑设计师</strong></p>\n<p><strong>假如没有 OI，<br>我永远也不知道“犇”的读音</strong></p>\n<p><strong>假如没有 OI，<br>我可能不会知道梦的含义，<br>还有什么是拼搏</strong></p>\n<p><strong>假如没有 OI，<br>我以后可能永远也接触不到算法和数据结构</strong></p>\n<p><strong>假如没有 OI，<br>我会像所有的普通人一样，<br>平平淡淡，<br>终其一生。</strong></p>\n</blockquote><br></p></div>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\"><br>  <p><br>    我是一个正在奋斗的 OIer，以前几乎没有接触过 OI 的内容，2018 年的暑假是我第一次接触这些有关 OI 的东西，渐渐的，OI 已经成为了我学习生活的一部分，OI 的坎坷旅程不仅没有削弱我的斗志，反而是让我愈挫愈勇，我会一直努力的！<br>  </p><br></div>\n\n\n<div class=\"note default\"><p><br><blockquote class=\"blockquote-center\"><h2 id=\"假如没有-OI\"><a href=\"#假如没有-OI\" class=\"headerlink\" title=\"假如没有 OI\"></a>假如没有 OI</h2><p><strong>假如没有 OI，<br>我会像其他大多数人一样抬头看天，<br>低头看书，<br>安静的过完整个高中</strong></p>\n<p><strong>假如没有 OI，<br>我会一个人，<br>一边写着作业，<br>一边做着肥皂般繁华的梦</strong></p>\n<p><strong>假如没有 OI，<br>我可能会努力地挤进学校前 50 名，<br>然后静静地等着高考到来</strong></p>\n<p><strong>假如没有 OI，<br>我可以只用一半自习课的时间写完所有作业，<br>而不是晚上熬到深夜</strong></p>\n<p><strong>假如没有 OI，<br>我从来都不会知道逆元，<br>莫比乌斯反演，<br>容斥原理等原本不属于我们这个年龄的东西</strong></p>\n<p><strong>假如没有 OI，<br>我会花钱买一本《人间词话》，<br>而不是板砖一样的《C++ primer》</strong></p>\n<p><strong>假如没有 OI，<br>我的空间里会有一篇篇自己写的诗或散文，<br>而不是一堆解题报告</strong></p>\n<p><strong>假如没有 OI，<br>我永远也不会听说 OIER 这个名词，<br>也永远不会去 luogu，<br>codeforces 等网站</strong></p>\n<p><strong>假如没有 OI，<br>我在学校最常去的地方是图书馆，<br>而不是机房</strong></p>\n<p><strong>假如没有 OI，<br>我的电脑里会塞满游戏，<br>而不是装着 编辑器，<br>编译器和一包包的测试数据</strong></p>\n<p><strong>假如没有 OI，<br>我每天都会有大把的时间可以去放肆地挥霍</strong></p>\n<p><strong>假如没有 OI，<br>我以后可能会做一名金融家或者建筑设计师</strong></p>\n<p><strong>假如没有 OI，<br>我永远也不知道“犇”的读音</strong></p>\n<p><strong>假如没有 OI，<br>我可能不会知道梦的含义，<br>还有什么是拼搏</strong></p>\n<p><strong>假如没有 OI，<br>我以后可能永远也接触不到算法和数据结构</strong></p>\n<p><strong>假如没有 OI，<br>我会像所有的普通人一样，<br>平平淡淡，<br>终其一生。</strong></p>\n</blockquote><br></p></div>"},{"title":"分类","date":"2018-08-06T14:58:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-06 22:58:50\ntype: \"categories\"\n---\n","updated":"2018-09-16T04:14:28.587Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjmssgbmy0007rgc8km9615fc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"日程表","date":"2018-08-30T09:02:12.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: 日程表\ndate: 2018-08-30 17:02:12\ntype: \"schedule\"\n---\n","updated":"2018-09-16T04:14:28.587Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjmssgbn3000brgc82boxqqd5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-08-06T14:55:45.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-08-06 22:55:45\ntype: \"tags\"\n---\n","updated":"2018-09-16T04:14:28.587Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjmssgbn7000drgc8ftp8aqte","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"[C++ 奇技淫巧] 终极快速读入/输出","mathjax":true,"copyright":true,"comment":true,"date":"2018-09-22T10:24:03.000Z","_content":"\n{% note default %}\n\n上次看到一个手写 `getchar()` 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。\n\n{% endnote %}\n\n<!-- more -->\n\n### 手写 `getchar()`\n\n```cpp\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n} // 使用 fread() 来提高速度\n```\n### 快读使用 `nextchar()`\n\n```cpp\ninline void read(int& x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  // 使用 static 节省空间\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  // 这里 x * 10 和 (x << 1) + (x << 3) 编译后的代码是一样的\n  // 所以不需要用位运算了\n  x = sign ? -x : x;\n}\n```\n### 非递归 `write()`\n\n```cpp\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { x = -x; putchar('-'); }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) { putchar(stk[top--] + '0'); }\n}\n```\n\n### 速度测试\n\n#### 数据生成\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n  ofstream test(\"testdata.txt\");\n  srand((unsigned)time(NULL) * 19260817); // +1s\n  for (int i = 1; i <= 5000000; ++i)\n    test << rand() << \" \";\n  return 0;\n} // 祖传代码\n```\n\n#### 老版本测试\n\n```cpp\n#include <bits/stdc++.h>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n\ninline void read(int& x) {\n  x = 0;\n  char ch = 0;\n  bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = getchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = getchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  if (x < 0) { putchar('-'); x = -x; }\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + '0');\n}\n\nint main() {\n  freopen(\"testdata.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n  int array[1000000];\n  auto start = system_clock::now();\n  \n  for (int i = 1; i <= 1000000; ++i) read(array[i - 1]);\n  for (int i = 1; i <= 1000000; ++i) write(array[i - 1]), putchar(' ');\n\n  auto end = system_clock::now();\n  auto duration = duration_cast<microseconds>(end - start);\n  cout << \"cost: \"\n       << double(duration.count()) *\n          microseconds::period::num / microseconds::period::den\n       << \" seconds\" << endl;\n  return 0;\n}\n```\n\n    cost: 0.406813 seconds\n\n#### 新版本测试\n\n```cpp\n#include <bits/stdc++.h>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n} // 使用 fread() 来提高速度\n\ninline void read(int& x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  // 使用 static 节省空间\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  // 这里 x * 10 和 (x << 1) + (x << 3) 编译后的代码是一样的\n  // 所以不需要用位运算了\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { x = -x; putchar('-'); }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) { putchar(stk[top--] + '0'); }\n}\n\nint main() {\n  freopen(\"testdata.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n  int array[1000000];\n  auto start = system_clock::now();\n  \n  for (int i = 1; i <= 1000000; ++i) read(array[i - 1]);\n  for (int i = 1; i <= 1000000; ++i) write(array[i - 1]), putchar(' ');\n\n  auto end = system_clock::now();\n  auto duration = duration_cast<microseconds>(end - start);\n  cout << \"cost: \"\n       << double(duration.count()) *\n          microseconds::period::num / microseconds::period::den\n       << \" seconds\" << endl;\n  return 0;\n}\n```\n\n    cost: 0.275003 seconds\n\n### 总结\n\n新的快读几乎是快了一倍，不过两者都已经是神仙打架了，像 `scanf` 这种都已经被踢飞了，不过，快读虽好，使用还是要谨慎，速度的提高主要还是靠算法的优化（除了某些高性能的题）。\n\n### 补充\n\n这个 `nextchar()` 函数只能在读入文件时使用，在控制台输入时会出错，因为 `fread()` 是专门针对文件的。\n\n---\n","source":"_posts/C-奇技淫巧-终极快速读入-输出.md","raw":"---\ntitle: '[C++ 奇技淫巧] 终极快速读入/输出'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-09-22 18:24:03\ntags:\n  - C++ 奇技淫巧\ncategories: 奇技淫巧\nphoto: /2018/09/22/C-奇技淫巧-终极快速读入-输出/photo1.png\n---\n\n{% note default %}\n\n上次看到一个手写 `getchar()` 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。\n\n{% endnote %}\n\n<!-- more -->\n\n### 手写 `getchar()`\n\n```cpp\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n} // 使用 fread() 来提高速度\n```\n### 快读使用 `nextchar()`\n\n```cpp\ninline void read(int& x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  // 使用 static 节省空间\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  // 这里 x * 10 和 (x << 1) + (x << 3) 编译后的代码是一样的\n  // 所以不需要用位运算了\n  x = sign ? -x : x;\n}\n```\n### 非递归 `write()`\n\n```cpp\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { x = -x; putchar('-'); }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) { putchar(stk[top--] + '0'); }\n}\n```\n\n### 速度测试\n\n#### 数据生成\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n  ofstream test(\"testdata.txt\");\n  srand((unsigned)time(NULL) * 19260817); // +1s\n  for (int i = 1; i <= 5000000; ++i)\n    test << rand() << \" \";\n  return 0;\n} // 祖传代码\n```\n\n#### 老版本测试\n\n```cpp\n#include <bits/stdc++.h>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n\ninline void read(int& x) {\n  x = 0;\n  char ch = 0;\n  bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = getchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = getchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  if (x < 0) { putchar('-'); x = -x; }\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + '0');\n}\n\nint main() {\n  freopen(\"testdata.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n  int array[1000000];\n  auto start = system_clock::now();\n  \n  for (int i = 1; i <= 1000000; ++i) read(array[i - 1]);\n  for (int i = 1; i <= 1000000; ++i) write(array[i - 1]), putchar(' ');\n\n  auto end = system_clock::now();\n  auto duration = duration_cast<microseconds>(end - start);\n  cout << \"cost: \"\n       << double(duration.count()) *\n          microseconds::period::num / microseconds::period::den\n       << \" seconds\" << endl;\n  return 0;\n}\n```\n\n    cost: 0.406813 seconds\n\n#### 新版本测试\n\n```cpp\n#include <bits/stdc++.h>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n} // 使用 fread() 来提高速度\n\ninline void read(int& x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  // 使用 static 节省空间\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  // 这里 x * 10 和 (x << 1) + (x << 3) 编译后的代码是一样的\n  // 所以不需要用位运算了\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { x = -x; putchar('-'); }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) { putchar(stk[top--] + '0'); }\n}\n\nint main() {\n  freopen(\"testdata.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n  int array[1000000];\n  auto start = system_clock::now();\n  \n  for (int i = 1; i <= 1000000; ++i) read(array[i - 1]);\n  for (int i = 1; i <= 1000000; ++i) write(array[i - 1]), putchar(' ');\n\n  auto end = system_clock::now();\n  auto duration = duration_cast<microseconds>(end - start);\n  cout << \"cost: \"\n       << double(duration.count()) *\n          microseconds::period::num / microseconds::period::den\n       << \" seconds\" << endl;\n  return 0;\n}\n```\n\n    cost: 0.275003 seconds\n\n### 总结\n\n新的快读几乎是快了一倍，不过两者都已经是神仙打架了，像 `scanf` 这种都已经被踢飞了，不过，快读虽好，使用还是要谨慎，速度的提高主要还是靠算法的优化（除了某些高性能的题）。\n\n### 补充\n\n这个 `nextchar()` 函数只能在读入文件时使用，在控制台输入时会出错，因为 `fread()` 是专门针对文件的。\n\n---\n","slug":"C-奇技淫巧-终极快速读入-输出","published":1,"updated":"2018-10-01T08:07:30.778Z","photos":["/2018/09/22/C-奇技淫巧-终极快速读入-输出/photo1.png"],"comments":1,"layout":"post","link":"","_id":"cjmssgbfu0000rgc8s27hk25o","content":"<div class=\"note default\"><p>上次看到一个手写 <code>getchar()</code> 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"手写-getchar\"><a href=\"#手写-getchar\" class=\"headerlink\" title=\"手写 getchar()\"></a>手写 <code>getchar()</code></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 使用 fread() 来提高速度</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"快读使用-nextchar\"><a href=\"#快读使用-nextchar\" class=\"headerlink\" title=\"快读使用 nextchar()\"></a>快读使用 <code>nextchar()</code></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 static 节省空间</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不需要用位运算了</span></span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归-write\"><a href=\"#非递归-write\" class=\"headerlink\" title=\"非递归 write()\"></a>非递归 <code>write()</code></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; x = -x; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) &#123; <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"速度测试\"><a href=\"#速度测试\" class=\"headerlink\" title=\"速度测试\"></a>速度测试</h3><h4 id=\"数据生成\"><a href=\"#数据生成\" class=\"headerlink\" title=\"数据生成\"></a>数据生成</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">ofstream <span class=\"title\">test</span><span class=\"params\">(<span class=\"string\">\"testdata.txt\"</span>)</span></span>;</span><br><span class=\"line\">  srand((<span class=\"keyword\">unsigned</span>)time(<span class=\"literal\">NULL</span>) * <span class=\"number\">19260817</span>); <span class=\"comment\">// +1s</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5000000</span>; ++i)</span><br><span class=\"line\">    test &lt;&lt; rand() &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 祖传代码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"老版本测试\"><a href=\"#老版本测试\" class=\"headerlink\" title=\"老版本测试\"></a>老版本测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) write(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"testdata.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"output.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) read(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) write(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]), <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span></span><br><span class=\"line\">       &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) *</span><br><span class=\"line\">          microseconds::period::num / microseconds::period::den</span><br><span class=\"line\">       &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>cost: 0.406813 seconds\n</code></pre><h4 id=\"新版本测试\"><a href=\"#新版本测试\" class=\"headerlink\" title=\"新版本测试\"></a>新版本测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 使用 fread() 来提高速度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 static 节省空间</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不需要用位运算了</span></span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; x = -x; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) &#123; <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"testdata.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"output.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) read(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) write(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]), <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span></span><br><span class=\"line\">       &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) *</span><br><span class=\"line\">          microseconds::period::num / microseconds::period::den</span><br><span class=\"line\">       &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>cost: 0.275003 seconds\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>新的快读几乎是快了一倍，不过两者都已经是神仙打架了，像 <code>scanf</code> 这种都已经被踢飞了，不过，快读虽好，使用还是要谨慎，速度的提高主要还是靠算法的优化（除了某些高性能的题）。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>这个 <code>nextchar()</code> 函数只能在读入文件时使用，在控制台输入时会出错，因为 <code>fread()</code> 是专门针对文件的。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>上次看到一个手写 <code>getchar()</code> 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。</p></div>","more":"<h3 id=\"手写-getchar\"><a href=\"#手写-getchar\" class=\"headerlink\" title=\"手写 getchar()\"></a>手写 <code>getchar()</code></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 使用 fread() 来提高速度</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"快读使用-nextchar\"><a href=\"#快读使用-nextchar\" class=\"headerlink\" title=\"快读使用 nextchar()\"></a>快读使用 <code>nextchar()</code></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 static 节省空间</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不需要用位运算了</span></span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归-write\"><a href=\"#非递归-write\" class=\"headerlink\" title=\"非递归 write()\"></a>非递归 <code>write()</code></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; x = -x; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) &#123; <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"速度测试\"><a href=\"#速度测试\" class=\"headerlink\" title=\"速度测试\"></a>速度测试</h3><h4 id=\"数据生成\"><a href=\"#数据生成\" class=\"headerlink\" title=\"数据生成\"></a>数据生成</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">ofstream <span class=\"title\">test</span><span class=\"params\">(<span class=\"string\">\"testdata.txt\"</span>)</span></span>;</span><br><span class=\"line\">  srand((<span class=\"keyword\">unsigned</span>)time(<span class=\"literal\">NULL</span>) * <span class=\"number\">19260817</span>); <span class=\"comment\">// +1s</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5000000</span>; ++i)</span><br><span class=\"line\">    test &lt;&lt; rand() &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 祖传代码</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"老版本测试\"><a href=\"#老版本测试\" class=\"headerlink\" title=\"老版本测试\"></a>老版本测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) write(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"testdata.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"output.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) read(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) write(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]), <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span></span><br><span class=\"line\">       &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) *</span><br><span class=\"line\">          microseconds::period::num / microseconds::period::den</span><br><span class=\"line\">       &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>cost: 0.406813 seconds\n</code></pre><h4 id=\"新版本测试\"><a href=\"#新版本测试\" class=\"headerlink\" title=\"新版本测试\"></a>新版本测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 使用 fread() 来提高速度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 static 节省空间</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不需要用位运算了</span></span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; x = -x; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) &#123; <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"testdata.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"output.txt\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) read(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000000</span>; ++i) write(<span class=\"built_in\">array</span>[i - <span class=\"number\">1</span>]), <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span></span><br><span class=\"line\">       &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) *</span><br><span class=\"line\">          microseconds::period::num / microseconds::period::den</span><br><span class=\"line\">       &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>cost: 0.275003 seconds\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>新的快读几乎是快了一倍，不过两者都已经是神仙打架了，像 <code>scanf</code> 这种都已经被踢飞了，不过，快读虽好，使用还是要谨慎，速度的提高主要还是靠算法的优化（除了某些高性能的题）。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>这个 <code>nextchar()</code> 函数只能在读入文件时使用，在控制台输入时会出错，因为 <code>fread()</code> 是专门针对文件的。</p>\n<hr>"},{"title":"Hello world!","date":"2018-08-05T05:39:26.000Z","copyright":true,"_content":"\n重新弄了一个 Github 账号，因为高中决定搞信息竞赛了，所以以后会在这个新的博客里不定期地更新一些有关信息竞赛的内容，当然也可能会更新其他的内容。\n<!-- more -->\n### 目录\nTO BE CONTINUED......\n\n---","source":"_posts/Hello-world.md","raw":"---\ntitle: Hello world!\ndate: 2018-08-05 13:39:26\ntags:\n\t- 杂谈\ncategories: 杂谈\ncopyright: true\n---\n\n重新弄了一个 Github 账号，因为高中决定搞信息竞赛了，所以以后会在这个新的博客里不定期地更新一些有关信息竞赛的内容，当然也可能会更新其他的内容。\n<!-- more -->\n### 目录\nTO BE CONTINUED......\n\n---","slug":"Hello-world","published":1,"updated":"2018-09-16T04:14:28.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbmw0006rgc8mz2vcabr","content":"<p>重新弄了一个 Github 账号，因为高中决定搞信息竞赛了，所以以后会在这个新的博客里不定期地更新一些有关信息竞赛的内容，当然也可能会更新其他的内容。<br><a id=\"more\"></a></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p>TO BE CONTINUED……</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>重新弄了一个 Github 账号，因为高中决定搞信息竞赛了，所以以后会在这个新的博客里不定期地更新一些有关信息竞赛的内容，当然也可能会更新其他的内容。<br>","more":"</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p>TO BE CONTINUED……</p>\n<hr>"},{"title":"[HEXO] hexo 中加入 AdSense 广告服务的方法","mathjax":true,"copyright":true,"comment":true,"date":"2018-09-25T09:56:35.000Z","_content":"\n{% note default %}\n\n就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。\n\n{% endnote %}\n\n<!-- more -->\n\n### 注册 AdSense 账号\n\n这个不多说了，直接去[这里](https://www.google.com/adsense/start/#/?modal_active=none)\n\n<div> <img style=\"align: center\" src=\"pic1.jpg\" /> </div>\n\n### 更改自己 hexo 主题文件\n\n此处以 NexT 主题为例（注：可能不是最简方式，自行斟酌）：\n1. 新建 `theme/next/layout/_custom/google_adsense.swig`，将 AdSense 上的代码粘贴进去\n2. 在 `theme/next/layout/_custom/head.swig` 中也粘贴一份\n3. 如果在每篇博客里也想看到广告的话，在 `theme/next/layout/post.swig` 里中在希望看到的地方加上:\n\n```swig\n{% include '_custom/google_adsense.swig' %}\n```\n例如：在 `<div id=\"posts\" class=\"posts-expand\"> </div>` 中间插入，总代码如下：\n\n```swig\n{% block content %}\n  <div id=\"posts\" class=\"posts-expand\">\n    {{ post_template.render(page) }}\n    {% include '_custom/google_adsense.swig' %}\n  </div>\n{% endblock %}\n```\n\n此时如果 `hexo server` 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。\n\n### 疯狂更新博客\n\n你需要使你的网站内容充足以通过 AdSense 的审核（我写了 21 篇左右才通过，其实算上所有网页其实还不止），如果被拒绝了，就再重新申请一次，说不定就过了🤣。\n\n### 总结\n\n使用 AdSense 来赚外块，美滋滋~~\n\n---","source":"_posts/HEXO-hexo-中加入-AdSense-广告服务的方法.md","raw":"---\ntitle: '[HEXO] hexo 中加入 AdSense 广告服务的方法'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-09-25 17:56:35\ntags:\n  - hexo\ncategories: hexo\nphoto: /2018/09/25/HEXO-hexo-中加入-AdSense-广告服务的方法/photo1.png\n---\n\n{% note default %}\n\n就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。\n\n{% endnote %}\n\n<!-- more -->\n\n### 注册 AdSense 账号\n\n这个不多说了，直接去[这里](https://www.google.com/adsense/start/#/?modal_active=none)\n\n<div> <img style=\"align: center\" src=\"pic1.jpg\" /> </div>\n\n### 更改自己 hexo 主题文件\n\n此处以 NexT 主题为例（注：可能不是最简方式，自行斟酌）：\n1. 新建 `theme/next/layout/_custom/google_adsense.swig`，将 AdSense 上的代码粘贴进去\n2. 在 `theme/next/layout/_custom/head.swig` 中也粘贴一份\n3. 如果在每篇博客里也想看到广告的话，在 `theme/next/layout/post.swig` 里中在希望看到的地方加上:\n\n```swig\n{% include '_custom/google_adsense.swig' %}\n```\n例如：在 `<div id=\"posts\" class=\"posts-expand\"> </div>` 中间插入，总代码如下：\n\n```swig\n{% block content %}\n  <div id=\"posts\" class=\"posts-expand\">\n    {{ post_template.render(page) }}\n    {% include '_custom/google_adsense.swig' %}\n  </div>\n{% endblock %}\n```\n\n此时如果 `hexo server` 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。\n\n### 疯狂更新博客\n\n你需要使你的网站内容充足以通过 AdSense 的审核（我写了 21 篇左右才通过，其实算上所有网页其实还不止），如果被拒绝了，就再重新申请一次，说不定就过了🤣。\n\n### 总结\n\n使用 AdSense 来赚外块，美滋滋~~\n\n---","slug":"HEXO-hexo-中加入-AdSense-广告服务的方法","published":1,"updated":"2018-09-25T12:56:21.863Z","photos":["/2018/09/25/HEXO-hexo-中加入-AdSense-广告服务的方法/photo1.png"],"comments":1,"layout":"post","link":"","_id":"cjmssgbmz0008rgc8ghd2e2cr","content":"<div class=\"note default\"><p>就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"注册-AdSense-账号\"><a href=\"#注册-AdSense-账号\" class=\"headerlink\" title=\"注册 AdSense 账号\"></a>注册 AdSense 账号</h3><p>这个不多说了，直接去<a href=\"https://www.google.com/adsense/start/#/?modal_active=none\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<div> <img style=\"align: center\" src=\"pic1.jpg\"> </div>\n\n<h3 id=\"更改自己-hexo-主题文件\"><a href=\"#更改自己-hexo-主题文件\" class=\"headerlink\" title=\"更改自己 hexo 主题文件\"></a>更改自己 hexo 主题文件</h3><p>此处以 NexT 主题为例（注：可能不是最简方式，自行斟酌）：</p>\n<ol>\n<li>新建 <code>theme/next/layout/_custom/google_adsense.swig</code>，将 AdSense 上的代码粘贴进去</li>\n<li>在 <code>theme/next/layout/_custom/head.swig</code> 中也粘贴一份</li>\n<li>如果在每篇博客里也想看到广告的话，在 <code>theme/next/layout/post.swig</code> 里中在希望看到的地方加上:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\">    &#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>此时如果 <code>hexo server</code> 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。</p>\n<h3 id=\"疯狂更新博客\"><a href=\"#疯狂更新博客\" class=\"headerlink\" title=\"疯狂更新博客\"></a>疯狂更新博客</h3><p>你需要使你的网站内容充足以通过 AdSense 的审核（我写了 21 篇左右才通过，其实算上所有网页其实还不止），如果被拒绝了，就再重新申请一次，说不定就过了🤣。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用 AdSense 来赚外块，美滋滋~~</p>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。</p></div>","more":"<h3 id=\"注册-AdSense-账号\"><a href=\"#注册-AdSense-账号\" class=\"headerlink\" title=\"注册 AdSense 账号\"></a>注册 AdSense 账号</h3><p>这个不多说了，直接去<a href=\"https://www.google.com/adsense/start/#/?modal_active=none\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<div> <img style=\"align: center\" src=\"pic1.jpg\"> </div>\n\n<h3 id=\"更改自己-hexo-主题文件\"><a href=\"#更改自己-hexo-主题文件\" class=\"headerlink\" title=\"更改自己 hexo 主题文件\"></a>更改自己 hexo 主题文件</h3><p>此处以 NexT 主题为例（注：可能不是最简方式，自行斟酌）：</p>\n<ol>\n<li>新建 <code>theme/next/layout/_custom/google_adsense.swig</code>，将 AdSense 上的代码粘贴进去</li>\n<li>在 <code>theme/next/layout/_custom/head.swig</code> 中也粘贴一份</li>\n<li>如果在每篇博客里也想看到广告的话，在 <code>theme/next/layout/post.swig</code> 里中在希望看到的地方加上:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\">    &#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<p>此时如果 <code>hexo server</code> 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。</p>\n<h3 id=\"疯狂更新博客\"><a href=\"#疯狂更新博客\" class=\"headerlink\" title=\"疯狂更新博客\"></a>疯狂更新博客</h3><p>你需要使你的网站内容充足以通过 AdSense 的审核（我写了 21 篇左右才通过，其实算上所有网页其实还不止），如果被拒绝了，就再重新申请一次，说不定就过了🤣。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用 AdSense 来赚外块，美滋滋~~</p>\n<hr>"},{"title":"[LeetCode 刷题日志] LeetCode-3 无重复字符的最长子串","date":"2018-08-12T13:34:50.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n今天开始刷 [LeetCode](https://leetcode-cn.com/)，虽然说里面都是大公司的面试题，但是作为一个 OIer，刷刷也无妨，还能够提高自己的代码能力。本来希望**花个 3 天**刷完 LeetCode，结果发现这是完全不可能的，今天就被很基础的第三题给卡住了......\n\n<!-- more -->\n\n### LeetCode-3 题解\n***——坑人的大水题***\n\n[**题目**](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/)**描述**：\n\n\t给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n\t示例：\n\n\t给定 \"abcabcbb\" ，没有重复字符的最长子串是 \"abc\" ，那么长度就是3。\n\t给定 \"bbbbb\" ，最长的子串就是 \"b\" ，长度是1。\n\t给定 \"pwwkew\" ，最长子串是 \"wke\" ，长度是3。请注意答案必须是一个子串，\"pwke\" 是 子序列  而不是子串。\n\n**[题解]**\n\n直接上代码，具体说明看注释。\n\n```cpp\nclass Solution {\n public:\n\tint lengthOfLongestSubstring(string s) {\n\t\tint maxLen = 0;\n\t\tint currLen = 0;\n\t\t// table 用于记录字符出现的次数，之所以设为 128 是为了适配 ASCII 码\n\t\tint table[128], start = 0;\n\t\t// 全部初始化为 0\n\t\tmemset(table, 0, sizeof(table));\n\t\tfor (int i = 0; i < s.length(); ++i) {\n\t\t\t// 如果 ++table[s[i]] 为 2，则说明这个数在所选的子串中已经出现过了\n\t\t\t// 当然这里还有好多写法\n\t\t\tif (++table[s[i]] == 2) {\n\t\t\t\t// 因为遇到重复的字符了，所以要先更新 maxLen\n\t\t\t\tif (currLen > maxLen) maxLen = currLen;\n\t\t\t\t// 接下来查找重复的数字出现的地方，并且更新字串起始位置\n\t\t\t\t// 这里可以优化：使用一个 map<char, int>\n\t\t\t\t// 或 table0[128] 来记录字符的出现位置\n\t\t\t\t// 同时也可以与前面的 table 数组合并，既加快速度又减少空间\n\t\t\t\t// 这里因为不需要（懒），所以就打了这个未优化的算法\n\t\t\t\t// 有兴趣的读者可以去试一试优化算法。\n\t\t\t\tfor (int j = start; j < i; ++j) {\n\t\t\t\t\tif (s[j] == s[i]) {\n\t\t\t\t\t\ttable[s[j]] = 1;\n\t\t\t\t\t\tstart = j + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// 因为最多出现一次，所以直接 break\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 没找到的话必须减小答案\n\t\t\t\t\t\t--currLen;\n\t\t\t\t\t\t// 重置\n\t\t\t\t\t\ttable[s[j]] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else ++currLen; // 没有重复就直接自加一\n\t\t}\n\t\t// 最后的判断必不可少\n\t\tif (currLen > maxLen) maxLen = currLen;\n\t\treturn maxLen;\n\t}\n};\n\n// 由于本人是一个 OIer，还是 Google 资深老粉丝，所以代码风格比较混搭（逃）。\n```\n\n那么，是什么卡了我那么长时间呢？一开始的代码遇到重复的字符，直接更新起始位置到当前字符，殊不知会有 abcdaefg 这种情况，于是一直 WA。论充分思考的重要性.....\n\n### 总结\n\nLeetCode 的题目难度并不是很大的，很多题差不多是`提高-`的难度，但是细节太多，同时对代码能力的要求比较高，某些数据结构也与 OI 中所写地不太一样。但是当作算法训练场来做也没什么坏处。\n\n---\n","source":"_posts/LeetCode-刷题日志-LeetCode-3-无重复字符的最长子串.md","raw":"---\ntitle: '[LeetCode 刷题日志] LeetCode-3 无重复字符的最长子串'\ndate: 2018-08-12 21:34:50\ntags:\n\t- LeetCode\n\t- 字符串\n\t- 算法\ncategories: LeetCode\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n今天开始刷 [LeetCode](https://leetcode-cn.com/)，虽然说里面都是大公司的面试题，但是作为一个 OIer，刷刷也无妨，还能够提高自己的代码能力。本来希望**花个 3 天**刷完 LeetCode，结果发现这是完全不可能的，今天就被很基础的第三题给卡住了......\n\n<!-- more -->\n\n### LeetCode-3 题解\n***——坑人的大水题***\n\n[**题目**](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/)**描述**：\n\n\t给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n\t示例：\n\n\t给定 \"abcabcbb\" ，没有重复字符的最长子串是 \"abc\" ，那么长度就是3。\n\t给定 \"bbbbb\" ，最长的子串就是 \"b\" ，长度是1。\n\t给定 \"pwwkew\" ，最长子串是 \"wke\" ，长度是3。请注意答案必须是一个子串，\"pwke\" 是 子序列  而不是子串。\n\n**[题解]**\n\n直接上代码，具体说明看注释。\n\n```cpp\nclass Solution {\n public:\n\tint lengthOfLongestSubstring(string s) {\n\t\tint maxLen = 0;\n\t\tint currLen = 0;\n\t\t// table 用于记录字符出现的次数，之所以设为 128 是为了适配 ASCII 码\n\t\tint table[128], start = 0;\n\t\t// 全部初始化为 0\n\t\tmemset(table, 0, sizeof(table));\n\t\tfor (int i = 0; i < s.length(); ++i) {\n\t\t\t// 如果 ++table[s[i]] 为 2，则说明这个数在所选的子串中已经出现过了\n\t\t\t// 当然这里还有好多写法\n\t\t\tif (++table[s[i]] == 2) {\n\t\t\t\t// 因为遇到重复的字符了，所以要先更新 maxLen\n\t\t\t\tif (currLen > maxLen) maxLen = currLen;\n\t\t\t\t// 接下来查找重复的数字出现的地方，并且更新字串起始位置\n\t\t\t\t// 这里可以优化：使用一个 map<char, int>\n\t\t\t\t// 或 table0[128] 来记录字符的出现位置\n\t\t\t\t// 同时也可以与前面的 table 数组合并，既加快速度又减少空间\n\t\t\t\t// 这里因为不需要（懒），所以就打了这个未优化的算法\n\t\t\t\t// 有兴趣的读者可以去试一试优化算法。\n\t\t\t\tfor (int j = start; j < i; ++j) {\n\t\t\t\t\tif (s[j] == s[i]) {\n\t\t\t\t\t\ttable[s[j]] = 1;\n\t\t\t\t\t\tstart = j + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// 因为最多出现一次，所以直接 break\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 没找到的话必须减小答案\n\t\t\t\t\t\t--currLen;\n\t\t\t\t\t\t// 重置\n\t\t\t\t\t\ttable[s[j]] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else ++currLen; // 没有重复就直接自加一\n\t\t}\n\t\t// 最后的判断必不可少\n\t\tif (currLen > maxLen) maxLen = currLen;\n\t\treturn maxLen;\n\t}\n};\n\n// 由于本人是一个 OIer，还是 Google 资深老粉丝，所以代码风格比较混搭（逃）。\n```\n\n那么，是什么卡了我那么长时间呢？一开始的代码遇到重复的字符，直接更新起始位置到当前字符，殊不知会有 abcdaefg 这种情况，于是一直 WA。论充分思考的重要性.....\n\n### 总结\n\nLeetCode 的题目难度并不是很大的，很多题差不多是`提高-`的难度，但是细节太多，同时对代码能力的要求比较高，某些数据结构也与 OI 中所写地不太一样。但是当作算法训练场来做也没什么坏处。\n\n---\n","slug":"LeetCode-刷题日志-LeetCode-3-无重复字符的最长子串","published":1,"updated":"2018-10-01T08:06:42.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbn4000crgc8vh8xas4t","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>今天开始刷 <a href=\"https://leetcode-cn.com/\" target=\"_blank\" rel=\"noopener\">LeetCode</a>，虽然说里面都是大公司的面试题，但是作为一个 OIer，刷刷也无妨，还能够提高自己的代码能力。本来希望<strong>花个 3 天</strong>刷完 LeetCode，结果发现这是完全不可能的，今天就被很基础的第三题给卡住了……</p>\n<a id=\"more\"></a>\n<h3 id=\"LeetCode-3-题解\"><a href=\"#LeetCode-3-题解\" class=\"headerlink\" title=\"LeetCode-3 题解\"></a>LeetCode-3 题解</h3><p><strong><em>——坑人的大水题</em></strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/\" target=\"_blank\" rel=\"noopener\"><strong>题目</strong></a><strong>描述</strong>：</p>\n<pre><code>给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n示例：\n\n给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。\n给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。\n给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。\n</code></pre><p><strong>[题解]</strong></p>\n<p>直接上代码，具体说明看注释。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> currLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// table 用于记录字符出现的次数，之所以设为 128 是为了适配 ASCII 码</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> table[<span class=\"number\">128</span>], start = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 全部初始化为 0</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(table, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(table));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果 ++table[s[i]] 为 2，则说明这个数在所选的子串中已经出现过了</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当然这里还有好多写法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++table[s[i]] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 因为遇到重复的字符了，所以要先更新 maxLen</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (currLen &gt; maxLen) maxLen = currLen;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 接下来查找重复的数字出现的地方，并且更新字串起始位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里可以优化：使用一个 map&lt;char, int&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 或 table0[128] 来记录字符的出现位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 同时也可以与前面的 table 数组合并，既加快速度又减少空间</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里因为不需要（懒），所以就打了这个未优化的算法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 有兴趣的读者可以去试一试优化算法。</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = start; j &lt; i; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (s[j] == s[i]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ttable[s[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\tstart = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 因为最多出现一次，所以直接 break</span></span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 没找到的话必须减小答案</span></span><br><span class=\"line\">\t\t\t\t\t\t--currLen;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 重置</span></span><br><span class=\"line\">\t\t\t\t\t\ttable[s[j]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> ++currLen; <span class=\"comment\">// 没有重复就直接自加一</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 最后的判断必不可少</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (currLen &gt; maxLen) maxLen = currLen;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxLen;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于本人是一个 OIer，还是 Google 资深老粉丝，所以代码风格比较混搭（逃）。</span></span><br></pre></td></tr></table></figure>\n<p>那么，是什么卡了我那么长时间呢？一开始的代码遇到重复的字符，直接更新起始位置到当前字符，殊不知会有 abcdaefg 这种情况，于是一直 WA。论充分思考的重要性…..</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>LeetCode 的题目难度并不是很大的，很多题差不多是<code>提高-</code>的难度，但是细节太多，同时对代码能力的要求比较高，某些数据结构也与 OI 中所写地不太一样。但是当作算法训练场来做也没什么坏处。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>今天开始刷 <a href=\"https://leetcode-cn.com/\" target=\"_blank\" rel=\"noopener\">LeetCode</a>，虽然说里面都是大公司的面试题，但是作为一个 OIer，刷刷也无妨，还能够提高自己的代码能力。本来希望<strong>花个 3 天</strong>刷完 LeetCode，结果发现这是完全不可能的，今天就被很基础的第三题给卡住了……</p>","more":"<h3 id=\"LeetCode-3-题解\"><a href=\"#LeetCode-3-题解\" class=\"headerlink\" title=\"LeetCode-3 题解\"></a>LeetCode-3 题解</h3><p><strong><em>——坑人的大水题</em></strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/\" target=\"_blank\" rel=\"noopener\"><strong>题目</strong></a><strong>描述</strong>：</p>\n<pre><code>给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n示例：\n\n给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。\n给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。\n给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。\n</code></pre><p><strong>[题解]</strong></p>\n<p>直接上代码，具体说明看注释。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> currLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// table 用于记录字符出现的次数，之所以设为 128 是为了适配 ASCII 码</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> table[<span class=\"number\">128</span>], start = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 全部初始化为 0</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(table, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(table));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果 ++table[s[i]] 为 2，则说明这个数在所选的子串中已经出现过了</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当然这里还有好多写法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (++table[s[i]] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 因为遇到重复的字符了，所以要先更新 maxLen</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (currLen &gt; maxLen) maxLen = currLen;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 接下来查找重复的数字出现的地方，并且更新字串起始位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里可以优化：使用一个 map&lt;char, int&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 或 table0[128] 来记录字符的出现位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 同时也可以与前面的 table 数组合并，既加快速度又减少空间</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里因为不需要（懒），所以就打了这个未优化的算法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 有兴趣的读者可以去试一试优化算法。</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = start; j &lt; i; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (s[j] == s[i]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ttable[s[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\tstart = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 因为最多出现一次，所以直接 break</span></span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 没找到的话必须减小答案</span></span><br><span class=\"line\">\t\t\t\t\t\t--currLen;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 重置</span></span><br><span class=\"line\">\t\t\t\t\t\ttable[s[j]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> ++currLen; <span class=\"comment\">// 没有重复就直接自加一</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 最后的判断必不可少</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (currLen &gt; maxLen) maxLen = currLen;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxLen;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于本人是一个 OIer，还是 Google 资深老粉丝，所以代码风格比较混搭（逃）。</span></span><br></pre></td></tr></table></figure>\n<p>那么，是什么卡了我那么长时间呢？一开始的代码遇到重复的字符，直接更新起始位置到当前字符，殊不知会有 abcdaefg 这种情况，于是一直 WA。论充分思考的重要性…..</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>LeetCode 的题目难度并不是很大的，很多题差不多是<code>提高-</code>的难度，但是细节太多，同时对代码能力的要求比较高，某些数据结构也与 OI 中所写地不太一样。但是当作算法训练场来做也没什么坏处。</p>\n<hr>"},{"title":"[HEXO] hexo 中插入视频的方法","date":"2018-08-29T12:31:30.000Z","copyright":true,"_content":"\n### 写在前面\n\n以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。\n\n<!-- more -->\n\n### 插入 Youtube 视频\n\n插入 Youtube 视频其实很简单，在 YouTube 视频的下方的“共享”中，选择嵌入即可获取类似这样的链接：\n\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n```\n效果如下（要梯子）：\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n可以将 `width` 或 `height` 改为 `\"100%\"`（当然也可以两个都改，具体效果试了才知道，这个数值是可以随便改的）\n\n```html\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n```\n效果如下（要梯子）：\n\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n### 插入 Bilibili 视频\n\n其实也是一样，点击“分享”，获取 `iframe` 这个代码就可以了\n\n```html\n<iframe src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n```\n效果如下：\n\n<iframe src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n自定义了大小之后的效果：\n\n<iframe width=\"100%\" height=\"350\" src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n### 通用方法\n\n直接把视频文件放在资源文件夹里，然后直接写 HTML 代码：\n\n```html\n<video width=\"100%\" height=\"400\" src=\"movie.mp4\" controls=\"controls\">\nThe `<video>` tag is not supported by your browser.\n</video>\n```\n效果如下：\n\n<video width=\"100%\" height=\"400\" src=\"movie.mp4\" controls=\"controls\">\nThe `<video>` tag is not supported by your browser.\n</video>\n\n### 总结\n\n嗯...... HTML 大法好，在 Markdown 里用 HTML 控件简直美滋滋。\n\n---","source":"_posts/HEXO-hexo-中插入视频的方法.md","raw":"---\ntitle: '[HEXO] hexo 中插入视频的方法'\ndate: 2018-08-29 20:31:30\ntags:\n\t- hexo\ncategories: hexo\ncopyright: true\n---\n\n### 写在前面\n\n以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。\n\n<!-- more -->\n\n### 插入 Youtube 视频\n\n插入 Youtube 视频其实很简单，在 YouTube 视频的下方的“共享”中，选择嵌入即可获取类似这样的链接：\n\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n```\n效果如下（要梯子）：\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n可以将 `width` 或 `height` 改为 `\"100%\"`（当然也可以两个都改，具体效果试了才知道，这个数值是可以随便改的）\n\n```html\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n```\n效果如下（要梯子）：\n\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n### 插入 Bilibili 视频\n\n其实也是一样，点击“分享”，获取 `iframe` 这个代码就可以了\n\n```html\n<iframe src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n```\n效果如下：\n\n<iframe src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n自定义了大小之后的效果：\n\n<iframe width=\"100%\" height=\"350\" src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n### 通用方法\n\n直接把视频文件放在资源文件夹里，然后直接写 HTML 代码：\n\n```html\n<video width=\"100%\" height=\"400\" src=\"movie.mp4\" controls=\"controls\">\nThe `<video>` tag is not supported by your browser.\n</video>\n```\n效果如下：\n\n<video width=\"100%\" height=\"400\" src=\"movie.mp4\" controls=\"controls\">\nThe `<video>` tag is not supported by your browser.\n</video>\n\n### 总结\n\n嗯...... HTML 大法好，在 Markdown 里用 HTML 控件简直美滋滋。\n\n---","slug":"HEXO-hexo-中插入视频的方法","published":1,"updated":"2018-09-16T04:14:28.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbn8000ergc83pw4pkei","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。</p>\n<a id=\"more\"></a>\n<h3 id=\"插入-Youtube-视频\"><a href=\"#插入-Youtube-视频\" class=\"headerlink\" title=\"插入 Youtube 视频\"></a>插入 Youtube 视频</h3><p>插入 Youtube 视频其实很简单，在 YouTube 视频的下方的“共享”中，选择嵌入即可获取类似这样的链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"560\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"315\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allow</span>=<span class=\"string\">\"autoplay; encrypted-media\"</span> <span class=\"attr\">allowfullscreen</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下（要梯子）：</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n<p>可以将 <code>width</code> 或 <code>height</code> 改为 <code>&quot;100%&quot;</code>（当然也可以两个都改，具体效果试了才知道，这个数值是可以随便改的）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"350\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allow</span>=<span class=\"string\">\"autoplay; encrypted-media\"</span> <span class=\"attr\">allowfullscreen</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下（要梯子）：</p>\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n<h3 id=\"插入-Bilibili-视频\"><a href=\"#插入-Bilibili-视频\" class=\"headerlink\" title=\"插入 Bilibili 视频\"></a>插入 Bilibili 视频</h3><p>其实也是一样，点击“分享”，获取 <code>iframe</code> 这个代码就可以了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//player.bilibili.com/player.html?aid=19448254&amp;cid=31715906&amp;page=1\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">framespacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allowfullscreen</span>=<span class=\"string\">\"true\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p>自定义了大小之后的效果：</p>\n<iframe width=\"100%\" height=\"350\" src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<h3 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h3><p>直接把视频文件放在资源文件夹里，然后直接写 HTML 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">The `<span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span>` tag is not supported by your browser.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<video width=\"100%\" height=\"400\" src=\"movie.mp4\" controls=\"controls\"><br>The <code>&lt;video&gt;</code> tag is not supported by your browser.<br></video>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>嗯…… HTML 大法好，在 Markdown 里用 HTML 控件简直美滋滋。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。</p>","more":"<h3 id=\"插入-Youtube-视频\"><a href=\"#插入-Youtube-视频\" class=\"headerlink\" title=\"插入 Youtube 视频\"></a>插入 Youtube 视频</h3><p>插入 Youtube 视频其实很简单，在 YouTube 视频的下方的“共享”中，选择嵌入即可获取类似这样的链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"560\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"315\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allow</span>=<span class=\"string\">\"autoplay; encrypted-media\"</span> <span class=\"attr\">allowfullscreen</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下（要梯子）：</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n<p>可以将 <code>width</code> 或 <code>height</code> 改为 <code>&quot;100%&quot;</code>（当然也可以两个都改，具体效果试了才知道，这个数值是可以随便改的）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"350\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allow</span>=<span class=\"string\">\"autoplay; encrypted-media\"</span> <span class=\"attr\">allowfullscreen</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下（要梯子）：</p>\n<iframe width=\"100%\" height=\"350\" src=\"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n<h3 id=\"插入-Bilibili-视频\"><a href=\"#插入-Bilibili-视频\" class=\"headerlink\" title=\"插入 Bilibili 视频\"></a>插入 Bilibili 视频</h3><p>其实也是一样，点击“分享”，获取 <code>iframe</code> 这个代码就可以了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//player.bilibili.com/player.html?aid=19448254&amp;cid=31715906&amp;page=1\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">framespacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">allowfullscreen</span>=<span class=\"string\">\"true\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p>自定义了大小之后的效果：</p>\n<iframe width=\"100%\" height=\"350\" src=\"//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<h3 id=\"通用方法\"><a href=\"#通用方法\" class=\"headerlink\" title=\"通用方法\"></a>通用方法</h3><p>直接把视频文件放在资源文件夹里，然后直接写 HTML 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span>&gt;</span></span><br><span class=\"line\">The `<span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span>` tag is not supported by your browser.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<video width=\"100%\" height=\"400\" src=\"movie.mp4\" controls=\"controls\"><br>The <code>&lt;video&gt;</code> tag is not supported by your browser.<br></video>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>嗯…… HTML 大法好，在 Markdown 里用 HTML 控件简直美滋滋。</p>\n<hr>"},{"title":"[NOIP 初赛] 总结一波读程序写结果题目","mathjax":true,"copyright":true,"comment":true,"date":"2018-09-20T09:57:14.000Z","_content":"\n{% note default %}\n\n为了提高初赛分数，痛下决心总结一波**读程序写结果**的题。\n\nps: 一次更新不完，会持续更新\n\n{% endnote %}\n\n<!-- more -->\n\n### 第二十一届 / NOIP 2015\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid fun(char *a, char *b) {\n  a = b;\n  (*a)++;\n}\n\nint main() {\n  char c1, c2, *p1, *p2;\n  c1 = 'A';\n  c2 = 'a';\n  p1 = &c1;\n  p2 = &c2;\n  fun(p1, p2);\n  cout << c1 << c2 << endl;\n  return 0;\n}\n\n// 输出：Ab\n\n```\n\n这道题中先是将 `p1` 赋值为 `c1` 的地址，将 `p2` 赋值为 `c2` 的地址，然后将 `p1` 赋值为 `p2` 的值，即现在 `p1` 所表示的是 `c2` 的地址，所以最后只有 `c2` 会发生改变，这道题一开始没看出来，后来仔细想了想才反应过来，不失为一道坑题。\n\n<hr />\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint fun(int n, int fromPos, int toPos) {\n  int t, tot;\n  if (n == 0)\n    return 0;\n  for (t = 1; t <= 3; t++)\n    if (t != fromPos && t != toPos)\n      break;\n  tot = 0;\n  tot += fun(n - 1, fromPos, t);\n  tot++;\n  tot += fun(n - 1, t, toPos);\n  return tot;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cout << fun(n, 1, 3) << endl;\n  return 0;\n}\n\n// 输入：5\n// 输出：31\n\n```\n\n这道题其实纯属糊弄人，可以发现 `fun` 这个函数中不管 `fromPos` 和 `toPos` 为何值，总能继续下去，所以简化后的函数如下：\n\n```cpp\nint fun(int n) {\n  if (n == 0) return 0;\n  return fun(n - 1) * 2 + 1;\n}\n```\n\n好了，这样子的递归函数手推就行了。\n\n\n### 未完待续......\n\n---","source":"_posts/NOIP-初赛-总结一波读程序写结果题目.md","raw":"---\ntitle: '[NOIP 初赛] 总结一波读程序写结果题目'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-09-20 17:57:14\ntags:\n  - NOIP 初赛\ncategories: NOIP\nphoto: /2018/09/20/NOIP-初赛-总结一波读程序写结果题目/photo1.jpg\n---\n\n{% note default %}\n\n为了提高初赛分数，痛下决心总结一波**读程序写结果**的题。\n\nps: 一次更新不完，会持续更新\n\n{% endnote %}\n\n<!-- more -->\n\n### 第二十一届 / NOIP 2015\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid fun(char *a, char *b) {\n  a = b;\n  (*a)++;\n}\n\nint main() {\n  char c1, c2, *p1, *p2;\n  c1 = 'A';\n  c2 = 'a';\n  p1 = &c1;\n  p2 = &c2;\n  fun(p1, p2);\n  cout << c1 << c2 << endl;\n  return 0;\n}\n\n// 输出：Ab\n\n```\n\n这道题中先是将 `p1` 赋值为 `c1` 的地址，将 `p2` 赋值为 `c2` 的地址，然后将 `p1` 赋值为 `p2` 的值，即现在 `p1` 所表示的是 `c2` 的地址，所以最后只有 `c2` 会发生改变，这道题一开始没看出来，后来仔细想了想才反应过来，不失为一道坑题。\n\n<hr />\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint fun(int n, int fromPos, int toPos) {\n  int t, tot;\n  if (n == 0)\n    return 0;\n  for (t = 1; t <= 3; t++)\n    if (t != fromPos && t != toPos)\n      break;\n  tot = 0;\n  tot += fun(n - 1, fromPos, t);\n  tot++;\n  tot += fun(n - 1, t, toPos);\n  return tot;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  cout << fun(n, 1, 3) << endl;\n  return 0;\n}\n\n// 输入：5\n// 输出：31\n\n```\n\n这道题其实纯属糊弄人，可以发现 `fun` 这个函数中不管 `fromPos` 和 `toPos` 为何值，总能继续下去，所以简化后的函数如下：\n\n```cpp\nint fun(int n) {\n  if (n == 0) return 0;\n  return fun(n - 1) * 2 + 1;\n}\n```\n\n好了，这样子的递归函数手推就行了。\n\n\n### 未完待续......\n\n---","slug":"NOIP-初赛-总结一波读程序写结果题目","published":1,"updated":"2018-09-25T09:46:47.763Z","photos":["/2018/09/20/NOIP-初赛-总结一波读程序写结果题目/photo1.jpg"],"comments":1,"layout":"post","link":"","_id":"cjmssgbna000frgc8n8eiz6lz","content":"<div class=\"note default\"><p>为了提高初赛分数，痛下决心总结一波<strong>读程序写结果</strong>的题。</p><p>ps: 一次更新不完，会持续更新</p></div>\n<a id=\"more\"></a>\n<h3 id=\"第二十一届-NOIP-2015\"><a href=\"#第二十一届-NOIP-2015\" class=\"headerlink\" title=\"第二十一届 / NOIP 2015\"></a>第二十一届 / NOIP 2015</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">char</span> *b)</span> </span>&#123;</span><br><span class=\"line\">  a = b;</span><br><span class=\"line\">  (*a)++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c1, c2, *p1, *p2;</span><br><span class=\"line\">  c1 = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">  c2 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">  p1 = &amp;c1;</span><br><span class=\"line\">  p2 = &amp;c2;</span><br><span class=\"line\">  fun(p1, p2);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：Ab</span></span><br></pre></td></tr></table></figure>\n<p>这道题中先是将 <code>p1</code> 赋值为 <code>c1</code> 的地址，将 <code>p2</code> 赋值为 <code>c2</code> 的地址，然后将 <code>p1</code> 赋值为 <code>p2</code> 的值，即现在 <code>p1</code> 所表示的是 <code>c2</code> 的地址，所以最后只有 <code>c2</code> 会发生改变，这道题一开始没看出来，后来仔细想了想才反应过来，不失为一道坑题。</p>\n<hr>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> fromPos, <span class=\"keyword\">int</span> toPos)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> t, tot;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (t = <span class=\"number\">1</span>; t &lt;= <span class=\"number\">3</span>; t++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t != fromPos &amp;&amp; t != toPos)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">  tot += fun(n - <span class=\"number\">1</span>, fromPos, t);</span><br><span class=\"line\">  tot++;</span><br><span class=\"line\">  tot += fun(n - <span class=\"number\">1</span>, t, toPos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; fun(n, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入：5</span></span><br><span class=\"line\"><span class=\"comment\">// 输出：31</span></span><br></pre></td></tr></table></figure>\n<p>这道题其实纯属糊弄人，可以发现 <code>fun</code> 这个函数中不管 <code>fromPos</code> 和 <code>toPos</code> 为何值，总能继续下去，所以简化后的函数如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fun(n - <span class=\"number\">1</span>) * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，这样子的递归函数手推就行了。</p>\n<h3 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h3><hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>为了提高初赛分数，痛下决心总结一波<strong>读程序写结果</strong>的题。</p><p>ps: 一次更新不完，会持续更新</p></div>","more":"<h3 id=\"第二十一届-NOIP-2015\"><a href=\"#第二十一届-NOIP-2015\" class=\"headerlink\" title=\"第二十一届 / NOIP 2015\"></a>第二十一届 / NOIP 2015</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">char</span> *b)</span> </span>&#123;</span><br><span class=\"line\">  a = b;</span><br><span class=\"line\">  (*a)++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c1, c2, *p1, *p2;</span><br><span class=\"line\">  c1 = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">  c2 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">  p1 = &amp;c1;</span><br><span class=\"line\">  p2 = &amp;c2;</span><br><span class=\"line\">  fun(p1, p2);</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：Ab</span></span><br></pre></td></tr></table></figure>\n<p>这道题中先是将 <code>p1</code> 赋值为 <code>c1</code> 的地址，将 <code>p2</code> 赋值为 <code>c2</code> 的地址，然后将 <code>p1</code> 赋值为 <code>p2</code> 的值，即现在 <code>p1</code> 所表示的是 <code>c2</code> 的地址，所以最后只有 <code>c2</code> 会发生改变，这道题一开始没看出来，后来仔细想了想才反应过来，不失为一道坑题。</p>\n<hr>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> fromPos, <span class=\"keyword\">int</span> toPos)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> t, tot;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (t = <span class=\"number\">1</span>; t &lt;= <span class=\"number\">3</span>; t++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t != fromPos &amp;&amp; t != toPos)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">  tot += fun(n - <span class=\"number\">1</span>, fromPos, t);</span><br><span class=\"line\">  tot++;</span><br><span class=\"line\">  tot += fun(n - <span class=\"number\">1</span>, t, toPos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">  <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; fun(n, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入：5</span></span><br><span class=\"line\"><span class=\"comment\">// 输出：31</span></span><br></pre></td></tr></table></figure>\n<p>这道题其实纯属糊弄人，可以发现 <code>fun</code> 这个函数中不管 <code>fromPos</code> 和 <code>toPos</code> 为何值，总能继续下去，所以简化后的函数如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fun(n - <span class=\"number\">1</span>) * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，这样子的递归函数手推就行了。</p>\n<h3 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h3><hr>"},{"title":"[NOIP 初赛] 各类排序算法时间/空间复杂度整理","mathjax":true,"copyright":true,"comment":true,"date":"2018-09-28T12:35:20.000Z","photo":null,"_content":"\n{% note default %}\n\n排序算法在初赛中似乎每次都会考到，而且考到的不外乎它们的时间复杂度和空间复杂度，所以此处进行一次整理。\n\n{% endnote %}\n\n<!-- more -->\n\n### 时间复杂度\n\n| 算法名称 | 平均时间复杂度                       | 最好时间复杂度 | 最坏时间复杂度 | 稳定性 |\n| -------- | ------------------------------------ | -------------- | -------------- | ------ |\n| 桶排序   | $\\mathcal{O}(n)$                     | $\\mathcal{O}(n)$ | $\\mathcal{O}(n)$ | 不稳定 |\n| 基数排序 | $\\mathcal{O}(n)$                     | $\\mathcal{O}(n)$ | $\\mathcal{O}(n)$ | 稳定 |\n| 归并排序 | $\\mathcal{O}(n\\log n)$               | $\\mathcal{O}(n\\log n)$ | $\\mathcal{O}(n\\log n)$ | 稳定 |\n| 快速排序 | $\\mathcal{O}(n\\log n)$               | $\\mathcal{O}(n\\log n)$ | $\\mathcal{O}(n^2)$ | 不稳定 |\n| 选择排序 | $\\mathcal{O}(n^2)$                   | $\\mathcal{O}(n)$ | $\\mathcal{O}(n)$ | 不稳定 |\n| 插入排序 | $\\mathcal{O}(n^2)$                   | $\\mathcal{O}(n)$ | $\\mathcal{O}(n^2)$ | 稳定 |\n| 希尔排序 | [见维基百科](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F) | [见维基百科](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F) | [见维基百科](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F) | 不稳定 |\n| 堆排序   | $\\mathcal{O}(n\\log n)$             | $\\mathcal{O}(n\\log n)$ | $\\mathcal{O}(n\\log n)$ | 不稳定 |\n| 冒泡排序 | $\\mathcal{O}(n^2)$                   | $\\mathcal{O}(n^2)$ | $\\mathcal{O}(n^2)$ | 稳定 |\n\n**注：《算法》的作者曾经说过，所有的不稳定算法都可以用额外空间变成稳定的，所以这里的整理只能用于 NOIP 初赛**\n\n### 空间复杂度\n\n冒泡排序,简单选择排序,堆排序,直接插入排序,希尔排序的空间复杂度为 $\\mathcal{O}(1)$，因为需要一个临时变量来交换元素位置,(另外遍历序列时自然少不了用一个变量来做索引)\n快速排序空间复杂度为 $\\mathcal{O}(\\log n)$ （因为递归调用了），归并排序空间复杂是 $\\mathcal{O}(n)$，需要一个大小为n的临时数组.\n基数排序的空间复杂是 $\\mathcal{O}(n)$，桶排序的空间复杂度不确定。\n\n---","source":"_posts/NOIP-初赛-各类排序算法时间-空间复杂度整理.md","raw":"title: '[NOIP 初赛] 各类排序算法时间/空间复杂度整理'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-09-28 20:35:20\ntags:\n  - NOIP 初赛\ncategories: NOIP\nphoto:\n---\n\n{% note default %}\n\n排序算法在初赛中似乎每次都会考到，而且考到的不外乎它们的时间复杂度和空间复杂度，所以此处进行一次整理。\n\n{% endnote %}\n\n<!-- more -->\n\n### 时间复杂度\n\n| 算法名称 | 平均时间复杂度                       | 最好时间复杂度 | 最坏时间复杂度 | 稳定性 |\n| -------- | ------------------------------------ | -------------- | -------------- | ------ |\n| 桶排序   | $\\mathcal{O}(n)$                     | $\\mathcal{O}(n)$ | $\\mathcal{O}(n)$ | 不稳定 |\n| 基数排序 | $\\mathcal{O}(n)$                     | $\\mathcal{O}(n)$ | $\\mathcal{O}(n)$ | 稳定 |\n| 归并排序 | $\\mathcal{O}(n\\log n)$               | $\\mathcal{O}(n\\log n)$ | $\\mathcal{O}(n\\log n)$ | 稳定 |\n| 快速排序 | $\\mathcal{O}(n\\log n)$               | $\\mathcal{O}(n\\log n)$ | $\\mathcal{O}(n^2)$ | 不稳定 |\n| 选择排序 | $\\mathcal{O}(n^2)$                   | $\\mathcal{O}(n)$ | $\\mathcal{O}(n)$ | 不稳定 |\n| 插入排序 | $\\mathcal{O}(n^2)$                   | $\\mathcal{O}(n)$ | $\\mathcal{O}(n^2)$ | 稳定 |\n| 希尔排序 | [见维基百科](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F) | [见维基百科](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F) | [见维基百科](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F) | 不稳定 |\n| 堆排序   | $\\mathcal{O}(n\\log n)$             | $\\mathcal{O}(n\\log n)$ | $\\mathcal{O}(n\\log n)$ | 不稳定 |\n| 冒泡排序 | $\\mathcal{O}(n^2)$                   | $\\mathcal{O}(n^2)$ | $\\mathcal{O}(n^2)$ | 稳定 |\n\n**注：《算法》的作者曾经说过，所有的不稳定算法都可以用额外空间变成稳定的，所以这里的整理只能用于 NOIP 初赛**\n\n### 空间复杂度\n\n冒泡排序,简单选择排序,堆排序,直接插入排序,希尔排序的空间复杂度为 $\\mathcal{O}(1)$，因为需要一个临时变量来交换元素位置,(另外遍历序列时自然少不了用一个变量来做索引)\n快速排序空间复杂度为 $\\mathcal{O}(\\log n)$ （因为递归调用了），归并排序空间复杂是 $\\mathcal{O}(n)$，需要一个大小为n的临时数组.\n基数排序的空间复杂是 $\\mathcal{O}(n)$，桶排序的空间复杂度不确定。\n\n---","slug":"NOIP-初赛-各类排序算法时间-空间复杂度整理","published":1,"updated":"2018-09-28T13:03:28.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbng000jrgc8ee0ea2xz","content":"<div class=\"note default\"><p>排序算法在初赛中似乎每次都会考到，而且考到的不外乎它们的时间复杂度和空间复杂度，所以此处进行一次整理。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>平均时间复杂度</th>\n<th>最好时间复杂度</th>\n<th>最坏时间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>桶排序</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">见维基百科</a></td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">见维基百科</a></td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">见维基百科</a></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：《算法》的作者曾经说过，所有的不稳定算法都可以用额外空间变成稳定的，所以这里的整理只能用于 NOIP 初赛</strong></p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>冒泡排序,简单选择排序,堆排序,直接插入排序,希尔排序的空间复杂度为 $\\mathcal{O}(1)$，因为需要一个临时变量来交换元素位置,(另外遍历序列时自然少不了用一个变量来做索引)<br>快速排序空间复杂度为 $\\mathcal{O}(\\log n)$ （因为递归调用了），归并排序空间复杂是 $\\mathcal{O}(n)$，需要一个大小为n的临时数组.<br>基数排序的空间复杂是 $\\mathcal{O}(n)$，桶排序的空间复杂度不确定。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>排序算法在初赛中似乎每次都会考到，而且考到的不外乎它们的时间复杂度和空间复杂度，所以此处进行一次整理。</p></div>","more":"<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>平均时间复杂度</th>\n<th>最好时间复杂度</th>\n<th>最坏时间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>桶排序</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">见维基百科</a></td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">见维基百科</a></td>\n<td><a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener\">见维基百科</a></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>$\\mathcal{O}(n\\log n)$</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>$\\mathcal{O}(n^2)$</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：《算法》的作者曾经说过，所有的不稳定算法都可以用额外空间变成稳定的，所以这里的整理只能用于 NOIP 初赛</strong></p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>冒泡排序,简单选择排序,堆排序,直接插入排序,希尔排序的空间复杂度为 $\\mathcal{O}(1)$，因为需要一个临时变量来交换元素位置,(另外遍历序列时自然少不了用一个变量来做索引)<br>快速排序空间复杂度为 $\\mathcal{O}(\\log n)$ （因为递归调用了），归并排序空间复杂是 $\\mathcal{O}(n)$，需要一个大小为n的临时数组.<br>基数排序的空间复杂是 $\\mathcal{O}(n)$，桶排序的空间复杂度不确定。</p>\n<hr>"},{"title":"[NOIP 初赛] 总结各种坑人基础知识","mathjax":true,"copyright":true,"comment":true,"date":"2018-09-16T12:14:37.000Z","_content":"\n{% note default %}\n\n初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。\n\n{% endnote %}\n\n<!-- more -->\n\n### 信仰坑\n\n{% note info %}\n\n**NOI（1984 至今）:** 已组织 33 次活动，各省选拔五名选手，至少一名为女选手。\n**NOIP（1995 至今）:** 已组织 22 次比赛，全国同一时间，不同地点。\n**IOI（1989 至今）:** 已组织 19 次比赛，IOI 2000 由中国主办，CCF 承办。\n**APIO（2007 创建）:** APIO 中国赛区由中国计算机学会组织。\n\n{% endnote %}\n\n{% note warning %}\n\n**NOIP 2022 年开始将停止支持 Pascal**\n\n{% endnote %}\n\n### 网络协议坑\n\n{% note info %}\n\n**ARP (Address Resolution Protocol) 地址解析协议**\n**DHCP (Dynamic Host Configuration Protocol) 动态主机配置协议**\n**FTP (File Transfer Protocol) 文件传输协议**\n**HTTP (Hypertext Transfer Protocol) 超文本传输协议**\n**HTTPS (Secure Hypertext Transfer Protocol) 安全超文本传输协议**\n**IMAP4 (Internet Mail Access Protocol Version 4) Internet 邮件访问协议——版本4**\n**IPv6 (Internet Protocol Version 6) Internet 协议——版本6**\n**POP3 (Post Office Protocol version 3) 邮局协议——版本3**\n**SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议**\n**TFTP (Trivial File Transfer Protocol) 小型文件传输协议**\n\n{% endnote %}\n\n{% note warning %}\n\n**WWW 是 URL，不是网络协议**\n\n{% endnote %}\n\n---","source":"_posts/NOIP-初赛-总结各种坑人基础知识.md","raw":"---\ntitle: '[NOIP 初赛] 总结各种坑人基础知识'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-09-16 20:14:37\ntags:\n\t- NOIP 初赛\ncategories: NOIP\n---\n\n{% note default %}\n\n初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。\n\n{% endnote %}\n\n<!-- more -->\n\n### 信仰坑\n\n{% note info %}\n\n**NOI（1984 至今）:** 已组织 33 次活动，各省选拔五名选手，至少一名为女选手。\n**NOIP（1995 至今）:** 已组织 22 次比赛，全国同一时间，不同地点。\n**IOI（1989 至今）:** 已组织 19 次比赛，IOI 2000 由中国主办，CCF 承办。\n**APIO（2007 创建）:** APIO 中国赛区由中国计算机学会组织。\n\n{% endnote %}\n\n{% note warning %}\n\n**NOIP 2022 年开始将停止支持 Pascal**\n\n{% endnote %}\n\n### 网络协议坑\n\n{% note info %}\n\n**ARP (Address Resolution Protocol) 地址解析协议**\n**DHCP (Dynamic Host Configuration Protocol) 动态主机配置协议**\n**FTP (File Transfer Protocol) 文件传输协议**\n**HTTP (Hypertext Transfer Protocol) 超文本传输协议**\n**HTTPS (Secure Hypertext Transfer Protocol) 安全超文本传输协议**\n**IMAP4 (Internet Mail Access Protocol Version 4) Internet 邮件访问协议——版本4**\n**IPv6 (Internet Protocol Version 6) Internet 协议——版本6**\n**POP3 (Post Office Protocol version 3) 邮局协议——版本3**\n**SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议**\n**TFTP (Trivial File Transfer Protocol) 小型文件传输协议**\n\n{% endnote %}\n\n{% note warning %}\n\n**WWW 是 URL，不是网络协议**\n\n{% endnote %}\n\n---","slug":"NOIP-初赛-总结各种坑人基础知识","published":1,"updated":"2018-09-25T09:46:47.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnh000krgc8krczbhou","content":"<div class=\"note default\"><p>初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"信仰坑\"><a href=\"#信仰坑\" class=\"headerlink\" title=\"信仰坑\"></a>信仰坑</h3><div class=\"note info\"><p><strong>NOI（1984 至今）:</strong> 已组织 33 次活动，各省选拔五名选手，至少一名为女选手。<br><strong>NOIP（1995 至今）:</strong> 已组织 22 次比赛，全国同一时间，不同地点。<br><strong>IOI（1989 至今）:</strong> 已组织 19 次比赛，IOI 2000 由中国主办，CCF 承办。<br><strong>APIO（2007 创建）:</strong> APIO 中国赛区由中国计算机学会组织。</p></div>\n<div class=\"note warning\"><p><strong>NOIP 2022 年开始将停止支持 Pascal</strong></p></div>\n<h3 id=\"网络协议坑\"><a href=\"#网络协议坑\" class=\"headerlink\" title=\"网络协议坑\"></a>网络协议坑</h3><div class=\"note info\"><p><strong>ARP (Address Resolution Protocol) 地址解析协议</strong><br><strong>DHCP (Dynamic Host Configuration Protocol) 动态主机配置协议</strong><br><strong>FTP (File Transfer Protocol) 文件传输协议</strong><br><strong>HTTP (Hypertext Transfer Protocol) 超文本传输协议</strong><br><strong>HTTPS (Secure Hypertext Transfer Protocol) 安全超文本传输协议</strong><br><strong>IMAP4 (Internet Mail Access Protocol Version 4) Internet 邮件访问协议——版本4</strong><br><strong>IPv6 (Internet Protocol Version 6) Internet 协议——版本6</strong><br><strong>POP3 (Post Office Protocol version 3) 邮局协议——版本3</strong><br><strong>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议</strong><br><strong>TFTP (Trivial File Transfer Protocol) 小型文件传输协议</strong></p></div>\n<div class=\"note warning\"><p><strong>WWW 是 URL，不是网络协议</strong></p></div>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。</p></div>","more":"<h3 id=\"信仰坑\"><a href=\"#信仰坑\" class=\"headerlink\" title=\"信仰坑\"></a>信仰坑</h3><div class=\"note info\"><p><strong>NOI（1984 至今）:</strong> 已组织 33 次活动，各省选拔五名选手，至少一名为女选手。<br><strong>NOIP（1995 至今）:</strong> 已组织 22 次比赛，全国同一时间，不同地点。<br><strong>IOI（1989 至今）:</strong> 已组织 19 次比赛，IOI 2000 由中国主办，CCF 承办。<br><strong>APIO（2007 创建）:</strong> APIO 中国赛区由中国计算机学会组织。</p></div>\n<div class=\"note warning\"><p><strong>NOIP 2022 年开始将停止支持 Pascal</strong></p></div>\n<h3 id=\"网络协议坑\"><a href=\"#网络协议坑\" class=\"headerlink\" title=\"网络协议坑\"></a>网络协议坑</h3><div class=\"note info\"><p><strong>ARP (Address Resolution Protocol) 地址解析协议</strong><br><strong>DHCP (Dynamic Host Configuration Protocol) 动态主机配置协议</strong><br><strong>FTP (File Transfer Protocol) 文件传输协议</strong><br><strong>HTTP (Hypertext Transfer Protocol) 超文本传输协议</strong><br><strong>HTTPS (Secure Hypertext Transfer Protocol) 安全超文本传输协议</strong><br><strong>IMAP4 (Internet Mail Access Protocol Version 4) Internet 邮件访问协议——版本4</strong><br><strong>IPv6 (Internet Protocol Version 6) Internet 协议——版本6</strong><br><strong>POP3 (Post Office Protocol version 3) 邮局协议——版本3</strong><br><strong>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议</strong><br><strong>TFTP (Trivial File Transfer Protocol) 小型文件传输协议</strong></p></div>\n<div class=\"note warning\"><p><strong>WWW 是 URL，不是网络协议</strong></p></div>\n<hr>"},{"title":"[NOIP 模拟] 记录一道坑题","mathjax":true,"copyright":true,"comment":true,"date":"2018-09-01T02:56:35.000Z","_content":"\n{% note default %}\n昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。\n{% endnote %}\n\n<!-- more -->\n\n### 题目描述\n\n**[问题描述]**\n\n    神即将带领一些人去他们的孤寂之境，由于这个世界的不稳定，地点之间的有向道路会不\n    定期地毁坏，出于工作准备，神想知道在某些道路毁坏之后某两点之间的最短路。\n    就是给定一个有向图，现有两个操作，操作1 是删除一条边（一条边可重复删除），操作2\n    是询问两个点之间的最短路。\n\n**[输入格式]**\n\n    输入文件名为journey.in。\n    第1 行两个正整数n, m，分别表示图的点数和操作数。\n    第2 行至第n + 1 行每行n 个正整数，为图的邻接矩阵，第i 行第j 列的数表示点i 和点\n    j 间距离，保证对角线为0。\n    接下来m 行每行三个正整数c, x, y； c 表示操作种类，为1 或2，当c = 1 时表示删除x\n    与y 相连的边，当 c = 2 时表示询问 x 到 y 的最短路，若不可达则输出 -1。\n\n**[输出格式]**\n\n    输出文件名为journey.out\n    输出若干行，每个 2 操作对应一行，答案为询问中 x 到 y 的最短路或 -1\n\n**[样例]**\n\n    见下发/girls/girls.in(out)。\n\n**[数据规模与约定]**\n\n    对于30% 的数据：n, m <= 10\n    对于50% 的数据：n, m <= 50\n    对于100% 的数据：n <= 200; m <= 100000, 操作1 不超过200 次，边权不超过10000\n\n### 题解\n\n一碰到查找的题，那肯定就是两条路了，离线和在线两种思路，乍一看这 $n$ 的数据范围，并且题目中还说输入邻接矩阵，那求最短路肯定是 Floyd 了，再一想，如果是在线查询那只有朴素算法了，查一次求一次全源最短路，然后这种方法就 `TLE` 了，代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 210\n#define INF 0x3f3f3f3f\ninline void read(int &x) {\n  x = 0;\n  bool sign = false;\n  char ch = 0;\n  while (!isdigit(ch)) {\n    sign |= (ch == '-');\n    ch = getchar();\n  }\n  while (isdigit(ch)) {\n    x = (x << 3) + (x << 1) + (ch ^ 48);\n    ch = getchar();\n  }\n  x = sign ? -x : x;\n}\ninline void write(int x) {\n  if (x < 0) { putchar('-'); x = -x; }\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + '0');\n}\ninline void writeln(int &x) { write(x); puts(\"\"); }\ninline void read(int &a, int &b) { read(a); read(b); }\ninline void read(int &a, int &b, int &c) { read(a); read(b); read(c); }\n\nint g[maxn][maxn], d[maxn][maxn], n, m, c, x, y;\n\nvoid Floyd() {\n  for (int k = 1; k <= n; ++k)\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= n; ++j)\n        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);\n}\n\nint main() {\n  freopen(\"journey.in\", \"r\", stdin);\n  freopen(\"journey.out\", \"w\", stdout);\n  memset(d, INF, sizeof(d));\n  read(n, m);\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n      read(g[i][j]);\n  while (m--) {\n    read(c, x, y);\n    switch (c) {\n      case 1: { g[x][y] = INF; break; }\n      case 2: {\n        memcpy(d, g, sizeof(g));\n        Floyd();\n        if (g[x][y] == INF) puts(\"-1\");\n        else writeln(g[x][y]);\n        memcpy(g, d, sizeof(d));\n        break;\n      }\n    }\n  }\n  return 0;\n}\n```\n所以正解肯定就是离线操作了，先把该删的边都给删掉，然后从最后一个操作开始处理，遇到操作一就加边，求一次最短路，当然这里不是用 Floyd 而是用一个 $\\mathcal{O}(n^2)$ 的方法，附上代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define INF 0x3f3f3f3f\n#define maxn 210\n#define maxm 100010\nstruct op { int c, x, y; };\n// op 结构体，记录操作\nop ops[maxm];\nint g[maxn][maxn], d[maxn][maxn];\nint w[maxm], ans[maxm];\nint n, m;\n\ninline void read(int &x) {\n  x = 0;\n  bool sign = false;\n  char ch = 0;\n  while (!isdigit(ch)) {\n    sign |= (ch == '-');\n    ch = getchar();\n  }\n  while (isdigit(ch)) {\n    x = (x << 3) + (x << 1) + (ch ^ 48);\n    ch = getchar();\n  }\n  x = sign ? -x : x;\n}\ninline void write(int x) {\n  if (x < 0) { putchar('-'); x = -x; }\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + '0');\n}\ninline void writeln(int x) { write(x); puts(\"\"); }\ninline void read(int &a, int &b) { read(a); read(b); }\ninline void read(int &a, int &b, int &c) { read(a); read(b); read(c); }\n// 快读快写黑科技\n\nvoid Floyd() {\n  for (int k = 1; k <= n; ++k)\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= n; ++j)\n        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n}\n// Floyd 对 d[][] 操作求最短路\n\nint main() {\n  freopen(\"journey.in\", \"r\", stdin);\n  freopen(\"journey.out\", \"w\", stdout);\n  read(n, m);\n\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n      read(g[i][j]);\n  memcpy(d, g, sizeof(g));\n  // 输入，g[][] 用来备份原邻接矩阵\n\n  for (int i = 1; i <= m; ++i) {\n    read(ops[i].c, ops[i].x, ops[i].y);\n    if (ops[i].c == 1) {\n      w[i] = g[ops[i].x][ops[i].y];\n      d[ops[i].x][ops[i].y] = INF;\n    }\n  }\n  Floyd();\n  // 读入所有操作后 Floyd\n\n  int cnt = 0;\n  for (int k = m; k > 0; --k) {\n  // 注意循环顺序，从最后一个开始\n    int x = ops[k].x;\n    int y = ops[k].y;\n    if (ops[k].c == 2) ans[++cnt] = (d[x][y] == INF ? -1 : d[x][y]);\n    // 题目中要求如果不连通输出 -1，所以这里特判一下\n    // 标程中似乎没有这一句，自己搞了一个数据把标程给卡掉了，所以还是要加的\n    else {\n      // 求一次最短路，只要把 d[x][y] 加进去再比较一下就可以了\n      for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n          int tmp = d[i][x] + d[y][j] + w[k];\n          if (tmp < d[i][j]) d[i][j] = tmp;\n        }\n      }\n    }\n  }\n\n  // 最后输出要注意顺序\n  for (int i = cnt; i > 0; --i) writeln(ans[i]);\n  return 0;\n}\n\n```\n### 总结\n\n以后看到这种题必须要读清楚题意，然后决定是否离线操作，考试的时候我根本就是智障了，直接在数组 $d$ 上面删边，求最短路，然后 GG。幸好最后醒悟过来打了个暴力。邻阶矩阵就是这点太坑。。。容易让人误操作。。。\n\n---","source":"_posts/NOIP-模拟-记录一道坑题.md","raw":"---\ntitle: '[NOIP 模拟] 记录一道坑题'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-09-01 10:56:35\ntags:\n  - NOIP 模拟\ncategories: NOIP\n---\n\n{% note default %}\n昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。\n{% endnote %}\n\n<!-- more -->\n\n### 题目描述\n\n**[问题描述]**\n\n    神即将带领一些人去他们的孤寂之境，由于这个世界的不稳定，地点之间的有向道路会不\n    定期地毁坏，出于工作准备，神想知道在某些道路毁坏之后某两点之间的最短路。\n    就是给定一个有向图，现有两个操作，操作1 是删除一条边（一条边可重复删除），操作2\n    是询问两个点之间的最短路。\n\n**[输入格式]**\n\n    输入文件名为journey.in。\n    第1 行两个正整数n, m，分别表示图的点数和操作数。\n    第2 行至第n + 1 行每行n 个正整数，为图的邻接矩阵，第i 行第j 列的数表示点i 和点\n    j 间距离，保证对角线为0。\n    接下来m 行每行三个正整数c, x, y； c 表示操作种类，为1 或2，当c = 1 时表示删除x\n    与y 相连的边，当 c = 2 时表示询问 x 到 y 的最短路，若不可达则输出 -1。\n\n**[输出格式]**\n\n    输出文件名为journey.out\n    输出若干行，每个 2 操作对应一行，答案为询问中 x 到 y 的最短路或 -1\n\n**[样例]**\n\n    见下发/girls/girls.in(out)。\n\n**[数据规模与约定]**\n\n    对于30% 的数据：n, m <= 10\n    对于50% 的数据：n, m <= 50\n    对于100% 的数据：n <= 200; m <= 100000, 操作1 不超过200 次，边权不超过10000\n\n### 题解\n\n一碰到查找的题，那肯定就是两条路了，离线和在线两种思路，乍一看这 $n$ 的数据范围，并且题目中还说输入邻接矩阵，那求最短路肯定是 Floyd 了，再一想，如果是在线查询那只有朴素算法了，查一次求一次全源最短路，然后这种方法就 `TLE` 了，代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 210\n#define INF 0x3f3f3f3f\ninline void read(int &x) {\n  x = 0;\n  bool sign = false;\n  char ch = 0;\n  while (!isdigit(ch)) {\n    sign |= (ch == '-');\n    ch = getchar();\n  }\n  while (isdigit(ch)) {\n    x = (x << 3) + (x << 1) + (ch ^ 48);\n    ch = getchar();\n  }\n  x = sign ? -x : x;\n}\ninline void write(int x) {\n  if (x < 0) { putchar('-'); x = -x; }\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + '0');\n}\ninline void writeln(int &x) { write(x); puts(\"\"); }\ninline void read(int &a, int &b) { read(a); read(b); }\ninline void read(int &a, int &b, int &c) { read(a); read(b); read(c); }\n\nint g[maxn][maxn], d[maxn][maxn], n, m, c, x, y;\n\nvoid Floyd() {\n  for (int k = 1; k <= n; ++k)\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= n; ++j)\n        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);\n}\n\nint main() {\n  freopen(\"journey.in\", \"r\", stdin);\n  freopen(\"journey.out\", \"w\", stdout);\n  memset(d, INF, sizeof(d));\n  read(n, m);\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n      read(g[i][j]);\n  while (m--) {\n    read(c, x, y);\n    switch (c) {\n      case 1: { g[x][y] = INF; break; }\n      case 2: {\n        memcpy(d, g, sizeof(g));\n        Floyd();\n        if (g[x][y] == INF) puts(\"-1\");\n        else writeln(g[x][y]);\n        memcpy(g, d, sizeof(d));\n        break;\n      }\n    }\n  }\n  return 0;\n}\n```\n所以正解肯定就是离线操作了，先把该删的边都给删掉，然后从最后一个操作开始处理，遇到操作一就加边，求一次最短路，当然这里不是用 Floyd 而是用一个 $\\mathcal{O}(n^2)$ 的方法，附上代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define INF 0x3f3f3f3f\n#define maxn 210\n#define maxm 100010\nstruct op { int c, x, y; };\n// op 结构体，记录操作\nop ops[maxm];\nint g[maxn][maxn], d[maxn][maxn];\nint w[maxm], ans[maxm];\nint n, m;\n\ninline void read(int &x) {\n  x = 0;\n  bool sign = false;\n  char ch = 0;\n  while (!isdigit(ch)) {\n    sign |= (ch == '-');\n    ch = getchar();\n  }\n  while (isdigit(ch)) {\n    x = (x << 3) + (x << 1) + (ch ^ 48);\n    ch = getchar();\n  }\n  x = sign ? -x : x;\n}\ninline void write(int x) {\n  if (x < 0) { putchar('-'); x = -x; }\n  if (x > 9) write(x / 10);\n  putchar(x % 10 + '0');\n}\ninline void writeln(int x) { write(x); puts(\"\"); }\ninline void read(int &a, int &b) { read(a); read(b); }\ninline void read(int &a, int &b, int &c) { read(a); read(b); read(c); }\n// 快读快写黑科技\n\nvoid Floyd() {\n  for (int k = 1; k <= n; ++k)\n    for (int i = 1; i <= n; ++i)\n      for (int j = 1; j <= n; ++j)\n        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n}\n// Floyd 对 d[][] 操作求最短路\n\nint main() {\n  freopen(\"journey.in\", \"r\", stdin);\n  freopen(\"journey.out\", \"w\", stdout);\n  read(n, m);\n\n  for (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n      read(g[i][j]);\n  memcpy(d, g, sizeof(g));\n  // 输入，g[][] 用来备份原邻接矩阵\n\n  for (int i = 1; i <= m; ++i) {\n    read(ops[i].c, ops[i].x, ops[i].y);\n    if (ops[i].c == 1) {\n      w[i] = g[ops[i].x][ops[i].y];\n      d[ops[i].x][ops[i].y] = INF;\n    }\n  }\n  Floyd();\n  // 读入所有操作后 Floyd\n\n  int cnt = 0;\n  for (int k = m; k > 0; --k) {\n  // 注意循环顺序，从最后一个开始\n    int x = ops[k].x;\n    int y = ops[k].y;\n    if (ops[k].c == 2) ans[++cnt] = (d[x][y] == INF ? -1 : d[x][y]);\n    // 题目中要求如果不连通输出 -1，所以这里特判一下\n    // 标程中似乎没有这一句，自己搞了一个数据把标程给卡掉了，所以还是要加的\n    else {\n      // 求一次最短路，只要把 d[x][y] 加进去再比较一下就可以了\n      for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n          int tmp = d[i][x] + d[y][j] + w[k];\n          if (tmp < d[i][j]) d[i][j] = tmp;\n        }\n      }\n    }\n  }\n\n  // 最后输出要注意顺序\n  for (int i = cnt; i > 0; --i) writeln(ans[i]);\n  return 0;\n}\n\n```\n### 总结\n\n以后看到这种题必须要读清楚题意，然后决定是否离线操作，考试的时候我根本就是智障了，直接在数组 $d$ 上面删边，求最短路，然后 GG。幸好最后醒悟过来打了个暴力。邻阶矩阵就是这点太坑。。。容易让人误操作。。。\n\n---","slug":"NOIP-模拟-记录一道坑题","published":1,"updated":"2018-09-16T04:14:28.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnk000orgc8twic2j38","content":"<div class=\"note default\"><p>昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p><strong>[问题描述]</strong></p>\n<pre><code>神即将带领一些人去他们的孤寂之境，由于这个世界的不稳定，地点之间的有向道路会不\n定期地毁坏，出于工作准备，神想知道在某些道路毁坏之后某两点之间的最短路。\n就是给定一个有向图，现有两个操作，操作1 是删除一条边（一条边可重复删除），操作2\n是询问两个点之间的最短路。\n</code></pre><p><strong>[输入格式]</strong></p>\n<pre><code>输入文件名为journey.in。\n第1 行两个正整数n, m，分别表示图的点数和操作数。\n第2 行至第n + 1 行每行n 个正整数，为图的邻接矩阵，第i 行第j 列的数表示点i 和点\nj 间距离，保证对角线为0。\n接下来m 行每行三个正整数c, x, y； c 表示操作种类，为1 或2，当c = 1 时表示删除x\n与y 相连的边，当 c = 2 时表示询问 x 到 y 的最短路，若不可达则输出 -1。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>输出文件名为journey.out\n输出若干行，每个 2 操作对应一行，答案为询问中 x 到 y 的最短路或 -1\n</code></pre><p><strong>[样例]</strong></p>\n<pre><code>见下发/girls/girls.in(out)。\n</code></pre><p><strong>[数据规模与约定]</strong></p>\n<pre><code>对于30% 的数据：n, m &lt;= 10\n对于50% 的数据：n, m &lt;= 50\n对于100% 的数据：n &lt;= 200; m &lt;= 100000, 操作1 不超过200 次，边权不超过10000\n</code></pre><h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>一碰到查找的题，那肯定就是两条路了，离线和在线两种思路，乍一看这 $n$ 的数据范围，并且题目中还说输入邻接矩阵，那求最短路肯定是 Floyd 了，再一想，如果是在线查询那只有朴素算法了，查一次求一次全源最短路，然后这种方法就 <code>TLE</code> 了，代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    sign |= (ch == <span class=\"string\">'-'</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) write(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123; write(x); <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b, <span class=\"keyword\">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> g[maxn][maxn], d[maxn][maxn], n, m, c, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Floyd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(d, INF, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">  read(n, m);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">      read(g[i][j]);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">    read(c, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123; g[x][y] = INF; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(d, g, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\">        Floyd();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g[x][y] == INF) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> writeln(g[x][y]);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(g, d, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以正解肯定就是离线操作了，先把该删的边都给删掉，然后从最后一个操作开始处理，遇到操作一就加边，求一次最短路，当然这里不是用 Floyd 而是用一个 $\\mathcal{O}(n^2)$ 的方法，附上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 100010</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">op</span> &#123;</span> <span class=\"keyword\">int</span> c, x, y; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// op 结构体，记录操作</span></span><br><span class=\"line\">op ops[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> g[maxn][maxn], d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> w[maxm], ans[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    sign |= (ch == <span class=\"string\">'-'</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) write(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; write(x); <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b, <span class=\"keyword\">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class=\"line\"><span class=\"comment\">// 快读快写黑科技</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Floyd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Floyd 对 d[][] 操作求最短路</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(n, m);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">      read(g[i][j]);</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(d, g, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\">  <span class=\"comment\">// 输入，g[][] 用来备份原邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">    read(ops[i].c, ops[i].x, ops[i].y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ops[i].c == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      w[i] = g[ops[i].x][ops[i].y];</span><br><span class=\"line\">      d[ops[i].x][ops[i].y] = INF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Floyd();</span><br><span class=\"line\">  <span class=\"comment\">// 读入所有操作后 Floyd</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = m; k &gt; <span class=\"number\">0</span>; --k) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注意循环顺序，从最后一个开始</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = ops[k].x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = ops[k].y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ops[k].c == <span class=\"number\">2</span>) ans[++cnt] = (d[x][y] == INF ? <span class=\"number\">-1</span> : d[x][y]);</span><br><span class=\"line\">    <span class=\"comment\">// 题目中要求如果不连通输出 -1，所以这里特判一下</span></span><br><span class=\"line\">    <span class=\"comment\">// 标程中似乎没有这一句，自己搞了一个数据把标程给卡掉了，所以还是要加的</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 求一次最短路，只要把 d[x][y] 加进去再比较一下就可以了</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> tmp = d[i][x] + d[y][j] + w[k];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tmp &lt; d[i][j]) d[i][j] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最后输出要注意顺序</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cnt; i &gt; <span class=\"number\">0</span>; --i) writeln(ans[i]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以后看到这种题必须要读清楚题意，然后决定是否离线操作，考试的时候我根本就是智障了，直接在数组 $d$ 上面删边，求最短路，然后 GG。幸好最后醒悟过来打了个暴力。邻阶矩阵就是这点太坑。。。容易让人误操作。。。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。</p></div>","more":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p><strong>[问题描述]</strong></p>\n<pre><code>神即将带领一些人去他们的孤寂之境，由于这个世界的不稳定，地点之间的有向道路会不\n定期地毁坏，出于工作准备，神想知道在某些道路毁坏之后某两点之间的最短路。\n就是给定一个有向图，现有两个操作，操作1 是删除一条边（一条边可重复删除），操作2\n是询问两个点之间的最短路。\n</code></pre><p><strong>[输入格式]</strong></p>\n<pre><code>输入文件名为journey.in。\n第1 行两个正整数n, m，分别表示图的点数和操作数。\n第2 行至第n + 1 行每行n 个正整数，为图的邻接矩阵，第i 行第j 列的数表示点i 和点\nj 间距离，保证对角线为0。\n接下来m 行每行三个正整数c, x, y； c 表示操作种类，为1 或2，当c = 1 时表示删除x\n与y 相连的边，当 c = 2 时表示询问 x 到 y 的最短路，若不可达则输出 -1。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>输出文件名为journey.out\n输出若干行，每个 2 操作对应一行，答案为询问中 x 到 y 的最短路或 -1\n</code></pre><p><strong>[样例]</strong></p>\n<pre><code>见下发/girls/girls.in(out)。\n</code></pre><p><strong>[数据规模与约定]</strong></p>\n<pre><code>对于30% 的数据：n, m &lt;= 10\n对于50% 的数据：n, m &lt;= 50\n对于100% 的数据：n &lt;= 200; m &lt;= 100000, 操作1 不超过200 次，边权不超过10000\n</code></pre><h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>一碰到查找的题，那肯定就是两条路了，离线和在线两种思路，乍一看这 $n$ 的数据范围，并且题目中还说输入邻接矩阵，那求最短路肯定是 Floyd 了，再一想，如果是在线查询那只有朴素算法了，查一次求一次全源最短路，然后这种方法就 <code>TLE</code> 了，代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    sign |= (ch == <span class=\"string\">'-'</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) write(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123; write(x); <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b, <span class=\"keyword\">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> g[maxn][maxn], d[maxn][maxn], n, m, c, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Floyd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(d, INF, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">  read(n, m);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">      read(g[i][j]);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (m--) &#123;</span><br><span class=\"line\">    read(c, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123; g[x][y] = INF; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(d, g, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\">        Floyd();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g[x][y] == INF) <span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> writeln(g[x][y]);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(g, d, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以正解肯定就是离线操作了，先把该删的边都给删掉，然后从最后一个操作开始处理，遇到操作一就加边，求一次最短路，当然这里不是用 Floyd 而是用一个 $\\mathcal{O}(n^2)$ 的方法，附上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 100010</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">op</span> &#123;</span> <span class=\"keyword\">int</span> c, x, y; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// op 结构体，记录操作</span></span><br><span class=\"line\">op ops[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> g[maxn][maxn], d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> w[maxm], ans[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    sign |= (ch == <span class=\"string\">'-'</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">    x = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">    ch = getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>) write(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; write(x); <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b, <span class=\"keyword\">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class=\"line\"><span class=\"comment\">// 快读快写黑科技</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Floyd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Floyd 对 d[][] 操作求最短路</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"journey.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(n, m);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">      read(g[i][j]);</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(d, g, <span class=\"keyword\">sizeof</span>(g));</span><br><span class=\"line\">  <span class=\"comment\">// 输入，g[][] 用来备份原邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">    read(ops[i].c, ops[i].x, ops[i].y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ops[i].c == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      w[i] = g[ops[i].x][ops[i].y];</span><br><span class=\"line\">      d[ops[i].x][ops[i].y] = INF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Floyd();</span><br><span class=\"line\">  <span class=\"comment\">// 读入所有操作后 Floyd</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = m; k &gt; <span class=\"number\">0</span>; --k) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注意循环顺序，从最后一个开始</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = ops[k].x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = ops[k].y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ops[k].c == <span class=\"number\">2</span>) ans[++cnt] = (d[x][y] == INF ? <span class=\"number\">-1</span> : d[x][y]);</span><br><span class=\"line\">    <span class=\"comment\">// 题目中要求如果不连通输出 -1，所以这里特判一下</span></span><br><span class=\"line\">    <span class=\"comment\">// 标程中似乎没有这一句，自己搞了一个数据把标程给卡掉了，所以还是要加的</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 求一次最短路，只要把 d[x][y] 加进去再比较一下就可以了</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> tmp = d[i][x] + d[y][j] + w[k];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tmp &lt; d[i][j]) d[i][j] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最后输出要注意顺序</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cnt; i &gt; <span class=\"number\">0</span>; --i) writeln(ans[i]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以后看到这种题必须要读清楚题意，然后决定是否离线操作，考试的时候我根本就是智障了，直接在数组 $d$ 上面删边，求最短路，然后 GG。幸好最后醒悟过来打了个暴力。邻阶矩阵就是这点太坑。。。容易让人误操作。。。</p>\n<hr>"},{"title":"[图论] Dijkstra 最短路计数","date":"2018-08-29T09:58:02.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。\n\n<!--more-->\n\n### 最短路计数\n\n[题目：洛谷 P1144 最短路计数](https://www.luogu.org/problemnew/show/P1144)\n最短路计数本质上还是求最短路，只不过在迭代的同时来更新最短路数量。首先来回忆一下 Dijkstra 求最短路的更新条件，对于一条有向边 $(u,v,w)$，我们更新到 $v$ 的最短路的条件是：\n$$\ndist[v] > dist[u] + w\n$$\n在最短路计数的时候我们可以用动态规划的思想，记 $num[x]$ 表示到 $x$ 的最短路的数量，那么：\n\n1. 若 $dist[v] = dist[u] + w$ 我们更新 $num[v] = num[v] + num[u]$，即有另外一条路径。\n2. 若 $dist[v] > dist[u] + w$ 我们更新 $num[v] = num[u]$，即有更短的路径，前面的全部作废。\n\n所以这道题的代码就呼之欲出了：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxm 2000010\n#define maxn 1000010\n#define modn 100003\n#define INF 0x7f7f7f7f\nstruct heapNode {\n\tint u, d;\n\tbool operator<(const heapNode &b) const { return d > b.d; }\n\t// 这里似乎是一定要加 const，否则会 CE\n};\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n\tint weight;\n} edges[maxm << 1];\nint numEdges = 0, heads[maxn];\npriority_queue<heapNode> Q;\nint dist[maxn], num[maxn];\nint n, m, x, y;\n\nvoid init() {\n\tnumEdges = 0;\n\tmemset(heads, -1, sizeof(heads));\n\tmemset(dist, INF, sizeof(dist));\n\tmemset(num, 0, sizeof(num));\n\twhile (!Q.empty()) Q.pop();\n}\n\nvoid addEdge(int vertex1, int vertex2, int weight) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = weight;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\n\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n}\n\nvoid Dijkstra(int x) {\n\tdist[x] = 0;\n\tnum[x] = 1;\n\tQ.push((heapNode){ x, 0 });\n\twhile (!Q.empty()) {\n\t\theapNode f = Q.top();\n\t\tQ.pop();\n\t\tint u = f.u;\n\t\tint d = f.d;\n\t\tif (d != dist[u]) continue;\n\t\tfor (int i = heads[u]; i != -1; i = edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] == dist[u] + w) {\n\t\t\t\tnum[j] += num[u]; // 更新情况一\n\t\t\t\tnum[j] %= modn; // 题目要求取模\n\t\t\t} else if (dist[j] > dist[u] + w) {\n\t\t\t\tnum[j] = num[u]; // 更新情况二\n\t\t\t\tdist[j] = dist[u] + w;\n\t\t\t\tQ.push((heapNode){ j, dist[j] });\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin >> n >> m;\n\tinit();\n\tfor (int i = 1; i <= m; ++i) {\n\t\tcin >> x >> y;\n\t\tif (x == y) continue;\n\t\taddDuplexEdge(x, y, 1);\n\t}\n\tDijkstra(1);\n\tfor (int i = 1; i <= n; ++i) { cout << num[i] << endl; }\n\treturn 0;\n}\n```\n\n### 总结\n\n由这个最短路计数我们可以看出动态规划实在是实用啊！\n\n---","source":"_posts/图论-Dijkstra-最短路计数.md","raw":"---\ntitle: '[图论] Dijkstra 最短路计数'\ndate: 2018-08-29 17:58:02\ntags:\n\t- 图论\n\t- 最短路\n\t- 最短路计数\n\t- Dijkstra\ncategories: 图论\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。\n\n<!--more-->\n\n### 最短路计数\n\n[题目：洛谷 P1144 最短路计数](https://www.luogu.org/problemnew/show/P1144)\n最短路计数本质上还是求最短路，只不过在迭代的同时来更新最短路数量。首先来回忆一下 Dijkstra 求最短路的更新条件，对于一条有向边 $(u,v,w)$，我们更新到 $v$ 的最短路的条件是：\n$$\ndist[v] > dist[u] + w\n$$\n在最短路计数的时候我们可以用动态规划的思想，记 $num[x]$ 表示到 $x$ 的最短路的数量，那么：\n\n1. 若 $dist[v] = dist[u] + w$ 我们更新 $num[v] = num[v] + num[u]$，即有另外一条路径。\n2. 若 $dist[v] > dist[u] + w$ 我们更新 $num[v] = num[u]$，即有更短的路径，前面的全部作废。\n\n所以这道题的代码就呼之欲出了：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxm 2000010\n#define maxn 1000010\n#define modn 100003\n#define INF 0x7f7f7f7f\nstruct heapNode {\n\tint u, d;\n\tbool operator<(const heapNode &b) const { return d > b.d; }\n\t// 这里似乎是一定要加 const，否则会 CE\n};\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n\tint weight;\n} edges[maxm << 1];\nint numEdges = 0, heads[maxn];\npriority_queue<heapNode> Q;\nint dist[maxn], num[maxn];\nint n, m, x, y;\n\nvoid init() {\n\tnumEdges = 0;\n\tmemset(heads, -1, sizeof(heads));\n\tmemset(dist, INF, sizeof(dist));\n\tmemset(num, 0, sizeof(num));\n\twhile (!Q.empty()) Q.pop();\n}\n\nvoid addEdge(int vertex1, int vertex2, int weight) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = weight;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\n\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n}\n\nvoid Dijkstra(int x) {\n\tdist[x] = 0;\n\tnum[x] = 1;\n\tQ.push((heapNode){ x, 0 });\n\twhile (!Q.empty()) {\n\t\theapNode f = Q.top();\n\t\tQ.pop();\n\t\tint u = f.u;\n\t\tint d = f.d;\n\t\tif (d != dist[u]) continue;\n\t\tfor (int i = heads[u]; i != -1; i = edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] == dist[u] + w) {\n\t\t\t\tnum[j] += num[u]; // 更新情况一\n\t\t\t\tnum[j] %= modn; // 题目要求取模\n\t\t\t} else if (dist[j] > dist[u] + w) {\n\t\t\t\tnum[j] = num[u]; // 更新情况二\n\t\t\t\tdist[j] = dist[u] + w;\n\t\t\t\tQ.push((heapNode){ j, dist[j] });\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin >> n >> m;\n\tinit();\n\tfor (int i = 1; i <= m; ++i) {\n\t\tcin >> x >> y;\n\t\tif (x == y) continue;\n\t\taddDuplexEdge(x, y, 1);\n\t}\n\tDijkstra(1);\n\tfor (int i = 1; i <= n; ++i) { cout << num[i] << endl; }\n\treturn 0;\n}\n```\n\n### 总结\n\n由这个最短路计数我们可以看出动态规划实在是实用啊！\n\n---","slug":"图论-Dijkstra-最短路计数","published":1,"updated":"2018-09-16T04:14:28.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnm000qrgc8ijn6k9g4","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。</p>\n<a id=\"more\"></a>\n<h3 id=\"最短路计数\"><a href=\"#最短路计数\" class=\"headerlink\" title=\"最短路计数\"></a>最短路计数</h3><p><a href=\"https://www.luogu.org/problemnew/show/P1144\" target=\"_blank\" rel=\"noopener\">题目：洛谷 P1144 最短路计数</a><br>最短路计数本质上还是求最短路，只不过在迭代的同时来更新最短路数量。首先来回忆一下 Dijkstra 求最短路的更新条件，对于一条有向边 $(u,v,w)$，我们更新到 $v$ 的最短路的条件是：<br>$$<br>dist[v] &gt; dist[u] + w<br>$$<br>在最短路计数的时候我们可以用动态规划的思想，记 $num[x]$ 表示到 $x$ 的最短路的数量，那么：</p>\n<ol>\n<li>若 $dist[v] = dist[u] + w$ 我们更新 $num[v] = num[v] + num[u]$，即有另外一条路径。</li>\n<li>若 $dist[v] &gt; dist[u] + w$ 我们更新 $num[v] = num[u]$，即有更短的路径，前面的全部作废。</li>\n</ol>\n<p>所以这道题的代码就呼之欲出了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 2000010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> modn 100003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x7f7f7f7f</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u, d;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> heapNode &amp;b) <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> d &gt; b.d; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里似乎是一定要加 const，否则会 CE</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">&#125; edges[maxm &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>, heads[maxn];</span><br><span class=\"line\">priority_queue&lt;heapNode&gt; Q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn], num[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(heads, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(heads));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dist, INF, <span class=\"keyword\">sizeof</span>(dist));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(num, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(num));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = weight;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tnum[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tQ.push((heapNode)&#123; x, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\theapNode f = Q.top();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u = f.u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> d = f.d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d != dist[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[u]; i != <span class=\"number\">-1</span>; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] == dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tnum[j] += num[u]; <span class=\"comment\">// 更新情况一</span></span><br><span class=\"line\">\t\t\t\tnum[j] %= modn; <span class=\"comment\">// 题目要求取模</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tnum[j] = num[u]; <span class=\"comment\">// 更新情况二</span></span><br><span class=\"line\">\t\t\t\tdist[j] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\tQ.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\taddDuplexEdge(x, y, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123; <span class=\"built_in\">cout</span> &lt;&lt; num[i] &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由这个最短路计数我们可以看出动态规划实在是实用啊！</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。</p>","more":"<h3 id=\"最短路计数\"><a href=\"#最短路计数\" class=\"headerlink\" title=\"最短路计数\"></a>最短路计数</h3><p><a href=\"https://www.luogu.org/problemnew/show/P1144\" target=\"_blank\" rel=\"noopener\">题目：洛谷 P1144 最短路计数</a><br>最短路计数本质上还是求最短路，只不过在迭代的同时来更新最短路数量。首先来回忆一下 Dijkstra 求最短路的更新条件，对于一条有向边 $(u,v,w)$，我们更新到 $v$ 的最短路的条件是：<br>$$<br>dist[v] &gt; dist[u] + w<br>$$<br>在最短路计数的时候我们可以用动态规划的思想，记 $num[x]$ 表示到 $x$ 的最短路的数量，那么：</p>\n<ol>\n<li>若 $dist[v] = dist[u] + w$ 我们更新 $num[v] = num[v] + num[u]$，即有另外一条路径。</li>\n<li>若 $dist[v] &gt; dist[u] + w$ 我们更新 $num[v] = num[u]$，即有更短的路径，前面的全部作废。</li>\n</ol>\n<p>所以这道题的代码就呼之欲出了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 2000010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> modn 100003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x7f7f7f7f</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u, d;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> heapNode &amp;b) <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> d &gt; b.d; &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里似乎是一定要加 const，否则会 CE</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">&#125; edges[maxm &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>, heads[maxn];</span><br><span class=\"line\">priority_queue&lt;heapNode&gt; Q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn], num[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(heads, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(heads));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dist, INF, <span class=\"keyword\">sizeof</span>(dist));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(num, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(num));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = weight;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tnum[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tQ.push((heapNode)&#123; x, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\theapNode f = Q.top();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u = f.u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> d = f.d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d != dist[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[u]; i != <span class=\"number\">-1</span>; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] == dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tnum[j] += num[u]; <span class=\"comment\">// 更新情况一</span></span><br><span class=\"line\">\t\t\t\tnum[j] %= modn; <span class=\"comment\">// 题目要求取模</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tnum[j] = num[u]; <span class=\"comment\">// 更新情况二</span></span><br><span class=\"line\">\t\t\t\tdist[j] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\tQ.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\taddDuplexEdge(x, y, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDijkstra(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123; <span class=\"built_in\">cout</span> &lt;&lt; num[i] &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由这个最短路计数我们可以看出动态规划实在是实用啊！</p>\n<hr>"},{"title":"[平衡树] Treap 总结","date":"2018-08-25T00:21:53.000Z","copyright":true,"_content":"\n### 写在前面\n\n为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才~~把板子背下来~~把它真正理解了，不禁感叹数据结构真的是神奇啊！\n\n<!-- more -->\n\n### BST 二叉查找树的性质\n\n因为想重点总结的是 Treap 而不是[普通 BST](https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9)，所以这里只稍微提一下它的性质：\n\n1. 若任意节点的左子树不空，则左子树上**所有节点**的值均**小于**它的根节点的值；\n2. 若任意节点的右子树不空，则右子树上**所有节点**的值均**大于**它的根节点的值；\n3. 任意节点的左、右子树也分别为二叉查找树；\n4. **没有键值相等的节点。**\n\nBST 是 Treap 学习的基础，更多内容可以看[这篇博客](https://lufficc.com/blog/binary-search-tree)。\n上面这些性质，可以使得在 BST 上查找前驱 / 后继更为方便。这些性质是构建 BST 的基础，但是也使得 BST 不能很好地保持树的平衡，即左右子树的大小相差太大，最极端的情况就是一条链，为了保持 BST 的平衡，诞生了各种平衡树。\n\n### Treap\n\n#### Zig 和 Zag\n\n保持 Treap 平衡的方式就是改变 Treap 的形态，同时又必须保证 Treap 仍然具备 BST 的性质，于是 Zig 和 Zag 操作就诞生了\n\n<div style=\"align: center\"> <img src=\"zigzag.png\"/> </div>\n\n可见这并不是简单的旋转，它还将某个节点向根节点移动，这个过程只可意会不可言传，还是好好理解上图。旋转的代码实现如下：\n```cpp\nvoid zig(int &p) {\n\tint q = treap[p].lChild;\n\ttreap[p].lChild = treap[q].rChild;\n\ttreap[q].rChild = p;\n\tp = q;\n}\n\nvoid zag(int &p) {\n\tint q = treap[p].rChild;\n\ttreap[p].rChild = treap[q].lChild;\n\ttreap[q].lChild = p;\n\tp = q;\n}\n```\n\n#### 保证 Treap 的平衡\n\n什么样的旋转才能保证它的平衡呢？Treap 是 Tree 和 Heap 的复合名词，所以它还满足堆性质。它利用“随机”来创造平衡的条件，每一个节点都有一个随机生成的额外权值，Treap 在满足 BST 性质的同时还通过旋转使得权值满足大根堆的性质。特别的，在删除 Treap 的节点时，可以直接把这个节点旋转到叶节点来直接删除，这样就免去了很多复杂的操作。\n\n#### 从一道例题看代码实现\n\n题目在这：[洛谷 P3369 【模板】普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n\n因为题目中同一个节点可能有多个，所以可以为每个节点增加一个“副本数”，同时在获取 Rank 的时候别忘了减一，因为初始化的时候有一个正无穷，一个负无穷，它们只是为了保证 BST 性质，并不是实际的节点。\n\n代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 100010\n#define INF 0x7fffffff\n\nstruct treapNode {\n\tint lChild, rChild; // 左右子节点下标\n\tint value, weight;  // 节点关键码及权值\n\tint count, size;    // 副本数及子树大小\n} treap[maxn];\n\nint numNodes, root, n;\n\nint newNode(int val) {\n\tnumNodes++;\n\ttreap[numNodes].value = val;\n\ttreap[numNodes].weight = rand(); // 随机权值\n\ttreap[numNodes].count = treap[numNodes].size = 1;\n\treturn numNodes;\n} // 建立一个新的节点\n\nvoid update(int p) {\n\ttreap[p].size = treap[treap[p].lChild].size +\n\t\ttreap[treap[p].rChild].size +\n\t\ttreap[p].count;\n} // 更新某一个点的 size 方便获取排名\n\nvoid build() {\n\tnewNode(-INF); // 保证 BST 性质的两个点\n\tnewNode(INF);\n\troot = 1;\n\ttreap[root].rChild = 2;\n\tupdate(root);\n} // 初始化\n\nint getRankByVal(int p, int val) {\n\tif (p == 0) return 0;\n\tif (val == treap[p].value)\n\t\treturn treap[treap[p].lChild].size + 1;\n\tif (val < treap[p].value)\n\t\treturn getRankByVal(treap[p].lChild, val);\n\treturn getRankByVal(treap[p].rChild, val) +\n\t\ttreap[treap[p].lChild].size +\n\t\ttreap[p].count;\n}\n// 上下两个函数很好理解，不作赘述\n// 一切从 BST 性质出发\nint getValByRank(int p, int rnk) {\n\tif (p == 0) return INF;\n\tif (treap[treap[p].lChild].size >= rnk)\n\t\treturn getValByRank(treap[p].lChild, rnk);\n\tif (treap[treap[p].lChild].size + treap[p].count >= rnk)\n\t\treturn treap[p].value;\n\treturn getValByRank(treap[p].rChild,\n\t\trnk - treap[treap[p].lChild].size - treap[p].count);\n}\n\nvoid zig(int &p) {\n\tint q = treap[p].lChild;\n\ttreap[p].lChild = treap[q].rChild;\n\ttreap[q].rChild = p;\n\tp = q;\n\tupdate(treap[p].rChild);\n\tupdate(p); // 别忘记更新\n}\n\nvoid zag(int &p) {\n\tint q = treap[p].rChild;\n\ttreap[p].rChild = treap[q].lChild;\n\ttreap[q].lChild = p;\n\tp = q;\n\tupdate(treap[p].lChild);\n\tupdate(p);\n}\n\nvoid insert(int &p, int val) {\n\tif (p == 0) {\n\t\tp = newNode(val);\n\t\treturn;\n\t}\n\tif (val == treap[p].value) {\n\t\ttreap[p].count++;\n\t\tupdate(p);\n\t\treturn;\n\t}\n\tif (val < treap[p].value) {\n\t\tinsert(treap[p].lChild, val);\n\t\tif (treap[p].weight < treap[treap[p].lChild].weight) zig(p);\n\t} else {\n\t\tinsert(treap[p].rChild, val);\n\t\tif (treap[p].weight < treap[treap[p].rChild].weight) zag(p);\n\t} // zig 和 zag 操作，保证满足大根堆性质\n\tupdate(p);\n} // 插入一个点\n\nint getPre(int val) {\n\tint ans = 1;\n\tint p = root;\n\twhile (p != 0) {\n\t\tif (val == treap[p].value) {\n\t\t\tif (treap[p].lChild > 0) {\n\t\t\t\tp = treap[p].lChild; // 左子树上不断向右走，获取最大的前驱\n\t\t\t\twhile (treap[p].rChild > 0) p = treap[p].rChild;\n\t\t\t\tans = p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (treap[p].value < val &&\n\t\t\ttreap[p].value > treap[ans].value) ans = p; // 尝试更新答案\n\t\tp = val < treap[p].value ? treap[p].lChild : treap[p].rChild;\n\t}\n\treturn treap[ans].value;\n} // 获取前驱\n\nint getNext(int val) {\n\tint ans = 2;\n\tint p = root;\n\twhile (p != 0) {\n\t\tif (val == treap[p].value) {\n\t\t\tif (treap[p].rChild > 0) {\n\t\t\t\tp = treap[p].rChild; // 右子树上不断向左走，获取最小的后继\n\t\t\t\twhile (treap[p].lChild > 0) p = treap[p].lChild;\n\t\t\t\tans = p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (treap[p].value > val &&\n\t\t\ttreap[p].value < treap[ans].value) ans = p; // 尝试更新答案\n\t\tp = val < treap[p].value ? treap[p].lChild : treap[p].rChild;\n\t}\n\treturn treap[ans].value;\n}\n\nvoid remove(int &p, int val) {\n\tif (p == 0) return;\n\tif (val == treap[p].value) {\n\t\tif (treap[p].count > 1) {\n\t\t\ttreap[p].count--;\n\t\t\tupdate(p);\n\t\t} else if (treap[p].lChild != 0 || treap[p].rChild != 0) {\n\t\t\tif (treap[p].rChild == 0 ||\n\t\t\t\ttreap[treap[p].lChild].weight > treap[treap[p].rChild].weight) {\n\t\t\t\tzig(p);\n\t\t\t\tremove(treap[p].rChild, val);\n\t\t\t} else {\n\t\t\t\tzag(p);\n\t\t\t\tremove(treap[p].lChild, val);\n\t\t\t} // 通过旋转来删除节点\n\t\t\tupdate(p);\n\t\t} else p = 0;\n\t\treturn;\n\t}\n\tif (val < treap[p].value) remove(treap[p].lChild, val);\n\telse remove(treap[p].rChild, val);\n\tupdate(p);\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tnumNodes = 0;\n\tbuild();\n\tcin >> n;\n\tint opt, x;\n\twhile (n--) {\n\t\tcin >> opt >> x;\n\t\tswitch (opt) {\n\t\t\tcase 1: { insert(root, x); break; }\n\t\t\tcase 2: { remove(root, x); break; }\n\t\t\tcase 3: { cout << getRankByVal(root, x) - 1 << endl; break; } // 减一\n\t\t\tcase 4: { cout << getValByRank(root, x + 1) << endl; break; } // 加一\n\t\t\tcase 5: { cout << getPre(x) << endl; break; }\n\t\t\tcase 6: { cout << getNext(x) << endl; break; }\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### 总结\n\n班里的某个大佬和我说 Treap 没有 ZigZag，这让我很懵逼。但是 Zig 和 Zag 操作的确是很重要的，似乎在学 Splay 的时候也会用到，多学无害。Treap 还是很有用的，~~关键时候可以救命~~。 \n\n---","source":"_posts/平衡树-Treap-总结.md","raw":"---\ntitle: '[平衡树] Treap 总结'\ndate: 2018-08-25 08:21:53\ntags:\n\t- 树形结构\n\t- Treap\n\t- 平衡树\ncategories: 平衡树\ncopyright: true\n---\n\n### 写在前面\n\n为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才~~把板子背下来~~把它真正理解了，不禁感叹数据结构真的是神奇啊！\n\n<!-- more -->\n\n### BST 二叉查找树的性质\n\n因为想重点总结的是 Treap 而不是[普通 BST](https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9)，所以这里只稍微提一下它的性质：\n\n1. 若任意节点的左子树不空，则左子树上**所有节点**的值均**小于**它的根节点的值；\n2. 若任意节点的右子树不空，则右子树上**所有节点**的值均**大于**它的根节点的值；\n3. 任意节点的左、右子树也分别为二叉查找树；\n4. **没有键值相等的节点。**\n\nBST 是 Treap 学习的基础，更多内容可以看[这篇博客](https://lufficc.com/blog/binary-search-tree)。\n上面这些性质，可以使得在 BST 上查找前驱 / 后继更为方便。这些性质是构建 BST 的基础，但是也使得 BST 不能很好地保持树的平衡，即左右子树的大小相差太大，最极端的情况就是一条链，为了保持 BST 的平衡，诞生了各种平衡树。\n\n### Treap\n\n#### Zig 和 Zag\n\n保持 Treap 平衡的方式就是改变 Treap 的形态，同时又必须保证 Treap 仍然具备 BST 的性质，于是 Zig 和 Zag 操作就诞生了\n\n<div style=\"align: center\"> <img src=\"zigzag.png\"/> </div>\n\n可见这并不是简单的旋转，它还将某个节点向根节点移动，这个过程只可意会不可言传，还是好好理解上图。旋转的代码实现如下：\n```cpp\nvoid zig(int &p) {\n\tint q = treap[p].lChild;\n\ttreap[p].lChild = treap[q].rChild;\n\ttreap[q].rChild = p;\n\tp = q;\n}\n\nvoid zag(int &p) {\n\tint q = treap[p].rChild;\n\ttreap[p].rChild = treap[q].lChild;\n\ttreap[q].lChild = p;\n\tp = q;\n}\n```\n\n#### 保证 Treap 的平衡\n\n什么样的旋转才能保证它的平衡呢？Treap 是 Tree 和 Heap 的复合名词，所以它还满足堆性质。它利用“随机”来创造平衡的条件，每一个节点都有一个随机生成的额外权值，Treap 在满足 BST 性质的同时还通过旋转使得权值满足大根堆的性质。特别的，在删除 Treap 的节点时，可以直接把这个节点旋转到叶节点来直接删除，这样就免去了很多复杂的操作。\n\n#### 从一道例题看代码实现\n\n题目在这：[洛谷 P3369 【模板】普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n\n因为题目中同一个节点可能有多个，所以可以为每个节点增加一个“副本数”，同时在获取 Rank 的时候别忘了减一，因为初始化的时候有一个正无穷，一个负无穷，它们只是为了保证 BST 性质，并不是实际的节点。\n\n代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 100010\n#define INF 0x7fffffff\n\nstruct treapNode {\n\tint lChild, rChild; // 左右子节点下标\n\tint value, weight;  // 节点关键码及权值\n\tint count, size;    // 副本数及子树大小\n} treap[maxn];\n\nint numNodes, root, n;\n\nint newNode(int val) {\n\tnumNodes++;\n\ttreap[numNodes].value = val;\n\ttreap[numNodes].weight = rand(); // 随机权值\n\ttreap[numNodes].count = treap[numNodes].size = 1;\n\treturn numNodes;\n} // 建立一个新的节点\n\nvoid update(int p) {\n\ttreap[p].size = treap[treap[p].lChild].size +\n\t\ttreap[treap[p].rChild].size +\n\t\ttreap[p].count;\n} // 更新某一个点的 size 方便获取排名\n\nvoid build() {\n\tnewNode(-INF); // 保证 BST 性质的两个点\n\tnewNode(INF);\n\troot = 1;\n\ttreap[root].rChild = 2;\n\tupdate(root);\n} // 初始化\n\nint getRankByVal(int p, int val) {\n\tif (p == 0) return 0;\n\tif (val == treap[p].value)\n\t\treturn treap[treap[p].lChild].size + 1;\n\tif (val < treap[p].value)\n\t\treturn getRankByVal(treap[p].lChild, val);\n\treturn getRankByVal(treap[p].rChild, val) +\n\t\ttreap[treap[p].lChild].size +\n\t\ttreap[p].count;\n}\n// 上下两个函数很好理解，不作赘述\n// 一切从 BST 性质出发\nint getValByRank(int p, int rnk) {\n\tif (p == 0) return INF;\n\tif (treap[treap[p].lChild].size >= rnk)\n\t\treturn getValByRank(treap[p].lChild, rnk);\n\tif (treap[treap[p].lChild].size + treap[p].count >= rnk)\n\t\treturn treap[p].value;\n\treturn getValByRank(treap[p].rChild,\n\t\trnk - treap[treap[p].lChild].size - treap[p].count);\n}\n\nvoid zig(int &p) {\n\tint q = treap[p].lChild;\n\ttreap[p].lChild = treap[q].rChild;\n\ttreap[q].rChild = p;\n\tp = q;\n\tupdate(treap[p].rChild);\n\tupdate(p); // 别忘记更新\n}\n\nvoid zag(int &p) {\n\tint q = treap[p].rChild;\n\ttreap[p].rChild = treap[q].lChild;\n\ttreap[q].lChild = p;\n\tp = q;\n\tupdate(treap[p].lChild);\n\tupdate(p);\n}\n\nvoid insert(int &p, int val) {\n\tif (p == 0) {\n\t\tp = newNode(val);\n\t\treturn;\n\t}\n\tif (val == treap[p].value) {\n\t\ttreap[p].count++;\n\t\tupdate(p);\n\t\treturn;\n\t}\n\tif (val < treap[p].value) {\n\t\tinsert(treap[p].lChild, val);\n\t\tif (treap[p].weight < treap[treap[p].lChild].weight) zig(p);\n\t} else {\n\t\tinsert(treap[p].rChild, val);\n\t\tif (treap[p].weight < treap[treap[p].rChild].weight) zag(p);\n\t} // zig 和 zag 操作，保证满足大根堆性质\n\tupdate(p);\n} // 插入一个点\n\nint getPre(int val) {\n\tint ans = 1;\n\tint p = root;\n\twhile (p != 0) {\n\t\tif (val == treap[p].value) {\n\t\t\tif (treap[p].lChild > 0) {\n\t\t\t\tp = treap[p].lChild; // 左子树上不断向右走，获取最大的前驱\n\t\t\t\twhile (treap[p].rChild > 0) p = treap[p].rChild;\n\t\t\t\tans = p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (treap[p].value < val &&\n\t\t\ttreap[p].value > treap[ans].value) ans = p; // 尝试更新答案\n\t\tp = val < treap[p].value ? treap[p].lChild : treap[p].rChild;\n\t}\n\treturn treap[ans].value;\n} // 获取前驱\n\nint getNext(int val) {\n\tint ans = 2;\n\tint p = root;\n\twhile (p != 0) {\n\t\tif (val == treap[p].value) {\n\t\t\tif (treap[p].rChild > 0) {\n\t\t\t\tp = treap[p].rChild; // 右子树上不断向左走，获取最小的后继\n\t\t\t\twhile (treap[p].lChild > 0) p = treap[p].lChild;\n\t\t\t\tans = p;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (treap[p].value > val &&\n\t\t\ttreap[p].value < treap[ans].value) ans = p; // 尝试更新答案\n\t\tp = val < treap[p].value ? treap[p].lChild : treap[p].rChild;\n\t}\n\treturn treap[ans].value;\n}\n\nvoid remove(int &p, int val) {\n\tif (p == 0) return;\n\tif (val == treap[p].value) {\n\t\tif (treap[p].count > 1) {\n\t\t\ttreap[p].count--;\n\t\t\tupdate(p);\n\t\t} else if (treap[p].lChild != 0 || treap[p].rChild != 0) {\n\t\t\tif (treap[p].rChild == 0 ||\n\t\t\t\ttreap[treap[p].lChild].weight > treap[treap[p].rChild].weight) {\n\t\t\t\tzig(p);\n\t\t\t\tremove(treap[p].rChild, val);\n\t\t\t} else {\n\t\t\t\tzag(p);\n\t\t\t\tremove(treap[p].lChild, val);\n\t\t\t} // 通过旋转来删除节点\n\t\t\tupdate(p);\n\t\t} else p = 0;\n\t\treturn;\n\t}\n\tif (val < treap[p].value) remove(treap[p].lChild, val);\n\telse remove(treap[p].rChild, val);\n\tupdate(p);\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tnumNodes = 0;\n\tbuild();\n\tcin >> n;\n\tint opt, x;\n\twhile (n--) {\n\t\tcin >> opt >> x;\n\t\tswitch (opt) {\n\t\t\tcase 1: { insert(root, x); break; }\n\t\t\tcase 2: { remove(root, x); break; }\n\t\t\tcase 3: { cout << getRankByVal(root, x) - 1 << endl; break; } // 减一\n\t\t\tcase 4: { cout << getValByRank(root, x + 1) << endl; break; } // 加一\n\t\t\tcase 5: { cout << getPre(x) << endl; break; }\n\t\t\tcase 6: { cout << getNext(x) << endl; break; }\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### 总结\n\n班里的某个大佬和我说 Treap 没有 ZigZag，这让我很懵逼。但是 Zig 和 Zag 操作的确是很重要的，似乎在学 Splay 的时候也会用到，多学无害。Treap 还是很有用的，~~关键时候可以救命~~。 \n\n---","slug":"平衡树-Treap-总结","published":1,"updated":"2018-09-16T04:14:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnp000urgc8o5wz4j3s","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才<del>把板子背下来</del>把它真正理解了，不禁感叹数据结构真的是神奇啊！</p>\n<a id=\"more\"></a>\n<h3 id=\"BST-二叉查找树的性质\"><a href=\"#BST-二叉查找树的性质\" class=\"headerlink\" title=\"BST 二叉查找树的性质\"></a>BST 二叉查找树的性质</h3><p>因为想重点总结的是 Treap 而不是<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9\" target=\"_blank\" rel=\"noopener\">普通 BST</a>，所以这里只稍微提一下它的性质：</p>\n<ol>\n<li>若任意节点的左子树不空，则左子树上<strong>所有节点</strong>的值均<strong>小于</strong>它的根节点的值；</li>\n<li>若任意节点的右子树不空，则右子树上<strong>所有节点</strong>的值均<strong>大于</strong>它的根节点的值；</li>\n<li>任意节点的左、右子树也分别为二叉查找树；</li>\n<li><strong>没有键值相等的节点。</strong></li>\n</ol>\n<p>BST 是 Treap 学习的基础，更多内容可以看<a href=\"https://lufficc.com/blog/binary-search-tree\" target=\"_blank\" rel=\"noopener\">这篇博客</a>。<br>上面这些性质，可以使得在 BST 上查找前驱 / 后继更为方便。这些性质是构建 BST 的基础，但是也使得 BST 不能很好地保持树的平衡，即左右子树的大小相差太大，最极端的情况就是一条链，为了保持 BST 的平衡，诞生了各种平衡树。</p>\n<h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><h4 id=\"Zig-和-Zag\"><a href=\"#Zig-和-Zag\" class=\"headerlink\" title=\"Zig 和 Zag\"></a>Zig 和 Zag</h4><p>保持 Treap 平衡的方式就是改变 Treap 的形态，同时又必须保证 Treap 仍然具备 BST 的性质，于是 Zig 和 Zag 操作就诞生了</p>\n<div style=\"align: center\"> <img src=\"zigzag.png\"> </div>\n\n<p>可见这并不是简单的旋转，它还将某个节点向根节点移动，这个过程只可意会不可言传，还是好好理解上图。旋转的代码实现如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zig</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].lChild;</span><br><span class=\"line\">\ttreap[p].lChild = treap[q].rChild;</span><br><span class=\"line\">\ttreap[q].rChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zag</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].rChild;</span><br><span class=\"line\">\ttreap[p].rChild = treap[q].lChild;</span><br><span class=\"line\">\ttreap[q].lChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"保证-Treap-的平衡\"><a href=\"#保证-Treap-的平衡\" class=\"headerlink\" title=\"保证 Treap 的平衡\"></a>保证 Treap 的平衡</h4><p>什么样的旋转才能保证它的平衡呢？Treap 是 Tree 和 Heap 的复合名词，所以它还满足堆性质。它利用“随机”来创造平衡的条件，每一个节点都有一个随机生成的额外权值，Treap 在满足 BST 性质的同时还通过旋转使得权值满足大根堆的性质。特别的，在删除 Treap 的节点时，可以直接把这个节点旋转到叶节点来直接删除，这样就免去了很多复杂的操作。</p>\n<h4 id=\"从一道例题看代码实现\"><a href=\"#从一道例题看代码实现\" class=\"headerlink\" title=\"从一道例题看代码实现\"></a>从一道例题看代码实现</h4><p>题目在这：<a href=\"https://www.luogu.org/problemnew/show/P3369\" target=\"_blank\" rel=\"noopener\">洛谷 P3369 【模板】普通平衡树</a></p>\n<p>因为题目中同一个节点可能有多个，所以可以为每个节点增加一个“副本数”，同时在获取 Rank 的时候别忘了减一，因为初始化的时候有一个正无穷，一个负无穷，它们只是为了保证 BST 性质，并不是实际的节点。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 100010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x7fffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">treapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lChild, rChild; <span class=\"comment\">// 左右子节点下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value, weight;  <span class=\"comment\">// 节点关键码及权值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count, size;    <span class=\"comment\">// 副本数及子树大小</span></span><br><span class=\"line\">&#125; treap[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> numNodes, root, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\tnumNodes++;</span><br><span class=\"line\">\ttreap[numNodes].value = val;</span><br><span class=\"line\">\ttreap[numNodes].weight = rand(); <span class=\"comment\">// 随机权值</span></span><br><span class=\"line\">\ttreap[numNodes].count = treap[numNodes].size = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> numNodes;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 建立一个新的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">\ttreap[p].size = treap[treap[p].lChild].size +</span><br><span class=\"line\">\t\ttreap[treap[p].rChild].size +</span><br><span class=\"line\">\t\ttreap[p].count;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 更新某一个点的 size 方便获取排名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tnewNode(-INF); <span class=\"comment\">// 保证 BST 性质的两个点</span></span><br><span class=\"line\">\tnewNode(INF);</span><br><span class=\"line\">\troot = <span class=\"number\">1</span>;</span><br><span class=\"line\">\ttreap[root].rChild = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tupdate(root);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRankByVal</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val == treap[p].value)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> treap[treap[p].lChild].size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val &lt; treap[p].value)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getRankByVal(treap[p].lChild, val);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getRankByVal(treap[p].rChild, val) +</span><br><span class=\"line\">\t\ttreap[treap[p].lChild].size +</span><br><span class=\"line\">\t\ttreap[p].count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上下两个函数很好理解，不作赘述</span></span><br><span class=\"line\"><span class=\"comment\">// 一切从 BST 性质出发</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValByRank</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> rnk)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (treap[treap[p].lChild].size &gt;= rnk)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getValByRank(treap[p].lChild, rnk);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (treap[treap[p].lChild].size + treap[p].count &gt;= rnk)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> treap[p].value;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getValByRank(treap[p].rChild,</span><br><span class=\"line\">\t\trnk - treap[treap[p].lChild].size - treap[p].count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zig</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].lChild;</span><br><span class=\"line\">\ttreap[p].lChild = treap[q].rChild;</span><br><span class=\"line\">\ttreap[q].rChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">\tupdate(treap[p].rChild);</span><br><span class=\"line\">\tupdate(p); <span class=\"comment\">// 别忘记更新</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zag</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].rChild;</span><br><span class=\"line\">\ttreap[p].rChild = treap[q].lChild;</span><br><span class=\"line\">\ttreap[q].lChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">\tupdate(treap[p].lChild);</span><br><span class=\"line\">\tupdate(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tp = newNode(val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\ttreap[p].count++;</span><br><span class=\"line\">\t\tupdate(p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val &lt; treap[p].value) &#123;</span><br><span class=\"line\">\t\tinsert(treap[p].lChild, val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].weight &lt; treap[treap[p].lChild].weight) zig(p);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tinsert(treap[p].rChild, val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].weight &lt; treap[treap[p].rChild].weight) zag(p);</span><br><span class=\"line\">\t&#125; <span class=\"comment\">// zig 和 zag 操作，保证满足大根堆性质</span></span><br><span class=\"line\">\tupdate(p);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 插入一个点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPre</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = root;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (treap[p].lChild &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp = treap[p].lChild; <span class=\"comment\">// 左子树上不断向右走，获取最大的前驱</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (treap[p].rChild &gt; <span class=\"number\">0</span>) p = treap[p].rChild;</span><br><span class=\"line\">\t\t\t\tans = p;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].value &lt; val &amp;&amp;</span><br><span class=\"line\">\t\t\ttreap[p].value &gt; treap[ans].value) ans = p; <span class=\"comment\">// 尝试更新答案</span></span><br><span class=\"line\">\t\tp = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> treap[ans].value;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 获取前驱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = root;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (treap[p].rChild &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp = treap[p].rChild; <span class=\"comment\">// 右子树上不断向左走，获取最小的后继</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (treap[p].lChild &gt; <span class=\"number\">0</span>) p = treap[p].lChild;</span><br><span class=\"line\">\t\t\t\tans = p;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].value &gt; val &amp;&amp;</span><br><span class=\"line\">\t\t\ttreap[p].value &lt; treap[ans].value) ans = p; <span class=\"comment\">// 尝试更新答案</span></span><br><span class=\"line\">\t\tp = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> treap[ans].value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].count &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\ttreap[p].count--;</span><br><span class=\"line\">\t\t\tupdate(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (treap[p].lChild != <span class=\"number\">0</span> || treap[p].rChild != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (treap[p].rChild == <span class=\"number\">0</span> ||</span><br><span class=\"line\">\t\t\t\ttreap[treap[p].lChild].weight &gt; treap[treap[p].rChild].weight) &#123;</span><br><span class=\"line\">\t\t\t\tzig(p);</span><br><span class=\"line\">\t\t\t\tremove(treap[p].rChild, val);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tzag(p);</span><br><span class=\"line\">\t\t\t\tremove(treap[p].lChild, val);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"comment\">// 通过旋转来删除节点</span></span><br><span class=\"line\">\t\t\tupdate(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val &lt; treap[p].value) remove(treap[p].lChild, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> remove(treap[p].rChild, val);</span><br><span class=\"line\">\tupdate(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tnumNodes = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tbuild();</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> opt, x;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; opt &gt;&gt; x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (opt) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123; insert(root, x); <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123; remove(root, x); <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getRankByVal(root, x) - <span class=\"number\">1</span> &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125; <span class=\"comment\">// 减一</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getValByRank(root, x + <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125; <span class=\"comment\">// 加一</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getPre(x) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getNext(x) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>班里的某个大佬和我说 Treap 没有 ZigZag，这让我很懵逼。但是 Zig 和 Zag 操作的确是很重要的，似乎在学 Splay 的时候也会用到，多学无害。Treap 还是很有用的，<del>关键时候可以救命</del>。 </p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才<del>把板子背下来</del>把它真正理解了，不禁感叹数据结构真的是神奇啊！</p>","more":"<h3 id=\"BST-二叉查找树的性质\"><a href=\"#BST-二叉查找树的性质\" class=\"headerlink\" title=\"BST 二叉查找树的性质\"></a>BST 二叉查找树的性质</h3><p>因为想重点总结的是 Treap 而不是<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9\" target=\"_blank\" rel=\"noopener\">普通 BST</a>，所以这里只稍微提一下它的性质：</p>\n<ol>\n<li>若任意节点的左子树不空，则左子树上<strong>所有节点</strong>的值均<strong>小于</strong>它的根节点的值；</li>\n<li>若任意节点的右子树不空，则右子树上<strong>所有节点</strong>的值均<strong>大于</strong>它的根节点的值；</li>\n<li>任意节点的左、右子树也分别为二叉查找树；</li>\n<li><strong>没有键值相等的节点。</strong></li>\n</ol>\n<p>BST 是 Treap 学习的基础，更多内容可以看<a href=\"https://lufficc.com/blog/binary-search-tree\" target=\"_blank\" rel=\"noopener\">这篇博客</a>。<br>上面这些性质，可以使得在 BST 上查找前驱 / 后继更为方便。这些性质是构建 BST 的基础，但是也使得 BST 不能很好地保持树的平衡，即左右子树的大小相差太大，最极端的情况就是一条链，为了保持 BST 的平衡，诞生了各种平衡树。</p>\n<h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><h4 id=\"Zig-和-Zag\"><a href=\"#Zig-和-Zag\" class=\"headerlink\" title=\"Zig 和 Zag\"></a>Zig 和 Zag</h4><p>保持 Treap 平衡的方式就是改变 Treap 的形态，同时又必须保证 Treap 仍然具备 BST 的性质，于是 Zig 和 Zag 操作就诞生了</p>\n<div style=\"align: center\"> <img src=\"zigzag.png\"> </div>\n\n<p>可见这并不是简单的旋转，它还将某个节点向根节点移动，这个过程只可意会不可言传，还是好好理解上图。旋转的代码实现如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zig</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].lChild;</span><br><span class=\"line\">\ttreap[p].lChild = treap[q].rChild;</span><br><span class=\"line\">\ttreap[q].rChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zag</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].rChild;</span><br><span class=\"line\">\ttreap[p].rChild = treap[q].lChild;</span><br><span class=\"line\">\ttreap[q].lChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"保证-Treap-的平衡\"><a href=\"#保证-Treap-的平衡\" class=\"headerlink\" title=\"保证 Treap 的平衡\"></a>保证 Treap 的平衡</h4><p>什么样的旋转才能保证它的平衡呢？Treap 是 Tree 和 Heap 的复合名词，所以它还满足堆性质。它利用“随机”来创造平衡的条件，每一个节点都有一个随机生成的额外权值，Treap 在满足 BST 性质的同时还通过旋转使得权值满足大根堆的性质。特别的，在删除 Treap 的节点时，可以直接把这个节点旋转到叶节点来直接删除，这样就免去了很多复杂的操作。</p>\n<h4 id=\"从一道例题看代码实现\"><a href=\"#从一道例题看代码实现\" class=\"headerlink\" title=\"从一道例题看代码实现\"></a>从一道例题看代码实现</h4><p>题目在这：<a href=\"https://www.luogu.org/problemnew/show/P3369\" target=\"_blank\" rel=\"noopener\">洛谷 P3369 【模板】普通平衡树</a></p>\n<p>因为题目中同一个节点可能有多个，所以可以为每个节点增加一个“副本数”，同时在获取 Rank 的时候别忘了减一，因为初始化的时候有一个正无穷，一个负无穷，它们只是为了保证 BST 性质，并不是实际的节点。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 100010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x7fffffff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">treapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lChild, rChild; <span class=\"comment\">// 左右子节点下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value, weight;  <span class=\"comment\">// 节点关键码及权值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count, size;    <span class=\"comment\">// 副本数及子树大小</span></span><br><span class=\"line\">&#125; treap[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> numNodes, root, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\tnumNodes++;</span><br><span class=\"line\">\ttreap[numNodes].value = val;</span><br><span class=\"line\">\ttreap[numNodes].weight = rand(); <span class=\"comment\">// 随机权值</span></span><br><span class=\"line\">\ttreap[numNodes].count = treap[numNodes].size = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> numNodes;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 建立一个新的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">\ttreap[p].size = treap[treap[p].lChild].size +</span><br><span class=\"line\">\t\ttreap[treap[p].rChild].size +</span><br><span class=\"line\">\t\ttreap[p].count;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 更新某一个点的 size 方便获取排名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tnewNode(-INF); <span class=\"comment\">// 保证 BST 性质的两个点</span></span><br><span class=\"line\">\tnewNode(INF);</span><br><span class=\"line\">\troot = <span class=\"number\">1</span>;</span><br><span class=\"line\">\ttreap[root].rChild = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tupdate(root);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRankByVal</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val == treap[p].value)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> treap[treap[p].lChild].size + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val &lt; treap[p].value)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getRankByVal(treap[p].lChild, val);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getRankByVal(treap[p].rChild, val) +</span><br><span class=\"line\">\t\ttreap[treap[p].lChild].size +</span><br><span class=\"line\">\t\ttreap[p].count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 上下两个函数很好理解，不作赘述</span></span><br><span class=\"line\"><span class=\"comment\">// 一切从 BST 性质出发</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValByRank</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> rnk)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (treap[treap[p].lChild].size &gt;= rnk)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getValByRank(treap[p].lChild, rnk);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (treap[treap[p].lChild].size + treap[p].count &gt;= rnk)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> treap[p].value;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getValByRank(treap[p].rChild,</span><br><span class=\"line\">\t\trnk - treap[treap[p].lChild].size - treap[p].count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zig</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].lChild;</span><br><span class=\"line\">\ttreap[p].lChild = treap[q].rChild;</span><br><span class=\"line\">\ttreap[q].rChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">\tupdate(treap[p].rChild);</span><br><span class=\"line\">\tupdate(p); <span class=\"comment\">// 别忘记更新</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">zag</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q = treap[p].rChild;</span><br><span class=\"line\">\ttreap[p].rChild = treap[q].lChild;</span><br><span class=\"line\">\ttreap[q].lChild = p;</span><br><span class=\"line\">\tp = q;</span><br><span class=\"line\">\tupdate(treap[p].lChild);</span><br><span class=\"line\">\tupdate(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tp = newNode(val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\ttreap[p].count++;</span><br><span class=\"line\">\t\tupdate(p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val &lt; treap[p].value) &#123;</span><br><span class=\"line\">\t\tinsert(treap[p].lChild, val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].weight &lt; treap[treap[p].lChild].weight) zig(p);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tinsert(treap[p].rChild, val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].weight &lt; treap[treap[p].rChild].weight) zag(p);</span><br><span class=\"line\">\t&#125; <span class=\"comment\">// zig 和 zag 操作，保证满足大根堆性质</span></span><br><span class=\"line\">\tupdate(p);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 插入一个点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPre</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = root;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (treap[p].lChild &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp = treap[p].lChild; <span class=\"comment\">// 左子树上不断向右走，获取最大的前驱</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (treap[p].rChild &gt; <span class=\"number\">0</span>) p = treap[p].rChild;</span><br><span class=\"line\">\t\t\t\tans = p;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].value &lt; val &amp;&amp;</span><br><span class=\"line\">\t\t\ttreap[p].value &gt; treap[ans].value) ans = p; <span class=\"comment\">// 尝试更新答案</span></span><br><span class=\"line\">\t\tp = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> treap[ans].value;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 获取前驱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = root;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (treap[p].rChild &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tp = treap[p].rChild; <span class=\"comment\">// 右子树上不断向左走，获取最小的后继</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (treap[p].lChild &gt; <span class=\"number\">0</span>) p = treap[p].lChild;</span><br><span class=\"line\">\t\t\t\tans = p;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].value &gt; val &amp;&amp;</span><br><span class=\"line\">\t\t\ttreap[p].value &lt; treap[ans].value) ans = p; <span class=\"comment\">// 尝试更新答案</span></span><br><span class=\"line\">\t\tp = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> treap[ans].value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;p, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val == treap[p].value) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (treap[p].count &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\ttreap[p].count--;</span><br><span class=\"line\">\t\t\tupdate(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (treap[p].lChild != <span class=\"number\">0</span> || treap[p].rChild != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (treap[p].rChild == <span class=\"number\">0</span> ||</span><br><span class=\"line\">\t\t\t\ttreap[treap[p].lChild].weight &gt; treap[treap[p].rChild].weight) &#123;</span><br><span class=\"line\">\t\t\t\tzig(p);</span><br><span class=\"line\">\t\t\t\tremove(treap[p].rChild, val);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tzag(p);</span><br><span class=\"line\">\t\t\t\tremove(treap[p].lChild, val);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"comment\">// 通过旋转来删除节点</span></span><br><span class=\"line\">\t\t\tupdate(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (val &lt; treap[p].value) remove(treap[p].lChild, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> remove(treap[p].rChild, val);</span><br><span class=\"line\">\tupdate(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tnumNodes = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tbuild();</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> opt, x;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; opt &gt;&gt; x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (opt) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123; insert(root, x); <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123; remove(root, x); <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getRankByVal(root, x) - <span class=\"number\">1</span> &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125; <span class=\"comment\">// 减一</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getValByRank(root, x + <span class=\"number\">1</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125; <span class=\"comment\">// 加一</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getPre(x) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>: &#123; <span class=\"built_in\">cout</span> &lt;&lt; getNext(x) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>班里的某个大佬和我说 Treap 没有 ZigZag，这让我很懵逼。但是 Zig 和 Zag 操作的确是很重要的，似乎在学 Splay 的时候也会用到，多学无害。Treap 还是很有用的，<del>关键时候可以救命</del>。 </p>\n<hr>"},{"title":"猴排！？一道高考题！？出题人的无下限猴子专场!","mathjax":true,"copyright":true,"comment":true,"date":"2018-10-03T06:40:16.000Z","photo":null,"_content":"\n{% note default %}\n{% endnote %}\n\n<!-- more -->\n\n---","source":"_posts/猴排！？一道高考题！？出题人的无下限猴子专场.md","raw":"---\ntitle: 猴排！？一道高考题！？出题人的无下限猴子专场!\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-10-03 14:40:16\ntags:\n  - NOIP 模拟\ncategories: NOIP\nphoto:\n---\n\n{% note default %}\n{% endnote %}\n\n<!-- more -->\n\n---","slug":"猴排！？一道高考题！？出题人的无下限猴子专场","published":1,"updated":"2018-10-03T06:46:00.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnr000vrgc8w9tq4pk2","content":"<div class=\"note default\"></div>\n<a id=\"more\"></a>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"></div>","more":"<hr>"},{"title":"[数论] 数论基础知识----莫比乌斯函数","date":"2018-08-08T10:46:44.000Z","mathjax":true,"copyright":true,"_content":"### 写在前面\n\n最近自己在自学数论，为了保证遇到数论的题的时候能从容不迫地应对，本篇文章主要是对莫比乌斯函数( $\\mu{(n)}$ )的初步了解\n\n<!-- more -->\n\n### 莫比乌斯函数\n\n#### 定义\n\n莫比乌斯函数 $\\mu{(n)}$ 的定义如下：\n\n$$ \\mu(1) = 1; $$\n\n如果 $n>1$，写 $n=p_1^{a_1}p_2^{a_2}p_3^{a_3}...p_k^{a_k}$，则：\n\n$$\n\\mu(n)=\n\\begin{cases}\n(-1)^k & \\text{when $a_1=a_2=a_3=...=a_k=1$,}\\\\\n0 & \\text{otherwise.}\n\\end{cases}\n$$\n\n**注**     $\\mu(n)=1$当且仅当$n$有一个大于$1$的平方因子。\n\n#### 定理\n\n莫比乌斯函数在数论中经常出现（上次就被它狠狠地坑了一次），它的基本性质之一是对约束求和 $\\sum_{d|n}\\mu{(d)}$ 的一个重要的简明公式，它在$n$的正约数上展开，式子中的 $\\left[x\\right]$ 表示不大于$x$的最大整数。定理如下：\n\n**[定理描述]**\n如果${n}\\geqslant{1}$，我们有\n$$\n\\sum_{d|n}\\mu{(d)}=\\left[\\frac{1}{n}\\right]=\n\\begin{cases}\n1 &\\text{when $n=1$,}\\\\\n0 &\\text{when $n>1$.}\n\\end{cases}\n$$\n\n**[定理证明]（运用了二项式定理）**\n对于 $n=1$，等式显然成立。设 $n>1$ 并写 $n=p_1^{a_1}...p_k^{a_k}$ ，在 $\\sum_{d|n}\\mu{(d)}$ 中非零的项仅来自于 $d=1$ 与 $n$ 的约数是不同素数的乘积，即\n$$\n\\begin{aligned}\n\\sum_{d|n}\\mu{(d)}={}& \\mu(1)+\\mu(p_1)+...+\\mu(p_k)+\\mu(p_1p_k)+...+{} \\\\\n&\\mu(p_{k-1}p_k)+...+\\mu(p_1p_2...p_k){}\\\\\n={}&1+\\binom{k}{1}(-1)+\\binom{k}{2}(-1)^2+...+\\binom{k}{k}(-1)^k{}\\\\\n={}&0\n\\end{aligned}\n$$\n\n### 总结\n\n莫比乌斯函数本身其实并不难，但是要深刻地理解它还是有一点点困难的，以后会和别的有关函数结合起来进行讲解，加深记忆。\n\n---\n\n","source":"_posts/数论-数论基础知识-莫比乌斯函数.md","raw":"---\ntitle: '[数论] 数论基础知识----莫比乌斯函数'\ndate: 2018-08-08 18:46:44\ntags:\n\t- 数论\n\t- 欧拉函数\n\t- 莫比乌斯函数\ncategories: 数论\nmathjax: true\ncopyright: true\n---\n### 写在前面\n\n最近自己在自学数论，为了保证遇到数论的题的时候能从容不迫地应对，本篇文章主要是对莫比乌斯函数( $\\mu{(n)}$ )的初步了解\n\n<!-- more -->\n\n### 莫比乌斯函数\n\n#### 定义\n\n莫比乌斯函数 $\\mu{(n)}$ 的定义如下：\n\n$$ \\mu(1) = 1; $$\n\n如果 $n>1$，写 $n=p_1^{a_1}p_2^{a_2}p_3^{a_3}...p_k^{a_k}$，则：\n\n$$\n\\mu(n)=\n\\begin{cases}\n(-1)^k & \\text{when $a_1=a_2=a_3=...=a_k=1$,}\\\\\n0 & \\text{otherwise.}\n\\end{cases}\n$$\n\n**注**     $\\mu(n)=1$当且仅当$n$有一个大于$1$的平方因子。\n\n#### 定理\n\n莫比乌斯函数在数论中经常出现（上次就被它狠狠地坑了一次），它的基本性质之一是对约束求和 $\\sum_{d|n}\\mu{(d)}$ 的一个重要的简明公式，它在$n$的正约数上展开，式子中的 $\\left[x\\right]$ 表示不大于$x$的最大整数。定理如下：\n\n**[定理描述]**\n如果${n}\\geqslant{1}$，我们有\n$$\n\\sum_{d|n}\\mu{(d)}=\\left[\\frac{1}{n}\\right]=\n\\begin{cases}\n1 &\\text{when $n=1$,}\\\\\n0 &\\text{when $n>1$.}\n\\end{cases}\n$$\n\n**[定理证明]（运用了二项式定理）**\n对于 $n=1$，等式显然成立。设 $n>1$ 并写 $n=p_1^{a_1}...p_k^{a_k}$ ，在 $\\sum_{d|n}\\mu{(d)}$ 中非零的项仅来自于 $d=1$ 与 $n$ 的约数是不同素数的乘积，即\n$$\n\\begin{aligned}\n\\sum_{d|n}\\mu{(d)}={}& \\mu(1)+\\mu(p_1)+...+\\mu(p_k)+\\mu(p_1p_k)+...+{} \\\\\n&\\mu(p_{k-1}p_k)+...+\\mu(p_1p_2...p_k){}\\\\\n={}&1+\\binom{k}{1}(-1)+\\binom{k}{2}(-1)^2+...+\\binom{k}{k}(-1)^k{}\\\\\n={}&0\n\\end{aligned}\n$$\n\n### 总结\n\n莫比乌斯函数本身其实并不难，但是要深刻地理解它还是有一点点困难的，以后会和别的有关函数结合起来进行讲解，加深记忆。\n\n---\n\n","slug":"数论-数论基础知识-莫比乌斯函数","published":1,"updated":"2018-09-16T04:14:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnt000zrgc88uigrepe","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最近自己在自学数论，为了保证遇到数论的题的时候能从容不迫地应对，本篇文章主要是对莫比乌斯函数( $\\mu{(n)}$ )的初步了解</p>\n<a id=\"more\"></a>\n<h3 id=\"莫比乌斯函数\"><a href=\"#莫比乌斯函数\" class=\"headerlink\" title=\"莫比乌斯函数\"></a>莫比乌斯函数</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>莫比乌斯函数 $\\mu{(n)}$ 的定义如下：</p>\n<p>$$ \\mu(1) = 1; $$</p>\n<p>如果 $n&gt;1$，写 $n=p_1^{a_1}p_2^{a_2}p_3^{a_3}…p_k^{a_k}$，则：</p>\n<p>$$<br>\\mu(n)=<br>\\begin{cases}<br>(-1)^k &amp; \\text{when $a_1=a_2=a_3=…=a_k=1$,}\\\\<br>0 &amp; \\text{otherwise.}<br>\\end{cases}<br>$$</p>\n<p><strong>注</strong>     $\\mu(n)=1$当且仅当$n$有一个大于$1$的平方因子。</p>\n<h4 id=\"定理\"><a href=\"#定理\" class=\"headerlink\" title=\"定理\"></a>定理</h4><p>莫比乌斯函数在数论中经常出现（上次就被它狠狠地坑了一次），它的基本性质之一是对约束求和 $\\sum_{d|n}\\mu{(d)}$ 的一个重要的简明公式，它在$n$的正约数上展开，式子中的 $\\left[x\\right]$ 表示不大于$x$的最大整数。定理如下：</p>\n<p><strong>[定理描述]</strong><br>如果${n}\\geqslant{1}$，我们有<br>$$<br>\\sum_{d|n}\\mu{(d)}=\\left[\\frac{1}{n}\\right]=<br>\\begin{cases}<br>1 &amp;\\text{when $n=1$,}\\\\<br>0 &amp;\\text{when $n&gt;1$.}<br>\\end{cases}<br>$$</p>\n<p><strong>[定理证明]（运用了二项式定理）</strong><br>对于 $n=1$，等式显然成立。设 $n&gt;1$ 并写 $n=p_1^{a_1}…p_k^{a_k}$ ，在 $\\sum_{d|n}\\mu{(d)}$ 中非零的项仅来自于 $d=1$ 与 $n$ 的约数是不同素数的乘积，即<br>$$<br>\\begin{aligned}<br>\\sum_{d|n}\\mu{(d)}={}&amp; \\mu(1)+\\mu(p_1)+…+\\mu(p_k)+\\mu(p_1p_k)+…+{} \\\\<br>&amp;\\mu(p_{k-1}p_k)+…+\\mu(p_1p_2…p_k){}\\\\<br>={}&amp;1+\\binom{k}{1}(-1)+\\binom{k}{2}(-1)^2+…+\\binom{k}{k}(-1)^k{}\\\\<br>={}&amp;0<br>\\end{aligned}<br>$$</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>莫比乌斯函数本身其实并不难，但是要深刻地理解它还是有一点点困难的，以后会和别的有关函数结合起来进行讲解，加深记忆。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最近自己在自学数论，为了保证遇到数论的题的时候能从容不迫地应对，本篇文章主要是对莫比乌斯函数( $\\mu{(n)}$ )的初步了解</p>","more":"<h3 id=\"莫比乌斯函数\"><a href=\"#莫比乌斯函数\" class=\"headerlink\" title=\"莫比乌斯函数\"></a>莫比乌斯函数</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>莫比乌斯函数 $\\mu{(n)}$ 的定义如下：</p>\n<p>$$ \\mu(1) = 1; $$</p>\n<p>如果 $n&gt;1$，写 $n=p_1^{a_1}p_2^{a_2}p_3^{a_3}…p_k^{a_k}$，则：</p>\n<p>$$<br>\\mu(n)=<br>\\begin{cases}<br>(-1)^k &amp; \\text{when $a_1=a_2=a_3=…=a_k=1$,}\\\\<br>0 &amp; \\text{otherwise.}<br>\\end{cases}<br>$$</p>\n<p><strong>注</strong>     $\\mu(n)=1$当且仅当$n$有一个大于$1$的平方因子。</p>\n<h4 id=\"定理\"><a href=\"#定理\" class=\"headerlink\" title=\"定理\"></a>定理</h4><p>莫比乌斯函数在数论中经常出现（上次就被它狠狠地坑了一次），它的基本性质之一是对约束求和 $\\sum_{d|n}\\mu{(d)}$ 的一个重要的简明公式，它在$n$的正约数上展开，式子中的 $\\left[x\\right]$ 表示不大于$x$的最大整数。定理如下：</p>\n<p><strong>[定理描述]</strong><br>如果${n}\\geqslant{1}$，我们有<br>$$<br>\\sum_{d|n}\\mu{(d)}=\\left[\\frac{1}{n}\\right]=<br>\\begin{cases}<br>1 &amp;\\text{when $n=1$,}\\\\<br>0 &amp;\\text{when $n&gt;1$.}<br>\\end{cases}<br>$$</p>\n<p><strong>[定理证明]（运用了二项式定理）</strong><br>对于 $n=1$，等式显然成立。设 $n&gt;1$ 并写 $n=p_1^{a_1}…p_k^{a_k}$ ，在 $\\sum_{d|n}\\mu{(d)}$ 中非零的项仅来自于 $d=1$ 与 $n$ 的约数是不同素数的乘积，即<br>$$<br>\\begin{aligned}<br>\\sum_{d|n}\\mu{(d)}={}&amp; \\mu(1)+\\mu(p_1)+…+\\mu(p_k)+\\mu(p_1p_k)+…+{} \\\\<br>&amp;\\mu(p_{k-1}p_k)+…+\\mu(p_1p_2…p_k){}\\\\<br>={}&amp;1+\\binom{k}{1}(-1)+\\binom{k}{2}(-1)^2+…+\\binom{k}{k}(-1)^k{}\\\\<br>={}&amp;0<br>\\end{aligned}<br>$$</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>莫比乌斯函数本身其实并不难，但是要深刻地理解它还是有一点点困难的，以后会和别的有关函数结合起来进行讲解，加深记忆。</p>\n<hr>"},{"title":"[杂谈] 编程规范那些事","date":"2018-08-29T14:28:29.000Z","copyright":true,"_content":"\n### 写在前面\n\n一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!\n\n<!-- more -->\n\n### Google C++ 编程规范\n\nGoogle 的项目一直都让人看起来赏心悦目，即使有些混乱的宏定义也让人看起来赏心悦目，首先贴一张图，转自 [CSDN 上的一篇博客](https://blog.csdn.net/voidccc/article/details/37599203)\n<div style=\"slign: center\"> <img src=\"pic1.jpg\" /> </div>\n\n然后贴上谷歌编程指南的[详细说明](https://zh-google-styleguide.readthedocs.io/en/latest/)\n\n### 评价\n\nGoogle 的编程指南真的是高妙，看起来赏心悦目，但个人觉得还是要去其糟粕的，比如“不用全局变量”这种，在竞赛中就可以直接忽视了，还是以代码的易用性为第一要务。\n\n---","source":"_posts/杂谈-编程规范那些事.md","raw":"---\ntitle: '[杂谈] 编程规范那些事'\ndate: 2018-08-29 22:28:29\ntags:\n\t- 杂谈\n\t- 编程规范\ncategories: 杂谈\ncopyright: true\n---\n\n### 写在前面\n\n一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!\n\n<!-- more -->\n\n### Google C++ 编程规范\n\nGoogle 的项目一直都让人看起来赏心悦目，即使有些混乱的宏定义也让人看起来赏心悦目，首先贴一张图，转自 [CSDN 上的一篇博客](https://blog.csdn.net/voidccc/article/details/37599203)\n<div style=\"slign: center\"> <img src=\"pic1.jpg\" /> </div>\n\n然后贴上谷歌编程指南的[详细说明](https://zh-google-styleguide.readthedocs.io/en/latest/)\n\n### 评价\n\nGoogle 的编程指南真的是高妙，看起来赏心悦目，但个人觉得还是要去其糟粕的，比如“不用全局变量”这种，在竞赛中就可以直接忽视了，还是以代码的易用性为第一要务。\n\n---","slug":"杂谈-编程规范那些事","published":1,"updated":"2018-09-16T04:14:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnv0010rgc8dwddrg62","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!</p>\n<a id=\"more\"></a>\n<h3 id=\"Google-C-编程规范\"><a href=\"#Google-C-编程规范\" class=\"headerlink\" title=\"Google C++ 编程规范\"></a>Google C++ 编程规范</h3><p>Google 的项目一直都让人看起来赏心悦目，即使有些混乱的宏定义也让人看起来赏心悦目，首先贴一张图，转自 <a href=\"https://blog.csdn.net/voidccc/article/details/37599203\" target=\"_blank\" rel=\"noopener\">CSDN 上的一篇博客</a></p>\n<div style=\"slign: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>然后贴上谷歌编程指南的<a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">详细说明</a></p>\n<h3 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h3><p>Google 的编程指南真的是高妙，看起来赏心悦目，但个人觉得还是要去其糟粕的，比如“不用全局变量”这种，在竞赛中就可以直接忽视了，还是以代码的易用性为第一要务。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!</p>","more":"<h3 id=\"Google-C-编程规范\"><a href=\"#Google-C-编程规范\" class=\"headerlink\" title=\"Google C++ 编程规范\"></a>Google C++ 编程规范</h3><p>Google 的项目一直都让人看起来赏心悦目，即使有些混乱的宏定义也让人看起来赏心悦目，首先贴一张图，转自 <a href=\"https://blog.csdn.net/voidccc/article/details/37599203\" target=\"_blank\" rel=\"noopener\">CSDN 上的一篇博客</a></p>\n<div style=\"slign: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>然后贴上谷歌编程指南的<a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">详细说明</a></p>\n<h3 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h3><p>Google 的编程指南真的是高妙，看起来赏心悦目，但个人觉得还是要去其糟粕的，比如“不用全局变量”这种，在竞赛中就可以直接忽视了，还是以代码的易用性为第一要务。</p>\n<hr>"},{"title":"[算法] Manacher 算法求最长回文子串","date":"2018-08-14T11:30:29.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n最近几次考试都涉及到了字符串处理这个话题，所以自己打算恶补字符串有关的算法，同时又刚好做到了 LeetCode 上[这么一道题](https://leetcode-cn.com/problems/longest-palindromic-substring/description/)，所以干脆一同解决掉。\n\n<!-- more -->\n\n### 最长回文字串问题\n\n**最长回文子串问题：给定一个字符串，求它的最长回文子串长度。**\n如果一个字符串正着读和反着读是一样的，那它就是回文串。下面是一些回文串的实例：\n\n\t12321 a aba abba aaaa tattarrattat（牛津英语词典中最长的回文单词\n\n那么如何解决这个问题呢？有很多种方法：\n\n1. Brute-Force 暴力求解：找到所有字串，一一验证，时间复杂度为 $O(n^3)$\n2. 改进版 Brute-Force：遍历整个字符串的中间字符及空隙，然后向两端扫描，时间复杂度为 $O(n^2)$。\n3. 动态规划，此处暂时不介绍\n4. 下面将要介绍的 Manacher 算法，又名***马拉车***。\n\n### Manacher 算法\n\n#### 暴力解法的缺陷所在\n\n1. 回文串奇偶性不定，使用上述方法二需要分类讨论，降低效率。\n2. 字串重复访问，时间复杂度冗余。\n\n举个例子：\n\n\tchar: a b a b a\n\t   i: 0 1 2 3 4\n\n在 $i=1$ 和 $i=2$ 时，字串 `aba` 被分别遍历了一次。\nManacher 算法正式针对这些算法进行改进的算法，可以大大提高算法的运行效率。\n\n#### 解决长度奇偶性问题\n\nManacher 算法通过一种预处理方式来解决第一个问题，它在字符串首尾及中间空隙插入一个字符，并且满足这个符号不在字符串中出现，这样就可以让所有的字符串长度变为奇数。以插入`#`为例：\n\n\taba  --> #a#b#a#\n\tabba --> #a#b#b#a#\n\n**插入的是同样的符号，且符号不存在于原串，因此子串的回文性不受影响，原来是回文的串，插完之后还是回文的，原来不是回文的，依然不会是回文**\n\n#### 解决重复访问问题\n\n我们把一个回文串中最左或最右位置的字符与其对称轴的距离称为回文半径。Manacher定义了一个回文半径数组 $RL$，用 $RL[i]$ 表示以第 $i$ 个字符为对称轴的回文串的回文半径。我们一般对字符串从左往右处理，因此这里定义 $RL[i]$ 为第 $i$ 个字符为对称轴的回文串的最右一个字符与字符 $i$ 的距离。对于上面插入分隔符之后的两个串，可以得到 $RL$ 数组：\n\n| $char$ | # | $a$ | # | $b$ | # | $a$ | # |\n|:------:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| $RL$ | $1$ | $2$ | $1$ | $4$ | $1$ | $2$ | $1$ |\n| $RL-1$ | $0$ | $1$ | $0$ | $3$ | $0$ | $1$ | $0$ |\n| $i$ | $0$ | $1$ | $2$ | $3$ | $4$ | $5$ | $6$ |\n\n上面我们还求了一下 $RL[i]-1$。通过观察可以发现，$RL[i]-1$的值，正是在原本那个没有插入过分隔符的串中，以位置i为对称轴的最长回文串的长度。那么只要我们求出了 $RL$ 数组，就能得到最长回文子串的长度。\n\n于是问题变成了，**如何高效地求的 $RL$ 数组**。基本思路是**利用回文串的对称性，扩展回文串**。\n\n我们再引入一个辅助变量 $MaxRight$，表示当前访问到的**所有回文子串**，所能触及的**最右**一个字符的位置。另外还要记录下 $MaxRight$ 对应的回文串的对称轴所在的位置，记为 $pos$，它们的位置关系如下：\n\n<div style=\"align: center\"> <img src=\"pic1.jpg\"/> </div>\n\n我们从左往右地访问字符串来求 $RL$，假设当前访问到的位置为 $i$，即要求 $RL[i]$，在对应上图，$i$ 必然是在 $pos$ 右边的。但我们更关注的是，$i$ 是在 $MaxRight$ 的左边还是右边。我们分情况来讨论：\n\n##### 情况一：$i$ 在 $MaxRight$ 左边\n\n如下图所示：\n\n<div style=\"align: center\"> <img src=\"pic2.jpg\"/> </div>\n\n我们知道，图中两个红色块之间（包括红色块）的串是回文的；并且以 $i$ 为对称轴的回文串，是与红色块间的回文串有所重叠的。我们找到 $i$ 关于 $pos$ 的对称位置 $j$，这个 $j$ 对应的 $RL[j]$ 我们是已经算过的。根据回文串的对称性，以i为对称轴的回文串和以j为对称轴的回文串，有一部分是相同的。这里又有两种细分的情况:\n\n###### 以 $j$ 为对称轴的回文串较短\n\n如下图：\n\n<div style=\"align: center\"> <img src=\"pic3.jpg\"/> </div>\n\n这时我们知道 $RL[i]$ 至少不会小于 $RL[j]$，并且已经知道了部分的以i为中心的回文串，于是可以令 $RL[i]=RL[j]$。但是以i为对称轴的回文串可能实际上更长，因此我们试着以 $i$ 为对称轴，继续往左右两边扩展，直到左右两边字符不同，或者到达边界。\n\n###### 以 $j$ 为对称轴的回文串较长\n\n如下图：\n\n<div style=\"align: center\"> <img src=\"pic4.jpg\"/> </div>\n\n这时，我们只能确定，两条蓝线之间的部分（即不超过 $MaxRight$ 的部分）是回文的，于是从这个长度开始，尝试以i为中心向左右两边扩展，，直到左右两边字符不同，或者到达边界。\n\n###### 小结\n不论以上哪种情况，之后都要尝试更新MaxRight和pos，因为有可能得到更大的MaxRight。\n\n具体操作如下：\n\n1. 令 $RL[i]=min\\lbrace RL[2\\times pos-i], MaxRight-i\\rbrace$\n2. 以 $i$ 为中心扩展回文串，直到左右两边字符不同，或者到达边界\n3. 更新 $MaxRight$ 和 $pos$\n\n##### 情况二：$i$ 在 $MaxRight$ 右边\n\n如下图：\n\n<div style=\"align: center\"> <img src=\"pic5.jpg\"/> </div>\n\n遇到这种情况，说明以 $i$ 为对称轴的回文串还没有任何一个部分被访问过，于是只能从 $i$ 的左右两边开始尝试扩展了，当左右两边字符不同，或者到达字符串边界时停止。然后更新 $MaxRight$ 和 $pos$。\n\n#### 代码实现\n\n此处以 [LeetCode 上的题](https://leetcode-cn.com/problems/longest-palindromic-substring/description/)为例：\n\n```cpp\nclass Solution {\npublic:\n\tstring longestPalindrome(string s) {\n\t\tint len = s.size();\n\t\tif (len <= 1) return s;\n\t\tstring str = preProcess(s);\n\t\tint n = str.size(), pos = 0, MaxRight = 0;\n\t\tvector<int> RL(n, 0);\n\t\tfor (int i = 1; i < n - 1; ++i) {\n\t\t\tRL[i] = MaxRight > i ? min(RL[2 * pos - i], MaxRight - i) : 1;\n\t\t\twhile (str[i + RL[i]] == str[i - RL[i]]) ++RL[i];\n\t\t\tif (i + RL[i] > MaxRight) {\n\t\t\t\tMaxRight = i + RL[i];\n\t\t\t\tpos = i;\n\t\t\t}\n\t\t}\n\t\tint maxLen = 0, index = 0;\n\t\tfor(int i = 1; i < n - 1; ++i) {\n\t\t\tif(RL[i] > maxLen) {\n\t\t\t\tmaxLen = RL[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t} // 这里可以和上面并在一起\n\t\treturn s.substr((index - maxLen) / 2, maxLen - 1);\n\t}\n\t//预处理字符串，abc预处理后变成$#a#b#c#^\n\tstring preProcess(const string &s) {\n\t\tint n = s.size();\n\t\tstring res;\n\t\tres.push_back('$');\n\t\tres.push_back('#');\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tres.push_back(s[i]);\n\t\t\tres.push_back('#');\n\t\t}\n\t\tres.push_back('^');\n\t\treturn res;\n\t}\n\t// 注：此处字符串预处理在头上加入 '$' 是为了方便处理\n\t// 如果是空间瘤患者，直接在有关的地方减一就行了\n};\n```\n### 总结\n\nManacher 算法其实可以算奇技淫巧吧，主要还是掌握它的思路，充分利用待求解问题的性质，从而降低求解的复杂度。这个也是在竞赛中会用到的技巧。\n\n---\n","source":"_posts/算法-Manacher-算法求最长回文子串.md","raw":"---\ntitle: '[算法] Manacher 算法求最长回文子串'\ndate: 2018-08-14 19:30:29\ntags:\n\t- 算法\n\t- Manacher\n\t- 字符串\ncategories: 算法\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n最近几次考试都涉及到了字符串处理这个话题，所以自己打算恶补字符串有关的算法，同时又刚好做到了 LeetCode 上[这么一道题](https://leetcode-cn.com/problems/longest-palindromic-substring/description/)，所以干脆一同解决掉。\n\n<!-- more -->\n\n### 最长回文字串问题\n\n**最长回文子串问题：给定一个字符串，求它的最长回文子串长度。**\n如果一个字符串正着读和反着读是一样的，那它就是回文串。下面是一些回文串的实例：\n\n\t12321 a aba abba aaaa tattarrattat（牛津英语词典中最长的回文单词\n\n那么如何解决这个问题呢？有很多种方法：\n\n1. Brute-Force 暴力求解：找到所有字串，一一验证，时间复杂度为 $O(n^3)$\n2. 改进版 Brute-Force：遍历整个字符串的中间字符及空隙，然后向两端扫描，时间复杂度为 $O(n^2)$。\n3. 动态规划，此处暂时不介绍\n4. 下面将要介绍的 Manacher 算法，又名***马拉车***。\n\n### Manacher 算法\n\n#### 暴力解法的缺陷所在\n\n1. 回文串奇偶性不定，使用上述方法二需要分类讨论，降低效率。\n2. 字串重复访问，时间复杂度冗余。\n\n举个例子：\n\n\tchar: a b a b a\n\t   i: 0 1 2 3 4\n\n在 $i=1$ 和 $i=2$ 时，字串 `aba` 被分别遍历了一次。\nManacher 算法正式针对这些算法进行改进的算法，可以大大提高算法的运行效率。\n\n#### 解决长度奇偶性问题\n\nManacher 算法通过一种预处理方式来解决第一个问题，它在字符串首尾及中间空隙插入一个字符，并且满足这个符号不在字符串中出现，这样就可以让所有的字符串长度变为奇数。以插入`#`为例：\n\n\taba  --> #a#b#a#\n\tabba --> #a#b#b#a#\n\n**插入的是同样的符号，且符号不存在于原串，因此子串的回文性不受影响，原来是回文的串，插完之后还是回文的，原来不是回文的，依然不会是回文**\n\n#### 解决重复访问问题\n\n我们把一个回文串中最左或最右位置的字符与其对称轴的距离称为回文半径。Manacher定义了一个回文半径数组 $RL$，用 $RL[i]$ 表示以第 $i$ 个字符为对称轴的回文串的回文半径。我们一般对字符串从左往右处理，因此这里定义 $RL[i]$ 为第 $i$ 个字符为对称轴的回文串的最右一个字符与字符 $i$ 的距离。对于上面插入分隔符之后的两个串，可以得到 $RL$ 数组：\n\n| $char$ | # | $a$ | # | $b$ | # | $a$ | # |\n|:------:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| $RL$ | $1$ | $2$ | $1$ | $4$ | $1$ | $2$ | $1$ |\n| $RL-1$ | $0$ | $1$ | $0$ | $3$ | $0$ | $1$ | $0$ |\n| $i$ | $0$ | $1$ | $2$ | $3$ | $4$ | $5$ | $6$ |\n\n上面我们还求了一下 $RL[i]-1$。通过观察可以发现，$RL[i]-1$的值，正是在原本那个没有插入过分隔符的串中，以位置i为对称轴的最长回文串的长度。那么只要我们求出了 $RL$ 数组，就能得到最长回文子串的长度。\n\n于是问题变成了，**如何高效地求的 $RL$ 数组**。基本思路是**利用回文串的对称性，扩展回文串**。\n\n我们再引入一个辅助变量 $MaxRight$，表示当前访问到的**所有回文子串**，所能触及的**最右**一个字符的位置。另外还要记录下 $MaxRight$ 对应的回文串的对称轴所在的位置，记为 $pos$，它们的位置关系如下：\n\n<div style=\"align: center\"> <img src=\"pic1.jpg\"/> </div>\n\n我们从左往右地访问字符串来求 $RL$，假设当前访问到的位置为 $i$，即要求 $RL[i]$，在对应上图，$i$ 必然是在 $pos$ 右边的。但我们更关注的是，$i$ 是在 $MaxRight$ 的左边还是右边。我们分情况来讨论：\n\n##### 情况一：$i$ 在 $MaxRight$ 左边\n\n如下图所示：\n\n<div style=\"align: center\"> <img src=\"pic2.jpg\"/> </div>\n\n我们知道，图中两个红色块之间（包括红色块）的串是回文的；并且以 $i$ 为对称轴的回文串，是与红色块间的回文串有所重叠的。我们找到 $i$ 关于 $pos$ 的对称位置 $j$，这个 $j$ 对应的 $RL[j]$ 我们是已经算过的。根据回文串的对称性，以i为对称轴的回文串和以j为对称轴的回文串，有一部分是相同的。这里又有两种细分的情况:\n\n###### 以 $j$ 为对称轴的回文串较短\n\n如下图：\n\n<div style=\"align: center\"> <img src=\"pic3.jpg\"/> </div>\n\n这时我们知道 $RL[i]$ 至少不会小于 $RL[j]$，并且已经知道了部分的以i为中心的回文串，于是可以令 $RL[i]=RL[j]$。但是以i为对称轴的回文串可能实际上更长，因此我们试着以 $i$ 为对称轴，继续往左右两边扩展，直到左右两边字符不同，或者到达边界。\n\n###### 以 $j$ 为对称轴的回文串较长\n\n如下图：\n\n<div style=\"align: center\"> <img src=\"pic4.jpg\"/> </div>\n\n这时，我们只能确定，两条蓝线之间的部分（即不超过 $MaxRight$ 的部分）是回文的，于是从这个长度开始，尝试以i为中心向左右两边扩展，，直到左右两边字符不同，或者到达边界。\n\n###### 小结\n不论以上哪种情况，之后都要尝试更新MaxRight和pos，因为有可能得到更大的MaxRight。\n\n具体操作如下：\n\n1. 令 $RL[i]=min\\lbrace RL[2\\times pos-i], MaxRight-i\\rbrace$\n2. 以 $i$ 为中心扩展回文串，直到左右两边字符不同，或者到达边界\n3. 更新 $MaxRight$ 和 $pos$\n\n##### 情况二：$i$ 在 $MaxRight$ 右边\n\n如下图：\n\n<div style=\"align: center\"> <img src=\"pic5.jpg\"/> </div>\n\n遇到这种情况，说明以 $i$ 为对称轴的回文串还没有任何一个部分被访问过，于是只能从 $i$ 的左右两边开始尝试扩展了，当左右两边字符不同，或者到达字符串边界时停止。然后更新 $MaxRight$ 和 $pos$。\n\n#### 代码实现\n\n此处以 [LeetCode 上的题](https://leetcode-cn.com/problems/longest-palindromic-substring/description/)为例：\n\n```cpp\nclass Solution {\npublic:\n\tstring longestPalindrome(string s) {\n\t\tint len = s.size();\n\t\tif (len <= 1) return s;\n\t\tstring str = preProcess(s);\n\t\tint n = str.size(), pos = 0, MaxRight = 0;\n\t\tvector<int> RL(n, 0);\n\t\tfor (int i = 1; i < n - 1; ++i) {\n\t\t\tRL[i] = MaxRight > i ? min(RL[2 * pos - i], MaxRight - i) : 1;\n\t\t\twhile (str[i + RL[i]] == str[i - RL[i]]) ++RL[i];\n\t\t\tif (i + RL[i] > MaxRight) {\n\t\t\t\tMaxRight = i + RL[i];\n\t\t\t\tpos = i;\n\t\t\t}\n\t\t}\n\t\tint maxLen = 0, index = 0;\n\t\tfor(int i = 1; i < n - 1; ++i) {\n\t\t\tif(RL[i] > maxLen) {\n\t\t\t\tmaxLen = RL[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t} // 这里可以和上面并在一起\n\t\treturn s.substr((index - maxLen) / 2, maxLen - 1);\n\t}\n\t//预处理字符串，abc预处理后变成$#a#b#c#^\n\tstring preProcess(const string &s) {\n\t\tint n = s.size();\n\t\tstring res;\n\t\tres.push_back('$');\n\t\tres.push_back('#');\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tres.push_back(s[i]);\n\t\t\tres.push_back('#');\n\t\t}\n\t\tres.push_back('^');\n\t\treturn res;\n\t}\n\t// 注：此处字符串预处理在头上加入 '$' 是为了方便处理\n\t// 如果是空间瘤患者，直接在有关的地方减一就行了\n};\n```\n### 总结\n\nManacher 算法其实可以算奇技淫巧吧，主要还是掌握它的思路，充分利用待求解问题的性质，从而降低求解的复杂度。这个也是在竞赛中会用到的技巧。\n\n---\n","slug":"算法-Manacher-算法求最长回文子串","published":1,"updated":"2018-09-16T04:14:28.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbnw0013rgc890bcvq30","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最近几次考试都涉及到了字符串处理这个话题，所以自己打算恶补字符串有关的算法，同时又刚好做到了 LeetCode 上<a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/description/\" target=\"_blank\" rel=\"noopener\">这么一道题</a>，所以干脆一同解决掉。</p>\n<a id=\"more\"></a>\n<h3 id=\"最长回文字串问题\"><a href=\"#最长回文字串问题\" class=\"headerlink\" title=\"最长回文字串问题\"></a>最长回文字串问题</h3><p><strong>最长回文子串问题：给定一个字符串，求它的最长回文子串长度。</strong><br>如果一个字符串正着读和反着读是一样的，那它就是回文串。下面是一些回文串的实例：</p>\n<pre><code>12321 a aba abba aaaa tattarrattat（牛津英语词典中最长的回文单词\n</code></pre><p>那么如何解决这个问题呢？有很多种方法：</p>\n<ol>\n<li>Brute-Force 暴力求解：找到所有字串，一一验证，时间复杂度为 $O(n^3)$</li>\n<li>改进版 Brute-Force：遍历整个字符串的中间字符及空隙，然后向两端扫描，时间复杂度为 $O(n^2)$。</li>\n<li>动态规划，此处暂时不介绍</li>\n<li>下面将要介绍的 Manacher 算法，又名<strong><em>马拉车</em></strong>。</li>\n</ol>\n<h3 id=\"Manacher-算法\"><a href=\"#Manacher-算法\" class=\"headerlink\" title=\"Manacher 算法\"></a>Manacher 算法</h3><h4 id=\"暴力解法的缺陷所在\"><a href=\"#暴力解法的缺陷所在\" class=\"headerlink\" title=\"暴力解法的缺陷所在\"></a>暴力解法的缺陷所在</h4><ol>\n<li>回文串奇偶性不定，使用上述方法二需要分类讨论，降低效率。</li>\n<li>字串重复访问，时间复杂度冗余。</li>\n</ol>\n<p>举个例子：</p>\n<pre><code>char: a b a b a\n   i: 0 1 2 3 4\n</code></pre><p>在 $i=1$ 和 $i=2$ 时，字串 <code>aba</code> 被分别遍历了一次。<br>Manacher 算法正式针对这些算法进行改进的算法，可以大大提高算法的运行效率。</p>\n<h4 id=\"解决长度奇偶性问题\"><a href=\"#解决长度奇偶性问题\" class=\"headerlink\" title=\"解决长度奇偶性问题\"></a>解决长度奇偶性问题</h4><p>Manacher 算法通过一种预处理方式来解决第一个问题，它在字符串首尾及中间空隙插入一个字符，并且满足这个符号不在字符串中出现，这样就可以让所有的字符串长度变为奇数。以插入<code>#</code>为例：</p>\n<pre><code>aba  --&gt; #a#b#a#\nabba --&gt; #a#b#b#a#\n</code></pre><p><strong>插入的是同样的符号，且符号不存在于原串，因此子串的回文性不受影响，原来是回文的串，插完之后还是回文的，原来不是回文的，依然不会是回文</strong></p>\n<h4 id=\"解决重复访问问题\"><a href=\"#解决重复访问问题\" class=\"headerlink\" title=\"解决重复访问问题\"></a>解决重复访问问题</h4><p>我们把一个回文串中最左或最右位置的字符与其对称轴的距离称为回文半径。Manacher定义了一个回文半径数组 $RL$，用 $RL[i]$ 表示以第 $i$ 个字符为对称轴的回文串的回文半径。我们一般对字符串从左往右处理，因此这里定义 $RL[i]$ 为第 $i$ 个字符为对称轴的回文串的最右一个字符与字符 $i$ 的距离。对于上面插入分隔符之后的两个串，可以得到 $RL$ 数组：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">$char$</th>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">$a$</th>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">$b$</th>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">$a$</th>\n<th style=\"text-align:center\">#</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$RL$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$2$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$4$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$2$</td>\n<td style=\"text-align:center\">$1$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$RL-1$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$3$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$0$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$i$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$2$</td>\n<td style=\"text-align:center\">$3$</td>\n<td style=\"text-align:center\">$4$</td>\n<td style=\"text-align:center\">$5$</td>\n<td style=\"text-align:center\">$6$</td>\n</tr>\n</tbody>\n</table>\n<p>上面我们还求了一下 $RL[i]-1$。通过观察可以发现，$RL[i]-1$的值，正是在原本那个没有插入过分隔符的串中，以位置i为对称轴的最长回文串的长度。那么只要我们求出了 $RL$ 数组，就能得到最长回文子串的长度。</p>\n<p>于是问题变成了，<strong>如何高效地求的 $RL$ 数组</strong>。基本思路是<strong>利用回文串的对称性，扩展回文串</strong>。</p>\n<p>我们再引入一个辅助变量 $MaxRight$，表示当前访问到的<strong>所有回文子串</strong>，所能触及的<strong>最右</strong>一个字符的位置。另外还要记录下 $MaxRight$ 对应的回文串的对称轴所在的位置，记为 $pos$，它们的位置关系如下：</p>\n<div style=\"align: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>我们从左往右地访问字符串来求 $RL$，假设当前访问到的位置为 $i$，即要求 $RL[i]$，在对应上图，$i$ 必然是在 $pos$ 右边的。但我们更关注的是，$i$ 是在 $MaxRight$ 的左边还是右边。我们分情况来讨论：</p>\n<h5 id=\"情况一：-i-在-MaxRight-左边\"><a href=\"#情况一：-i-在-MaxRight-左边\" class=\"headerlink\" title=\"情况一：$i$ 在 $MaxRight$ 左边\"></a>情况一：$i$ 在 $MaxRight$ 左边</h5><p>如下图所示：</p>\n<div style=\"align: center\"> <img src=\"pic2.jpg\"> </div>\n\n<p>我们知道，图中两个红色块之间（包括红色块）的串是回文的；并且以 $i$ 为对称轴的回文串，是与红色块间的回文串有所重叠的。我们找到 $i$ 关于 $pos$ 的对称位置 $j$，这个 $j$ 对应的 $RL[j]$ 我们是已经算过的。根据回文串的对称性，以i为对称轴的回文串和以j为对称轴的回文串，有一部分是相同的。这里又有两种细分的情况:</p>\n<h6 id=\"以-j-为对称轴的回文串较短\"><a href=\"#以-j-为对称轴的回文串较短\" class=\"headerlink\" title=\"以 $j$ 为对称轴的回文串较短\"></a>以 $j$ 为对称轴的回文串较短</h6><p>如下图：</p>\n<div style=\"align: center\"> <img src=\"pic3.jpg\"> </div>\n\n<p>这时我们知道 $RL[i]$ 至少不会小于 $RL[j]$，并且已经知道了部分的以i为中心的回文串，于是可以令 $RL[i]=RL[j]$。但是以i为对称轴的回文串可能实际上更长，因此我们试着以 $i$ 为对称轴，继续往左右两边扩展，直到左右两边字符不同，或者到达边界。</p>\n<h6 id=\"以-j-为对称轴的回文串较长\"><a href=\"#以-j-为对称轴的回文串较长\" class=\"headerlink\" title=\"以 $j$ 为对称轴的回文串较长\"></a>以 $j$ 为对称轴的回文串较长</h6><p>如下图：</p>\n<div style=\"align: center\"> <img src=\"pic4.jpg\"> </div>\n\n<p>这时，我们只能确定，两条蓝线之间的部分（即不超过 $MaxRight$ 的部分）是回文的，于是从这个长度开始，尝试以i为中心向左右两边扩展，，直到左右两边字符不同，或者到达边界。</p>\n<h6 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h6><p>不论以上哪种情况，之后都要尝试更新MaxRight和pos，因为有可能得到更大的MaxRight。</p>\n<p>具体操作如下：</p>\n<ol>\n<li>令 $RL[i]=min\\lbrace RL[2\\times pos-i], MaxRight-i\\rbrace$</li>\n<li>以 $i$ 为中心扩展回文串，直到左右两边字符不同，或者到达边界</li>\n<li>更新 $MaxRight$ 和 $pos$</li>\n</ol>\n<h5 id=\"情况二：-i-在-MaxRight-右边\"><a href=\"#情况二：-i-在-MaxRight-右边\" class=\"headerlink\" title=\"情况二：$i$ 在 $MaxRight$ 右边\"></a>情况二：$i$ 在 $MaxRight$ 右边</h5><p>如下图：</p>\n<div style=\"align: center\"> <img src=\"pic5.jpg\"> </div>\n\n<p>遇到这种情况，说明以 $i$ 为对称轴的回文串还没有任何一个部分被访问过，于是只能从 $i$ 的左右两边开始尝试扩展了，当左右两边字符不同，或者到达字符串边界时停止。然后更新 $MaxRight$ 和 $pos$。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>此处以 <a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/description/\" target=\"_blank\" rel=\"noopener\">LeetCode 上的题</a>为例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = s.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> str = preProcess(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = str.size(), pos = <span class=\"number\">0</span>, MaxRight = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; RL(n, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\tRL[i] = MaxRight &gt; i ? min(RL[<span class=\"number\">2</span> * pos - i], MaxRight - i) : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (str[i + RL[i]] == str[i - RL[i]]) ++RL[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i + RL[i] &gt; MaxRight) &#123;</span><br><span class=\"line\">\t\t\t\tMaxRight = i + RL[i];</span><br><span class=\"line\">\t\t\t\tpos = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxLen = <span class=\"number\">0</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(RL[i] &gt; maxLen) &#123;</span><br><span class=\"line\">\t\t\t\tmaxLen = RL[i];</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"comment\">// 这里可以和上面并在一起</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s.substr((index - maxLen) / <span class=\"number\">2</span>, maxLen - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//预处理字符串，abc预处理后变成$#a#b#c#^</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">preProcess</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = s.size();</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> res;</span><br><span class=\"line\">\t\tres.push_back(<span class=\"string\">'$'</span>);</span><br><span class=\"line\">\t\tres.push_back(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tres.push_back(s[i]);</span><br><span class=\"line\">\t\t\tres.push_back(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres.push_back(<span class=\"string\">'^'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 注：此处字符串预处理在头上加入 '$' 是为了方便处理</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果是空间瘤患者，直接在有关的地方减一就行了</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Manacher 算法其实可以算奇技淫巧吧，主要还是掌握它的思路，充分利用待求解问题的性质，从而降低求解的复杂度。这个也是在竞赛中会用到的技巧。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最近几次考试都涉及到了字符串处理这个话题，所以自己打算恶补字符串有关的算法，同时又刚好做到了 LeetCode 上<a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/description/\" target=\"_blank\" rel=\"noopener\">这么一道题</a>，所以干脆一同解决掉。</p>","more":"<h3 id=\"最长回文字串问题\"><a href=\"#最长回文字串问题\" class=\"headerlink\" title=\"最长回文字串问题\"></a>最长回文字串问题</h3><p><strong>最长回文子串问题：给定一个字符串，求它的最长回文子串长度。</strong><br>如果一个字符串正着读和反着读是一样的，那它就是回文串。下面是一些回文串的实例：</p>\n<pre><code>12321 a aba abba aaaa tattarrattat（牛津英语词典中最长的回文单词\n</code></pre><p>那么如何解决这个问题呢？有很多种方法：</p>\n<ol>\n<li>Brute-Force 暴力求解：找到所有字串，一一验证，时间复杂度为 $O(n^3)$</li>\n<li>改进版 Brute-Force：遍历整个字符串的中间字符及空隙，然后向两端扫描，时间复杂度为 $O(n^2)$。</li>\n<li>动态规划，此处暂时不介绍</li>\n<li>下面将要介绍的 Manacher 算法，又名<strong><em>马拉车</em></strong>。</li>\n</ol>\n<h3 id=\"Manacher-算法\"><a href=\"#Manacher-算法\" class=\"headerlink\" title=\"Manacher 算法\"></a>Manacher 算法</h3><h4 id=\"暴力解法的缺陷所在\"><a href=\"#暴力解法的缺陷所在\" class=\"headerlink\" title=\"暴力解法的缺陷所在\"></a>暴力解法的缺陷所在</h4><ol>\n<li>回文串奇偶性不定，使用上述方法二需要分类讨论，降低效率。</li>\n<li>字串重复访问，时间复杂度冗余。</li>\n</ol>\n<p>举个例子：</p>\n<pre><code>char: a b a b a\n   i: 0 1 2 3 4\n</code></pre><p>在 $i=1$ 和 $i=2$ 时，字串 <code>aba</code> 被分别遍历了一次。<br>Manacher 算法正式针对这些算法进行改进的算法，可以大大提高算法的运行效率。</p>\n<h4 id=\"解决长度奇偶性问题\"><a href=\"#解决长度奇偶性问题\" class=\"headerlink\" title=\"解决长度奇偶性问题\"></a>解决长度奇偶性问题</h4><p>Manacher 算法通过一种预处理方式来解决第一个问题，它在字符串首尾及中间空隙插入一个字符，并且满足这个符号不在字符串中出现，这样就可以让所有的字符串长度变为奇数。以插入<code>#</code>为例：</p>\n<pre><code>aba  --&gt; #a#b#a#\nabba --&gt; #a#b#b#a#\n</code></pre><p><strong>插入的是同样的符号，且符号不存在于原串，因此子串的回文性不受影响，原来是回文的串，插完之后还是回文的，原来不是回文的，依然不会是回文</strong></p>\n<h4 id=\"解决重复访问问题\"><a href=\"#解决重复访问问题\" class=\"headerlink\" title=\"解决重复访问问题\"></a>解决重复访问问题</h4><p>我们把一个回文串中最左或最右位置的字符与其对称轴的距离称为回文半径。Manacher定义了一个回文半径数组 $RL$，用 $RL[i]$ 表示以第 $i$ 个字符为对称轴的回文串的回文半径。我们一般对字符串从左往右处理，因此这里定义 $RL[i]$ 为第 $i$ 个字符为对称轴的回文串的最右一个字符与字符 $i$ 的距离。对于上面插入分隔符之后的两个串，可以得到 $RL$ 数组：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">$char$</th>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">$a$</th>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">$b$</th>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">$a$</th>\n<th style=\"text-align:center\">#</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$RL$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$2$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$4$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$2$</td>\n<td style=\"text-align:center\">$1$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$RL-1$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$3$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$0$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$i$</td>\n<td style=\"text-align:center\">$0$</td>\n<td style=\"text-align:center\">$1$</td>\n<td style=\"text-align:center\">$2$</td>\n<td style=\"text-align:center\">$3$</td>\n<td style=\"text-align:center\">$4$</td>\n<td style=\"text-align:center\">$5$</td>\n<td style=\"text-align:center\">$6$</td>\n</tr>\n</tbody>\n</table>\n<p>上面我们还求了一下 $RL[i]-1$。通过观察可以发现，$RL[i]-1$的值，正是在原本那个没有插入过分隔符的串中，以位置i为对称轴的最长回文串的长度。那么只要我们求出了 $RL$ 数组，就能得到最长回文子串的长度。</p>\n<p>于是问题变成了，<strong>如何高效地求的 $RL$ 数组</strong>。基本思路是<strong>利用回文串的对称性，扩展回文串</strong>。</p>\n<p>我们再引入一个辅助变量 $MaxRight$，表示当前访问到的<strong>所有回文子串</strong>，所能触及的<strong>最右</strong>一个字符的位置。另外还要记录下 $MaxRight$ 对应的回文串的对称轴所在的位置，记为 $pos$，它们的位置关系如下：</p>\n<div style=\"align: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>我们从左往右地访问字符串来求 $RL$，假设当前访问到的位置为 $i$，即要求 $RL[i]$，在对应上图，$i$ 必然是在 $pos$ 右边的。但我们更关注的是，$i$ 是在 $MaxRight$ 的左边还是右边。我们分情况来讨论：</p>\n<h5 id=\"情况一：-i-在-MaxRight-左边\"><a href=\"#情况一：-i-在-MaxRight-左边\" class=\"headerlink\" title=\"情况一：$i$ 在 $MaxRight$ 左边\"></a>情况一：$i$ 在 $MaxRight$ 左边</h5><p>如下图所示：</p>\n<div style=\"align: center\"> <img src=\"pic2.jpg\"> </div>\n\n<p>我们知道，图中两个红色块之间（包括红色块）的串是回文的；并且以 $i$ 为对称轴的回文串，是与红色块间的回文串有所重叠的。我们找到 $i$ 关于 $pos$ 的对称位置 $j$，这个 $j$ 对应的 $RL[j]$ 我们是已经算过的。根据回文串的对称性，以i为对称轴的回文串和以j为对称轴的回文串，有一部分是相同的。这里又有两种细分的情况:</p>\n<h6 id=\"以-j-为对称轴的回文串较短\"><a href=\"#以-j-为对称轴的回文串较短\" class=\"headerlink\" title=\"以 $j$ 为对称轴的回文串较短\"></a>以 $j$ 为对称轴的回文串较短</h6><p>如下图：</p>\n<div style=\"align: center\"> <img src=\"pic3.jpg\"> </div>\n\n<p>这时我们知道 $RL[i]$ 至少不会小于 $RL[j]$，并且已经知道了部分的以i为中心的回文串，于是可以令 $RL[i]=RL[j]$。但是以i为对称轴的回文串可能实际上更长，因此我们试着以 $i$ 为对称轴，继续往左右两边扩展，直到左右两边字符不同，或者到达边界。</p>\n<h6 id=\"以-j-为对称轴的回文串较长\"><a href=\"#以-j-为对称轴的回文串较长\" class=\"headerlink\" title=\"以 $j$ 为对称轴的回文串较长\"></a>以 $j$ 为对称轴的回文串较长</h6><p>如下图：</p>\n<div style=\"align: center\"> <img src=\"pic4.jpg\"> </div>\n\n<p>这时，我们只能确定，两条蓝线之间的部分（即不超过 $MaxRight$ 的部分）是回文的，于是从这个长度开始，尝试以i为中心向左右两边扩展，，直到左右两边字符不同，或者到达边界。</p>\n<h6 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h6><p>不论以上哪种情况，之后都要尝试更新MaxRight和pos，因为有可能得到更大的MaxRight。</p>\n<p>具体操作如下：</p>\n<ol>\n<li>令 $RL[i]=min\\lbrace RL[2\\times pos-i], MaxRight-i\\rbrace$</li>\n<li>以 $i$ 为中心扩展回文串，直到左右两边字符不同，或者到达边界</li>\n<li>更新 $MaxRight$ 和 $pos$</li>\n</ol>\n<h5 id=\"情况二：-i-在-MaxRight-右边\"><a href=\"#情况二：-i-在-MaxRight-右边\" class=\"headerlink\" title=\"情况二：$i$ 在 $MaxRight$ 右边\"></a>情况二：$i$ 在 $MaxRight$ 右边</h5><p>如下图：</p>\n<div style=\"align: center\"> <img src=\"pic5.jpg\"> </div>\n\n<p>遇到这种情况，说明以 $i$ 为对称轴的回文串还没有任何一个部分被访问过，于是只能从 $i$ 的左右两边开始尝试扩展了，当左右两边字符不同，或者到达字符串边界时停止。然后更新 $MaxRight$ 和 $pos$。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>此处以 <a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/description/\" target=\"_blank\" rel=\"noopener\">LeetCode 上的题</a>为例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = s.size();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> str = preProcess(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = str.size(), pos = <span class=\"number\">0</span>, MaxRight = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; RL(n, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\tRL[i] = MaxRight &gt; i ? min(RL[<span class=\"number\">2</span> * pos - i], MaxRight - i) : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (str[i + RL[i]] == str[i - RL[i]]) ++RL[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i + RL[i] &gt; MaxRight) &#123;</span><br><span class=\"line\">\t\t\t\tMaxRight = i + RL[i];</span><br><span class=\"line\">\t\t\t\tpos = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxLen = <span class=\"number\">0</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(RL[i] &gt; maxLen) &#123;</span><br><span class=\"line\">\t\t\t\tmaxLen = RL[i];</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"comment\">// 这里可以和上面并在一起</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s.substr((index - maxLen) / <span class=\"number\">2</span>, maxLen - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//预处理字符串，abc预处理后变成$#a#b#c#^</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">preProcess</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = s.size();</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> res;</span><br><span class=\"line\">\t\tres.push_back(<span class=\"string\">'$'</span>);</span><br><span class=\"line\">\t\tres.push_back(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tres.push_back(s[i]);</span><br><span class=\"line\">\t\t\tres.push_back(<span class=\"string\">'#'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres.push_back(<span class=\"string\">'^'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 注：此处字符串预处理在头上加入 '$' 是为了方便处理</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果是空间瘤患者，直接在有关的地方减一就行了</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Manacher 算法其实可以算奇技淫巧吧，主要还是掌握它的思路，充分利用待求解问题的性质，从而降低求解的复杂度。这个也是在竞赛中会用到的技巧。</p>\n<hr>"},{"title":"[算法] RMQ 问题与 ST 算法","date":"2018-08-11T08:31:36.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n因为很多次模拟测试都败在区间最值问题（RMQ）上，所以决定开一篇博客好好总结一下。本篇文章着重介绍 RMQ 问题中最著名的 ST 算法。\n<!-- more -->\n\n### RMQ 问题\n\n给定一个长度为 $N$ 的数列 $A$，然后进行若干次询问，每次给定一个区间 $[l_i,r_i]$ 求这个区间中的最大或最小值，这就是区间最值问题，也就是 RMQ 问题。一般来说，这样的问题都要求区间的查询是在线的，也就是提出一个查询回答一次，不能全部收到后统一回答。对于某些确定区间求最值的问题，通常采用倍增的方法来求解。而 ST 算法其实就是倍增的产物，同时加入了动态规划的思想。\n\n### ST 算法\n\n在 RMQ 问题中，ST 算法可以在 $O(NlogN)$ 的时间预处理数据后，以 $O(1)$ 的时间在线回答查询。一个序列的子空间个数显然有 $O(N^2)$ 个，我们首先在这个规模为 $O(N^2)$ 的状态空间中选择一些 $2$ 的整数次幂的位置作为代表值。\n\n设 $F[i,j]$ 表示子空间 $A$ 中下标在在子区间 $[i,i+2^j-1]$ 里数的最大值，即从 $i$ 开始的 $2^j$ 个数的最大值。显然 $F[i,0]=A[i]$，即数列 $A$ 在子区间 $[i,i]$ 中的最大值。\n\n递推时，我们将子区间长度成倍增长，公式如下：\n\n$$F[i,j]=max\\lbrace F[i,j-1],F[i+2^{j-1},j-1] \\rbrace$$\n\n即长度为 $2^j$ 的子区间的最大值是左右两半长度为 $2^{j-1}$ 的子区间的最大值中较大的那一个。所以我们先预处理我们要用到的数组：\n\n```cpp\nvoid STprework() {\n\tfor (int i = 1; i <= n; ++i) f[i][0] = a[i];\n\tint t = log(n) / log(2) + 1;\n\tfor (int j = 1; j < t; ++j)\n\t\tfor (int i = 1; i <= n - (1 << j) + 1; ++i)\n\t\t\tf[i][j] = max(f[i][j - 1], f[i + (1 << (j - 1))][j - 1]);\n}\n```\n\n当我们要查询区间 $[l,r]$ 的最值时，我们先计算出一个 $k$，满足 $2^k < r-l+1 \\leqslant 2^{k+1}$，也就是使二的 $k$ 次幂小于区间长度的前提下最大的 $k$。那么“从 $l$ 开始的 $2^k$ 个数”和“以 $r$ 结尾的 $2^k$ 个数” 这两段一定覆盖了原来的整个区间，这两段的最大值分别为 $F[l,k]$ 和 $F[r-2^k+1,k]$，二者中较大的就是整个区间的最值。因为求的是最大值，所以只要覆盖区间就行，重叠是没有关系的。\n\n```cpp\nint STquery(int l, int r) {\n\tint k = log(r - l + 1) / log(2);\n\treturn max(f[l][k], f[r - (1 << k) + 1][k]);\n}\n```\n\n如果要进一步提高执行效率，可以将 $f$ 数组的两个维度交换，这样对缓存更加友好。并且可以预处理出 $1 \\thicksim n$ 中 $log_2 n$ 的值，甚至是各个区间对应的 $k$ 的值，具体方法视情况而定。\n\n### 总结\n\n1. 为什么使用 `log()` 函数而不是 `log2()` 呢，原因是前者效率更快，而且众所周知，对数是有换底公式的（啥？你不知道？赶紧补一下高中数学必修一吧！），所以这里效率会高一点\n2. [ST 表的模板题地址——洛谷 p3865](https://www.luogu.org/problemnew/show/P3865)\n\n附上完整代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 110000\n#define max(a, b) (a > b ? a : b)\n#define G(a) putchar(a + 48)\nint n, m, A[maxn];\nint li, ri;\nint f[21][maxn];\nint logn[maxn];\n\ninline int read() {\n\tint ans = 0;\n\tchar c;\n\tbool sign = false;\n\twhile (!isdigit(c = getchar()) && c != '-');\n\tif (c == '-') {\n\t\tsign = true;\n\t\tc = getchar();\n\t}\n\tdo {\n\t\tans = (ans << 3) + (ans << 1) + (c - '0');\n\t} while (isdigit(c = getchar()));\n\treturn sign ? -ans : ans;\n}\n\n\ninline void write(int s){\n\tif (s < 0) {\n\t\tG(-3);\n\t\ts = -s;\n\t}\n\tif (s > 9) write(s / 10);\n\tG(s % 10);\n}\n\nvoid STprework() {\n\tfor (int i = 1; i <= n; ++i) f[0][i] = A[i];\n\tint t = logn[n] + 1;\n\tfor (int j = 1; j < t; ++j)\n\t\tfor (int i = 1; i <= n - (1 << j) + 1; ++i)\n\t\t\tf[j][i] = max(f[j - 1][i], f[j - 1][i + (1 << (j - 1))]);\n}\n\nint STquery(int l, int r) {\n\tint k = logn[r - l + 1];\n\treturn max(f[k][l], f[k][r - (1 << k) + 1]);\n}\n\nvoid pre() {\n\tlogn[1] = 0;\n\tlogn[2] = 1;\n\tfor (int i = 3; i <= n; ++i) logn[i] = logn[i / 2] + 1;\n}\nint main() {\n\tn = read();\n\tm = read();\n\tfor (int i = 1; i <= n; ++i) A[i] = read();\n\tpre();\n\tSTprework();\n\tfor (int i = 1; i <= m; ++i) {\n\t\tli = read();\n\t\tri = read();\n\t\twrite(STquery(li, ri));\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n---","source":"_posts/算法-RMQ-问题与-ST-算法.md","raw":"---\ntitle: '[算法] RMQ 问题与 ST 算法'\ndate: 2018-08-11 16:31:36\ntags:\n\t- 算法\n\t- RMQ 问题\n\t- ST 算法\ncategories: 算法\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n因为很多次模拟测试都败在区间最值问题（RMQ）上，所以决定开一篇博客好好总结一下。本篇文章着重介绍 RMQ 问题中最著名的 ST 算法。\n<!-- more -->\n\n### RMQ 问题\n\n给定一个长度为 $N$ 的数列 $A$，然后进行若干次询问，每次给定一个区间 $[l_i,r_i]$ 求这个区间中的最大或最小值，这就是区间最值问题，也就是 RMQ 问题。一般来说，这样的问题都要求区间的查询是在线的，也就是提出一个查询回答一次，不能全部收到后统一回答。对于某些确定区间求最值的问题，通常采用倍增的方法来求解。而 ST 算法其实就是倍增的产物，同时加入了动态规划的思想。\n\n### ST 算法\n\n在 RMQ 问题中，ST 算法可以在 $O(NlogN)$ 的时间预处理数据后，以 $O(1)$ 的时间在线回答查询。一个序列的子空间个数显然有 $O(N^2)$ 个，我们首先在这个规模为 $O(N^2)$ 的状态空间中选择一些 $2$ 的整数次幂的位置作为代表值。\n\n设 $F[i,j]$ 表示子空间 $A$ 中下标在在子区间 $[i,i+2^j-1]$ 里数的最大值，即从 $i$ 开始的 $2^j$ 个数的最大值。显然 $F[i,0]=A[i]$，即数列 $A$ 在子区间 $[i,i]$ 中的最大值。\n\n递推时，我们将子区间长度成倍增长，公式如下：\n\n$$F[i,j]=max\\lbrace F[i,j-1],F[i+2^{j-1},j-1] \\rbrace$$\n\n即长度为 $2^j$ 的子区间的最大值是左右两半长度为 $2^{j-1}$ 的子区间的最大值中较大的那一个。所以我们先预处理我们要用到的数组：\n\n```cpp\nvoid STprework() {\n\tfor (int i = 1; i <= n; ++i) f[i][0] = a[i];\n\tint t = log(n) / log(2) + 1;\n\tfor (int j = 1; j < t; ++j)\n\t\tfor (int i = 1; i <= n - (1 << j) + 1; ++i)\n\t\t\tf[i][j] = max(f[i][j - 1], f[i + (1 << (j - 1))][j - 1]);\n}\n```\n\n当我们要查询区间 $[l,r]$ 的最值时，我们先计算出一个 $k$，满足 $2^k < r-l+1 \\leqslant 2^{k+1}$，也就是使二的 $k$ 次幂小于区间长度的前提下最大的 $k$。那么“从 $l$ 开始的 $2^k$ 个数”和“以 $r$ 结尾的 $2^k$ 个数” 这两段一定覆盖了原来的整个区间，这两段的最大值分别为 $F[l,k]$ 和 $F[r-2^k+1,k]$，二者中较大的就是整个区间的最值。因为求的是最大值，所以只要覆盖区间就行，重叠是没有关系的。\n\n```cpp\nint STquery(int l, int r) {\n\tint k = log(r - l + 1) / log(2);\n\treturn max(f[l][k], f[r - (1 << k) + 1][k]);\n}\n```\n\n如果要进一步提高执行效率，可以将 $f$ 数组的两个维度交换，这样对缓存更加友好。并且可以预处理出 $1 \\thicksim n$ 中 $log_2 n$ 的值，甚至是各个区间对应的 $k$ 的值，具体方法视情况而定。\n\n### 总结\n\n1. 为什么使用 `log()` 函数而不是 `log2()` 呢，原因是前者效率更快，而且众所周知，对数是有换底公式的（啥？你不知道？赶紧补一下高中数学必修一吧！），所以这里效率会高一点\n2. [ST 表的模板题地址——洛谷 p3865](https://www.luogu.org/problemnew/show/P3865)\n\n附上完整代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 110000\n#define max(a, b) (a > b ? a : b)\n#define G(a) putchar(a + 48)\nint n, m, A[maxn];\nint li, ri;\nint f[21][maxn];\nint logn[maxn];\n\ninline int read() {\n\tint ans = 0;\n\tchar c;\n\tbool sign = false;\n\twhile (!isdigit(c = getchar()) && c != '-');\n\tif (c == '-') {\n\t\tsign = true;\n\t\tc = getchar();\n\t}\n\tdo {\n\t\tans = (ans << 3) + (ans << 1) + (c - '0');\n\t} while (isdigit(c = getchar()));\n\treturn sign ? -ans : ans;\n}\n\n\ninline void write(int s){\n\tif (s < 0) {\n\t\tG(-3);\n\t\ts = -s;\n\t}\n\tif (s > 9) write(s / 10);\n\tG(s % 10);\n}\n\nvoid STprework() {\n\tfor (int i = 1; i <= n; ++i) f[0][i] = A[i];\n\tint t = logn[n] + 1;\n\tfor (int j = 1; j < t; ++j)\n\t\tfor (int i = 1; i <= n - (1 << j) + 1; ++i)\n\t\t\tf[j][i] = max(f[j - 1][i], f[j - 1][i + (1 << (j - 1))]);\n}\n\nint STquery(int l, int r) {\n\tint k = logn[r - l + 1];\n\treturn max(f[k][l], f[k][r - (1 << k) + 1]);\n}\n\nvoid pre() {\n\tlogn[1] = 0;\n\tlogn[2] = 1;\n\tfor (int i = 3; i <= n; ++i) logn[i] = logn[i / 2] + 1;\n}\nint main() {\n\tn = read();\n\tm = read();\n\tfor (int i = 1; i <= n; ++i) A[i] = read();\n\tpre();\n\tSTprework();\n\tfor (int i = 1; i <= m; ++i) {\n\t\tli = read();\n\t\tri = read();\n\t\twrite(STquery(li, ri));\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n---","slug":"算法-RMQ-问题与-ST-算法","published":1,"updated":"2018-09-16T04:14:28.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbny0016rgc8l4kh0avt","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>因为很多次模拟测试都败在区间最值问题（RMQ）上，所以决定开一篇博客好好总结一下。本篇文章着重介绍 RMQ 问题中最著名的 ST 算法。<br><a id=\"more\"></a></p>\n<h3 id=\"RMQ-问题\"><a href=\"#RMQ-问题\" class=\"headerlink\" title=\"RMQ 问题\"></a>RMQ 问题</h3><p>给定一个长度为 $N$ 的数列 $A$，然后进行若干次询问，每次给定一个区间 $[l_i,r_i]$ 求这个区间中的最大或最小值，这就是区间最值问题，也就是 RMQ 问题。一般来说，这样的问题都要求区间的查询是在线的，也就是提出一个查询回答一次，不能全部收到后统一回答。对于某些确定区间求最值的问题，通常采用倍增的方法来求解。而 ST 算法其实就是倍增的产物，同时加入了动态规划的思想。</p>\n<h3 id=\"ST-算法\"><a href=\"#ST-算法\" class=\"headerlink\" title=\"ST 算法\"></a>ST 算法</h3><p>在 RMQ 问题中，ST 算法可以在 $O(NlogN)$ 的时间预处理数据后，以 $O(1)$ 的时间在线回答查询。一个序列的子空间个数显然有 $O(N^2)$ 个，我们首先在这个规模为 $O(N^2)$ 的状态空间中选择一些 $2$ 的整数次幂的位置作为代表值。</p>\n<p>设 $F[i,j]$ 表示子空间 $A$ 中下标在在子区间 $[i,i+2^j-1]$ 里数的最大值，即从 $i$ 开始的 $2^j$ 个数的最大值。显然 $F[i,0]=A[i]$，即数列 $A$ 在子区间 $[i,i]$ 中的最大值。</p>\n<p>递推时，我们将子区间长度成倍增长，公式如下：</p>\n<p>$$F[i,j]=max\\lbrace F[i,j-1],F[i+2^{j-1},j-1] \\rbrace$$</p>\n<p>即长度为 $2^j$ 的子区间的最大值是左右两半长度为 $2^{j-1}$ 的子区间的最大值中较大的那一个。所以我们先预处理我们要用到的数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">STprework</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) f[i][<span class=\"number\">0</span>] = a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = <span class=\"built_in\">log</span>(n) / <span class=\"built_in\">log</span>(<span class=\"number\">2</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; t; ++j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">\t\t\tf[i][j] = max(f[i][j - <span class=\"number\">1</span>], f[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们要查询区间 $[l,r]$ 的最值时，我们先计算出一个 $k$，满足 $2^k &lt; r-l+1 \\leqslant 2^{k+1}$，也就是使二的 $k$ 次幂小于区间长度的前提下最大的 $k$。那么“从 $l$ 开始的 $2^k$ 个数”和“以 $r$ 结尾的 $2^k$ 个数” 这两段一定覆盖了原来的整个区间，这两段的最大值分别为 $F[l,k]$ 和 $F[r-2^k+1,k]$，二者中较大的就是整个区间的最值。因为求的是最大值，所以只要覆盖区间就行，重叠是没有关系的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">STquery</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = <span class=\"built_in\">log</span>(r - l + <span class=\"number\">1</span>) / <span class=\"built_in\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max(f[l][k], f[r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要进一步提高执行效率，可以将 $f$ 数组的两个维度交换，这样对缓存更加友好。并且可以预处理出 $1 \\thicksim n$ 中 $log_2 n$ 的值，甚至是各个区间对应的 $k$ 的值，具体方法视情况而定。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>为什么使用 <code>log()</code> 函数而不是 <code>log2()</code> 呢，原因是前者效率更快，而且众所周知，对数是有换底公式的（啥？你不知道？赶紧补一下高中数学必修一吧！），所以这里效率会高一点</li>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3865\" target=\"_blank\" rel=\"noopener\">ST 表的模板题地址——洛谷 p3865</a></li>\n</ol>\n<p>附上完整代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> G(a) putchar(a + 48)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, A[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> li, ri;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">21</span>][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> logn[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c = getchar()) &amp;&amp; c != <span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">\t\tsign = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tc = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\tans = (ans &lt;&lt; <span class=\"number\">3</span>) + (ans &lt;&lt; <span class=\"number\">1</span>) + (c - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c = getchar()));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sign ? -ans : ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tG(<span class=\"number\">-3</span>);</span><br><span class=\"line\">\t\ts = -s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s &gt; <span class=\"number\">9</span>) write(s / <span class=\"number\">10</span>);</span><br><span class=\"line\">\tG(s % <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">STprework</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) f[<span class=\"number\">0</span>][i] = A[i];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = logn[n] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; t; ++j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">\t\t\tf[j][i] = max(f[j - <span class=\"number\">1</span>][i], f[j - <span class=\"number\">1</span>][i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">STquery</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = logn[r - l + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max(f[k][l], f[k][r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tlogn[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tlogn[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; ++i) logn[i] = logn[i / <span class=\"number\">2</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tn = read();</span><br><span class=\"line\">\tm = read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) A[i] = read();</span><br><span class=\"line\">\tpre();</span><br><span class=\"line\">\tSTprework();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\tli = read();</span><br><span class=\"line\">\t\tri = read();</span><br><span class=\"line\">\t\twrite(STquery(li, ri));</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>因为很多次模拟测试都败在区间最值问题（RMQ）上，所以决定开一篇博客好好总结一下。本篇文章着重介绍 RMQ 问题中最著名的 ST 算法。<br>","more":"</p>\n<h3 id=\"RMQ-问题\"><a href=\"#RMQ-问题\" class=\"headerlink\" title=\"RMQ 问题\"></a>RMQ 问题</h3><p>给定一个长度为 $N$ 的数列 $A$，然后进行若干次询问，每次给定一个区间 $[l_i,r_i]$ 求这个区间中的最大或最小值，这就是区间最值问题，也就是 RMQ 问题。一般来说，这样的问题都要求区间的查询是在线的，也就是提出一个查询回答一次，不能全部收到后统一回答。对于某些确定区间求最值的问题，通常采用倍增的方法来求解。而 ST 算法其实就是倍增的产物，同时加入了动态规划的思想。</p>\n<h3 id=\"ST-算法\"><a href=\"#ST-算法\" class=\"headerlink\" title=\"ST 算法\"></a>ST 算法</h3><p>在 RMQ 问题中，ST 算法可以在 $O(NlogN)$ 的时间预处理数据后，以 $O(1)$ 的时间在线回答查询。一个序列的子空间个数显然有 $O(N^2)$ 个，我们首先在这个规模为 $O(N^2)$ 的状态空间中选择一些 $2$ 的整数次幂的位置作为代表值。</p>\n<p>设 $F[i,j]$ 表示子空间 $A$ 中下标在在子区间 $[i,i+2^j-1]$ 里数的最大值，即从 $i$ 开始的 $2^j$ 个数的最大值。显然 $F[i,0]=A[i]$，即数列 $A$ 在子区间 $[i,i]$ 中的最大值。</p>\n<p>递推时，我们将子区间长度成倍增长，公式如下：</p>\n<p>$$F[i,j]=max\\lbrace F[i,j-1],F[i+2^{j-1},j-1] \\rbrace$$</p>\n<p>即长度为 $2^j$ 的子区间的最大值是左右两半长度为 $2^{j-1}$ 的子区间的最大值中较大的那一个。所以我们先预处理我们要用到的数组：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">STprework</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) f[i][<span class=\"number\">0</span>] = a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = <span class=\"built_in\">log</span>(n) / <span class=\"built_in\">log</span>(<span class=\"number\">2</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; t; ++j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">\t\t\tf[i][j] = max(f[i][j - <span class=\"number\">1</span>], f[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们要查询区间 $[l,r]$ 的最值时，我们先计算出一个 $k$，满足 $2^k &lt; r-l+1 \\leqslant 2^{k+1}$，也就是使二的 $k$ 次幂小于区间长度的前提下最大的 $k$。那么“从 $l$ 开始的 $2^k$ 个数”和“以 $r$ 结尾的 $2^k$ 个数” 这两段一定覆盖了原来的整个区间，这两段的最大值分别为 $F[l,k]$ 和 $F[r-2^k+1,k]$，二者中较大的就是整个区间的最值。因为求的是最大值，所以只要覆盖区间就行，重叠是没有关系的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">STquery</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = <span class=\"built_in\">log</span>(r - l + <span class=\"number\">1</span>) / <span class=\"built_in\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max(f[l][k], f[r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要进一步提高执行效率，可以将 $f$ 数组的两个维度交换，这样对缓存更加友好。并且可以预处理出 $1 \\thicksim n$ 中 $log_2 n$ 的值，甚至是各个区间对应的 $k$ 的值，具体方法视情况而定。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>为什么使用 <code>log()</code> 函数而不是 <code>log2()</code> 呢，原因是前者效率更快，而且众所周知，对数是有换底公式的（啥？你不知道？赶紧补一下高中数学必修一吧！），所以这里效率会高一点</li>\n<li><a href=\"https://www.luogu.org/problemnew/show/P3865\" target=\"_blank\" rel=\"noopener\">ST 表的模板题地址——洛谷 p3865</a></li>\n</ol>\n<p>附上完整代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> G(a) putchar(a + 48)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, A[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> li, ri;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">21</span>][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> logn[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(c = getchar()) &amp;&amp; c != <span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">\t\tsign = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tc = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\tans = (ans &lt;&lt; <span class=\"number\">3</span>) + (ans &lt;&lt; <span class=\"number\">1</span>) + (c - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(c = getchar()));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sign ? -ans : ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tG(<span class=\"number\">-3</span>);</span><br><span class=\"line\">\t\ts = -s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s &gt; <span class=\"number\">9</span>) write(s / <span class=\"number\">10</span>);</span><br><span class=\"line\">\tG(s % <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">STprework</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) f[<span class=\"number\">0</span>][i] = A[i];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = logn[n] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; t; ++j)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">\t\t\tf[j][i] = max(f[j - <span class=\"number\">1</span>][i], f[j - <span class=\"number\">1</span>][i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">STquery</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = logn[r - l + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max(f[k][l], f[k][r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tlogn[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tlogn[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; ++i) logn[i] = logn[i / <span class=\"number\">2</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tn = read();</span><br><span class=\"line\">\tm = read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) A[i] = read();</span><br><span class=\"line\">\tpre();</span><br><span class=\"line\">\tSTprework();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\tli = read();</span><br><span class=\"line\">\t\tri = read();</span><br><span class=\"line\">\t\twrite(STquery(li, ri));</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"[HEXO] NexT 主题提高博客颜值","date":"2018-08-30T12:37:23.000Z","mathjax":true,"copyright":true,"comment":true,"_content":"\n{% note default %}\n今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。\n{% endnote %}\n\n<!-- more -->\n\n### 文章的模板文件\n\n为了每次更新方便，我直接改了 `blog/scaffolds/` 下的 `post.md`，每次生成的时候模板就都有了，不需要自己再去弄。这个是我的模板：\n\n```md\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ncategories:\nmathjax: true\ncopyright: true\ncomment: true\nphoto: \n---\n\n{% note default %}\n{% endnote %}\n\n<!-- more -->\n\n---\n```\n说明一下，这个 `note` 要在 `next\\_config.yml` 中开启才可以写。下面会讲到。`photo` 是文章开头的图片，就像这篇文章开头那样，注意一定要加绝对路径，比如我这张图片存在文章的文件夹下，那么路径就是 `/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg`。`copyright` 这一项也是要开启之后才行，我的博客的 copyright 是自己重新写的，后面会讲到。最后这个 `---` 是结束符，和最后的结束语一起用。\n\n### Markdown 技巧与内置样式\n\n[基础的语法](https://segmentfault.com/markdown)就不提了，点进来的应该都会了。这里就讲讲一些技巧。\n\n#### 编辑器\n\n我用的 Markdown 编辑器是 [Typora](https://typora.io/)，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器\n\n#### 分隔线和空行\n\n```md\n这是文字\n<hr />\n上面是分隔线\n<br />\n上面是空行\n```\n效果如下：\n\n这是文字\n<hr />\n上面是分隔线\n<br />\n上面是空行\n\n#### 引用\n\n```md\n<blockquote>引用内容</blockquote>\n<!-- 如果前后间隙很小，可以像下面这样写 -->\n<p><blockquote>引用内容</blockquote></p>\n```\n效果如下：\n<blockquote>引用内容</blockquote>\n<p><blockquote>引用内容</blockquote></p>\n\n#### 居中和右对齐\n```md\n<!-- 居中 -->\n<center>内容</center>\n<!-- 右对齐 -->\n<div style=\"text-align:right\">内容</div>\n```\n效果如下：\n<center>内容</center>\n<div style=\"text-align:right\">内容</div>\n\n#### 字体大小和颜色\n\n```md\n<font color=\"#187892\" size=\"number\">内容</font>\n<!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp -->\n```\n效果如下：\n<font color=\"#187892\" size=\"number\">内容</font>\n\n#### Todo list\n\n```md\n<ul>\n<li><i class=\"fa fa-check-square\"></i> 已完成</li>\n<li><i class=\"fa fa-square\"></i> 未完成</li>\n</ul>\n```\n效果如下：\n<ul>\n<li><i class=\"fa fa-check-square\"></i> 已完成</li>\n<li><i class=\"fa fa-square\"></i> 未完成</li>\n</ul>\n\n#### Note 嵌套 Todo list\n\n```md\n<!-- 一共有两种写法，效果看下面 -->\n<div class=\"note primary\">\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n</div>\n<div class=\"note primary\">\n  <p>\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n  </p>\n</div>\n```\n效果如下：\n<div class=\"note primary\">\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n</div>\n<div class=\"note primary\">\n  <p>\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n  </p>\n</div>\n\n这两个写法熟悉 HTML 的同学应该是明白的，这里~~因为我太菜了~~就不讲了。主要说一下 `<i class=\"fa fa-square\"></i>` 是从 [Font Awesome](https://fontawesome.com/) 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。\n\n#### Font Awesome\n\nFont Awesome 更多的使用可以看[官网示例](https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css)，这里讲一个放大图标的方法\n\n```md\n<i class=\"fa fa-download\"></i> 普通\n<i class=\"fa fa-download fa-lg\"></i> 变大 33%\n<i class=\"fa fa-download fa-2x\"></i> 两倍大\n```\n效果如下：\n<i class=\"fa fa-download\"></i> 普通\n<i class=\"fa fa-download fa-lg\"></i> 变大 33%\n<i class=\"fa fa-download fa-2x\"></i> 两倍大\n\n#### 代码高亮\n\n主题自带样式 代码块高亮\n```\n```[language] [title] [url] [link-text]\n`代码`\n```\n`[language]` 是代码语言的名称，用来设置代码块颜色高亮，非必须；\n`[title]` 是顶部左边的说明，非必须；\n`[url]` 是顶部右边的超链接地址，非必须；\n`[link text]` 如它的字面意思，超链接的名称，非必须。\n亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加 `[]` 了，要这样写：`[] [] [url] [link text]`。\n\n首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：\n```yml\n# Code Highlight theme\n# Available value:\n#    normal | night | night eighties | night blue | night bright\n# https://github.com/chriskempson/tomorrow-theme\n\nhighlight_theme: night eighties\n```\n要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看[这篇文章](https://almostover.ru/2016-07/hexo-highlight-code-styles/)。当然，如果你和我一样懒，可以在站点配置文件 `_config.yml` 中设置自动高亮（不过这个自动高亮似乎有问题，不建议打开）：\n```diff\nhighlight:\n  enable: true\n  line_number: true\n# 代码自动高亮\n-  auto_detect: false\n+  auto_detect: true\n```\n从网上找到的一个文本效果如下（别跟我说你不知道 `diff` 是什么）：\n```diff\nIndex: languages/ini.js\n===================================================================\n--- languages/ini.js    (revision 199)\n+++ languages/ini.js    (revision 200)\n@@ -1,8 +1,7 @@\n hljs.LANGUAGES.ini =\n {\n-   case_insensitive: true,\n-  defaultMode:\n   {\n+  defaultMode: {\n-     contains: ['comment', 'title', 'setting'],\n+     illegal: '[^\\\\s]'\n+   },\n*** /path/to/original timestamp\n--- /path/to/new      timestamp\n***************\n*** 1,3 ****\n--- 1,9 ----\n+ This is an important\n+ notice! It should\n+ therefore be located at\n+ the beginning of this\n+ document!\n! compress the size of the\n! changes.\n  It is important to spell\n\n```\n代码仅仅高亮肯定是不够地，代码块地功能也很重要，比如复制这个功能。只要在 `_config.yml` 里打开就行啦：\n```yml\ncodeblock:\n  # Manual define the border radius in codeblock\n  # Leave it empty for the default 1\n  border_radius: 3\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    # Show text copy result\n    show_result: true\n```\n\n#### Note 标签\n\n在主题配置文件_config.yml里有一个关于这个的配置:\n```yml\n# Note tag (bs-callout).\nnote:\n  # 风格\n  style: flat\n  # 要不要图标\n  icons: true\n  # 圆角矩形\n  border_radius: 3\n  light_bg_offset: 0\n```\n\n用 HTML 写就是这个样子\n```html\n<div class=\"note default\"><p>default</p></div>\n<div class=\"note primary\"><p>primary</p></div>\n<div class=\"note success\"><p>success</p></div>\n<div class=\"note info\"><p>info</p></div>\n<div class=\"note warning\"><p>warning</p></div>\n<div class=\"note danger\"><p>danger</p></div>\n<div class=\"note danger no-icon\"><p>danger no-icon</p></div>\n```\n用 swig 语法写就是这样\n\n```\n{% note [class] %}\nAny content (support inline tags too).\n{% endnote %}\n[class] : default | primary | success | info | warning | danger.\n          May be not defined.\n\n```\n里面的三种风格长啥样？开启图标长啥样？可以查看[这个页面](https://github.com/iissnan/hexo-theme-next/pull/1697)，更多的介绍也在这个页面，请自行查看\n\n最后的几种效果：\n<div class=\"note default\"><p>default</p></div>\n<div class=\"note primary\"><p>primary</p></div>\n<div class=\"note success\"><p>success</p></div>\n<div class=\"note info\"><p>info</p></div>\n<div class=\"note warning\"><p>warning</p></div>\n<div class=\"note danger\"><p>danger</p></div>\n<div class=\"note danger no-icon\"><p>danger no-icon</p></div>\n\n#### Label 标签\n`label` 标签不建议加在段首, 首先可以在主题配置文件中有配置：\n```\n# Label tag.\nlabel: true\n```\n然后效果如下（`@`前面的是label的名字，后面的是要显示的文字）\n\n{% label default@default %}\n```\n{% label default@default %}\n```\n{% label primary@primary %}\n```\n{% label primary@primary %}\n```\n{% label success@success %}\n```\n{% label success@success %}\n```\n{% label info@info %}\n```\n{% label info@info %}\n```\n{% label warning@warning %}\n```\n{% label warning@warning %}\n```\n{% label danger@danger %}\n```\n{% label danger@danger %}\n```\n\n#### Tab 选项卡\n\n当然也是要先配置一下：\n```yml\n# Tabs tag.\ntabs:\n  enable: true\n  transition:\n    tabs: true\n    labels: true\n  border_radius: 3\n```\n代码如下：\n```\n{% tabs 选项卡, 2 %}\n<!-- tab -->\n**这是选项卡 1** 呵呵哈哈哈哈哈哈\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 2** 额。。。\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 3** 哇，你找到我了！\n<!-- endtab -->\n{% endtabs %}\n```\n效果如下：\n{% tabs 选项卡, 2 %}\n<!-- tab -->\n**这是选项卡 1** 呵呵哈哈哈哈哈哈\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 2** 额。。。\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 3** 哇，你找到我了！\n<!-- endtab -->\n{% endtabs %}\n\n上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。\n\n#### 按钮样式\n代码如下：\n```\n{% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %}\n```\n效果如下：\n\n{% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %}\n\n### 更多的主题配置\n\n#### 返回顶部按钮与阅读进度\n\n在 `next/_config.yml` 里找到 `b2t` 这个地方进行如下配置：\n```yml\n  # Back to top in sidebar (only for Pisces | Gemini).\n  b2t: true\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n\n#### 添加 RSS 订阅\n\n首先安装一个模块\n```bash\n$ npm install hexo-generator-feed --save\n```\n然后在**根目录**下的 `_config.yml` 里添加：\n```yml\nplugins: hexo-generate-feed\n```\n最后在 `next\\_config.yml` 里配置：\n```yml\n# Set rss to false to disable feed link.\n# Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.\n# Set rss to specific value if you have burned your feed already.\nrss: /atom.xml\n```\n重新生成就可以使用 RSS 了。\n\n### 评论系统重配置\n\n以前用的是 Disqus，然而需要翻墙，所以决定换成 Valine。这个 Valine 要先在 [LeanCloud](https://leancloud.cn/) 里注册并创建一个应用，这里就不再赘述.然后在 `next\\_config.yml` 里配置。注意：得在 `LeanCloud -> 应用 -> 设置 -> 应用 Key` 中把 AppID 和 AppKey 给复制到 `next\\_config.yml` 里面去，并且在 `LeanCloud -> 应用 -> 设置 -> 安全中心` 里将自己的域名添加到 `Web 安全域名` 中。\n\n```yml\nvaline:\n  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.\n  appid: # your leancloud application appid\n  appkey: # your leancloud application appkey\n  notify: true # mail notifier , https://github.com/xCss/Valine/wiki\n  verify: true # Verification code\n  placeholder: 😎看了这么多，不想说点什么嘛😉 # comment box placeholder\n  avatar: mm # gravatar style\n  guest_info: nick,mail,link # custom comment header\n  pageSize: 10 # pagination size\n  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html\n\n```\n这个 LeanCloud 也是比较良心的啊，可以免费使用，当然我用的是开发版，所以大家不要太着急🤣。\n\n\n---","source":"_posts/HEXO-NexT-主题提高博客颜值.md","raw":"---\ntitle: '[HEXO] NexT 主题提高博客颜值'\ndate: 2018-08-30 20:37:23\ntags: \n  - hexo\ncategories: hexo\nmathjax: true\ncopyright: true\ncomment: true\nphoto: \n\t- /2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg\n---\n\n{% note default %}\n今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。\n{% endnote %}\n\n<!-- more -->\n\n### 文章的模板文件\n\n为了每次更新方便，我直接改了 `blog/scaffolds/` 下的 `post.md`，每次生成的时候模板就都有了，不需要自己再去弄。这个是我的模板：\n\n```md\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ncategories:\nmathjax: true\ncopyright: true\ncomment: true\nphoto: \n---\n\n{% note default %}\n{% endnote %}\n\n<!-- more -->\n\n---\n```\n说明一下，这个 `note` 要在 `next\\_config.yml` 中开启才可以写。下面会讲到。`photo` 是文章开头的图片，就像这篇文章开头那样，注意一定要加绝对路径，比如我这张图片存在文章的文件夹下，那么路径就是 `/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg`。`copyright` 这一项也是要开启之后才行，我的博客的 copyright 是自己重新写的，后面会讲到。最后这个 `---` 是结束符，和最后的结束语一起用。\n\n### Markdown 技巧与内置样式\n\n[基础的语法](https://segmentfault.com/markdown)就不提了，点进来的应该都会了。这里就讲讲一些技巧。\n\n#### 编辑器\n\n我用的 Markdown 编辑器是 [Typora](https://typora.io/)，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器\n\n#### 分隔线和空行\n\n```md\n这是文字\n<hr />\n上面是分隔线\n<br />\n上面是空行\n```\n效果如下：\n\n这是文字\n<hr />\n上面是分隔线\n<br />\n上面是空行\n\n#### 引用\n\n```md\n<blockquote>引用内容</blockquote>\n<!-- 如果前后间隙很小，可以像下面这样写 -->\n<p><blockquote>引用内容</blockquote></p>\n```\n效果如下：\n<blockquote>引用内容</blockquote>\n<p><blockquote>引用内容</blockquote></p>\n\n#### 居中和右对齐\n```md\n<!-- 居中 -->\n<center>内容</center>\n<!-- 右对齐 -->\n<div style=\"text-align:right\">内容</div>\n```\n效果如下：\n<center>内容</center>\n<div style=\"text-align:right\">内容</div>\n\n#### 字体大小和颜色\n\n```md\n<font color=\"#187892\" size=\"number\">内容</font>\n<!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp -->\n```\n效果如下：\n<font color=\"#187892\" size=\"number\">内容</font>\n\n#### Todo list\n\n```md\n<ul>\n<li><i class=\"fa fa-check-square\"></i> 已完成</li>\n<li><i class=\"fa fa-square\"></i> 未完成</li>\n</ul>\n```\n效果如下：\n<ul>\n<li><i class=\"fa fa-check-square\"></i> 已完成</li>\n<li><i class=\"fa fa-square\"></i> 未完成</li>\n</ul>\n\n#### Note 嵌套 Todo list\n\n```md\n<!-- 一共有两种写法，效果看下面 -->\n<div class=\"note primary\">\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n</div>\n<div class=\"note primary\">\n  <p>\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n  </p>\n</div>\n```\n效果如下：\n<div class=\"note primary\">\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-check-square\"></i> 已完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n  <i class=\"fa fa-square\"></i> 未完成\n</div>\n<div class=\"note primary\">\n  <p>\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-check-square\"></i> 已完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n    <i class=\"fa fa-square\"></i> 未完成\n  </p>\n</div>\n\n这两个写法熟悉 HTML 的同学应该是明白的，这里~~因为我太菜了~~就不讲了。主要说一下 `<i class=\"fa fa-square\"></i>` 是从 [Font Awesome](https://fontawesome.com/) 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。\n\n#### Font Awesome\n\nFont Awesome 更多的使用可以看[官网示例](https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css)，这里讲一个放大图标的方法\n\n```md\n<i class=\"fa fa-download\"></i> 普通\n<i class=\"fa fa-download fa-lg\"></i> 变大 33%\n<i class=\"fa fa-download fa-2x\"></i> 两倍大\n```\n效果如下：\n<i class=\"fa fa-download\"></i> 普通\n<i class=\"fa fa-download fa-lg\"></i> 变大 33%\n<i class=\"fa fa-download fa-2x\"></i> 两倍大\n\n#### 代码高亮\n\n主题自带样式 代码块高亮\n```\n```[language] [title] [url] [link-text]\n`代码`\n```\n`[language]` 是代码语言的名称，用来设置代码块颜色高亮，非必须；\n`[title]` 是顶部左边的说明，非必须；\n`[url]` 是顶部右边的超链接地址，非必须；\n`[link text]` 如它的字面意思，超链接的名称，非必须。\n亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加 `[]` 了，要这样写：`[] [] [url] [link text]`。\n\n首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：\n```yml\n# Code Highlight theme\n# Available value:\n#    normal | night | night eighties | night blue | night bright\n# https://github.com/chriskempson/tomorrow-theme\n\nhighlight_theme: night eighties\n```\n要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看[这篇文章](https://almostover.ru/2016-07/hexo-highlight-code-styles/)。当然，如果你和我一样懒，可以在站点配置文件 `_config.yml` 中设置自动高亮（不过这个自动高亮似乎有问题，不建议打开）：\n```diff\nhighlight:\n  enable: true\n  line_number: true\n# 代码自动高亮\n-  auto_detect: false\n+  auto_detect: true\n```\n从网上找到的一个文本效果如下（别跟我说你不知道 `diff` 是什么）：\n```diff\nIndex: languages/ini.js\n===================================================================\n--- languages/ini.js    (revision 199)\n+++ languages/ini.js    (revision 200)\n@@ -1,8 +1,7 @@\n hljs.LANGUAGES.ini =\n {\n-   case_insensitive: true,\n-  defaultMode:\n   {\n+  defaultMode: {\n-     contains: ['comment', 'title', 'setting'],\n+     illegal: '[^\\\\s]'\n+   },\n*** /path/to/original timestamp\n--- /path/to/new      timestamp\n***************\n*** 1,3 ****\n--- 1,9 ----\n+ This is an important\n+ notice! It should\n+ therefore be located at\n+ the beginning of this\n+ document!\n! compress the size of the\n! changes.\n  It is important to spell\n\n```\n代码仅仅高亮肯定是不够地，代码块地功能也很重要，比如复制这个功能。只要在 `_config.yml` 里打开就行啦：\n```yml\ncodeblock:\n  # Manual define the border radius in codeblock\n  # Leave it empty for the default 1\n  border_radius: 3\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    # Show text copy result\n    show_result: true\n```\n\n#### Note 标签\n\n在主题配置文件_config.yml里有一个关于这个的配置:\n```yml\n# Note tag (bs-callout).\nnote:\n  # 风格\n  style: flat\n  # 要不要图标\n  icons: true\n  # 圆角矩形\n  border_radius: 3\n  light_bg_offset: 0\n```\n\n用 HTML 写就是这个样子\n```html\n<div class=\"note default\"><p>default</p></div>\n<div class=\"note primary\"><p>primary</p></div>\n<div class=\"note success\"><p>success</p></div>\n<div class=\"note info\"><p>info</p></div>\n<div class=\"note warning\"><p>warning</p></div>\n<div class=\"note danger\"><p>danger</p></div>\n<div class=\"note danger no-icon\"><p>danger no-icon</p></div>\n```\n用 swig 语法写就是这样\n\n```\n{% note [class] %}\nAny content (support inline tags too).\n{% endnote %}\n[class] : default | primary | success | info | warning | danger.\n          May be not defined.\n\n```\n里面的三种风格长啥样？开启图标长啥样？可以查看[这个页面](https://github.com/iissnan/hexo-theme-next/pull/1697)，更多的介绍也在这个页面，请自行查看\n\n最后的几种效果：\n<div class=\"note default\"><p>default</p></div>\n<div class=\"note primary\"><p>primary</p></div>\n<div class=\"note success\"><p>success</p></div>\n<div class=\"note info\"><p>info</p></div>\n<div class=\"note warning\"><p>warning</p></div>\n<div class=\"note danger\"><p>danger</p></div>\n<div class=\"note danger no-icon\"><p>danger no-icon</p></div>\n\n#### Label 标签\n`label` 标签不建议加在段首, 首先可以在主题配置文件中有配置：\n```\n# Label tag.\nlabel: true\n```\n然后效果如下（`@`前面的是label的名字，后面的是要显示的文字）\n\n{% label default@default %}\n```\n{% label default@default %}\n```\n{% label primary@primary %}\n```\n{% label primary@primary %}\n```\n{% label success@success %}\n```\n{% label success@success %}\n```\n{% label info@info %}\n```\n{% label info@info %}\n```\n{% label warning@warning %}\n```\n{% label warning@warning %}\n```\n{% label danger@danger %}\n```\n{% label danger@danger %}\n```\n\n#### Tab 选项卡\n\n当然也是要先配置一下：\n```yml\n# Tabs tag.\ntabs:\n  enable: true\n  transition:\n    tabs: true\n    labels: true\n  border_radius: 3\n```\n代码如下：\n```\n{% tabs 选项卡, 2 %}\n<!-- tab -->\n**这是选项卡 1** 呵呵哈哈哈哈哈哈\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 2** 额。。。\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 3** 哇，你找到我了！\n<!-- endtab -->\n{% endtabs %}\n```\n效果如下：\n{% tabs 选项卡, 2 %}\n<!-- tab -->\n**这是选项卡 1** 呵呵哈哈哈哈哈哈\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 2** 额。。。\n<!-- endtab -->\n<!-- tab -->\n**这是选项卡 3** 哇，你找到我了！\n<!-- endtab -->\n{% endtabs %}\n\n上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。\n\n#### 按钮样式\n代码如下：\n```\n{% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %}\n```\n效果如下：\n\n{% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %}\n\n### 更多的主题配置\n\n#### 返回顶部按钮与阅读进度\n\n在 `next/_config.yml` 里找到 `b2t` 这个地方进行如下配置：\n```yml\n  # Back to top in sidebar (only for Pisces | Gemini).\n  b2t: true\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n\n#### 添加 RSS 订阅\n\n首先安装一个模块\n```bash\n$ npm install hexo-generator-feed --save\n```\n然后在**根目录**下的 `_config.yml` 里添加：\n```yml\nplugins: hexo-generate-feed\n```\n最后在 `next\\_config.yml` 里配置：\n```yml\n# Set rss to false to disable feed link.\n# Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.\n# Set rss to specific value if you have burned your feed already.\nrss: /atom.xml\n```\n重新生成就可以使用 RSS 了。\n\n### 评论系统重配置\n\n以前用的是 Disqus，然而需要翻墙，所以决定换成 Valine。这个 Valine 要先在 [LeanCloud](https://leancloud.cn/) 里注册并创建一个应用，这里就不再赘述.然后在 `next\\_config.yml` 里配置。注意：得在 `LeanCloud -> 应用 -> 设置 -> 应用 Key` 中把 AppID 和 AppKey 给复制到 `next\\_config.yml` 里面去，并且在 `LeanCloud -> 应用 -> 设置 -> 安全中心` 里将自己的域名添加到 `Web 安全域名` 中。\n\n```yml\nvaline:\n  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.\n  appid: # your leancloud application appid\n  appkey: # your leancloud application appkey\n  notify: true # mail notifier , https://github.com/xCss/Valine/wiki\n  verify: true # Verification code\n  placeholder: 😎看了这么多，不想说点什么嘛😉 # comment box placeholder\n  avatar: mm # gravatar style\n  guest_info: nick,mail,link # custom comment header\n  pageSize: 10 # pagination size\n  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html\n\n```\n这个 LeanCloud 也是比较良心的啊，可以免费使用，当然我用的是开发版，所以大家不要太着急🤣。\n\n\n---","slug":"HEXO-NexT-主题提高博客颜值","published":1,"updated":"2018-09-16T04:14:28.540Z","photos":["/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg"],"comments":1,"layout":"post","link":"","_id":"cjmssgbro002zrgc8sxn3hwv1","content":"<div class=\"note default\"><p>今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"文章的模板文件\"><a href=\"#文章的模板文件\" class=\"headerlink\" title=\"文章的模板文件\"></a>文章的模板文件</h3><p>为了每次更新方便，我直接改了 <code>blog/scaffolds/</code> 下的 <code>post.md</code>，每次生成的时候模板就都有了，不需要自己再去弄。这个是我的模板：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">mathjax: true</span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">comment: true</span><br><span class=\"line\">photo: </span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>说明一下，这个 <code>note</code> 要在 <code>next\\_config.yml</code> 中开启才可以写。下面会讲到。<code>photo</code> 是文章开头的图片，就像这篇文章开头那样，注意一定要加绝对路径，比如我这张图片存在文章的文件夹下，那么路径就是 <code>/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg</code>。<code>copyright</code> 这一项也是要开启之后才行，我的博客的 copyright 是自己重新写的，后面会讲到。最后这个 <code>---</code> 是结束符，和最后的结束语一起用。</p>\n<h3 id=\"Markdown-技巧与内置样式\"><a href=\"#Markdown-技巧与内置样式\" class=\"headerlink\" title=\"Markdown 技巧与内置样式\"></a>Markdown 技巧与内置样式</h3><p><a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">基础的语法</a>就不提了，点进来的应该都会了。这里就讲讲一些技巧。</p>\n<h4 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h4><p>我用的 Markdown 编辑器是 <a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器</p>\n<h4 id=\"分隔线和空行\"><a href=\"#分隔线和空行\" class=\"headerlink\" title=\"分隔线和空行\"></a>分隔线和空行</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是文字</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\">上面是分隔线</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">上面是空行</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p>这是文字</p>\n<p><hr><br>上面是分隔线<br><br><br>上面是空行</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span></span>引用内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 如果前后间隙很小，可以像下面这样写 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span></span>引用内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><blockquote>引用内容</blockquote></p>\n<p><blockquote>引用内容</blockquote></p>\n\n<h4 id=\"居中和右对齐\"><a href=\"#居中和右对齐\" class=\"headerlink\" title=\"居中和右对齐\"></a>居中和右对齐</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 居中 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span>内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 右对齐 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:right\"</span>&gt;</span></span>内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><center>内容</center></p>\n<div style=\"text-align:right\">内容</div>\n\n<h4 id=\"字体大小和颜色\"><a href=\"#字体大小和颜色\" class=\"headerlink\" title=\"字体大小和颜色\"></a>字体大小和颜色</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#187892\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"number\"</span>&gt;</span></span>内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp --&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<font color=\"#187892\" size=\"number\">内容</font>\n\n<h4 id=\"Todo-list\"><a href=\"#Todo-list\" class=\"headerlink\" title=\"Todo list\"></a>Todo list</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<ul><br><li><i class=\"fa fa-check-square\"></i> 已完成</li><br><li><i class=\"fa fa-square\"></i> 未完成</li><br></ul>\n\n<h4 id=\"Note-嵌套-Todo-list\"><a href=\"#Note-嵌套-Todo-list\" class=\"headerlink\" title=\"Note 嵌套 Todo list\"></a>Note 嵌套 Todo list</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 一共有两种写法，效果看下面 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note primary\"</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note primary\"</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-square\"&gt;&lt;/i&gt; 未完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-square\"&gt;&lt;/i&gt; 未完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-square\"&gt;&lt;/i&gt; 未完成</span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<div class=\"note primary\"><br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-square\"></i> 未完成<br>  <i class=\"fa fa-square\"></i> 未完成<br>  <i class=\"fa fa-square\"></i> 未完成<br></div><br><div class=\"note primary\"><br>  <p><br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-square\"></i> 未完成<br>    <i class=\"fa fa-square\"></i> 未完成<br>    <i class=\"fa fa-square\"></i> 未完成<br>  </p><br></div>\n\n<p>这两个写法熟悉 HTML 的同学应该是明白的，这里<del>因为我太菜了</del>就不讲了。主要说一下 <code>&lt;i class=&quot;fa fa-square&quot;&gt;&lt;/i&gt;</code> 是从 <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。</p>\n<h4 id=\"Font-Awesome\"><a href=\"#Font-Awesome\" class=\"headerlink\" title=\"Font Awesome\"></a>Font Awesome</h4><p>Font Awesome 更多的使用可以看<a href=\"https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css\" target=\"_blank\" rel=\"noopener\">官网示例</a>，这里讲一个放大图标的方法</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-download\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 普通</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-download fa-lg\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 变大 33%</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-download fa-2x\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 两倍大</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><i class=\"fa fa-download\"></i> 普通<br><i class=\"fa fa-download fa-lg\"></i> 变大 33%<br><i class=\"fa fa-download fa-2x\"></i> 两倍大</p>\n<h4 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h4><p>主题自带样式 代码块高亮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```[language] [title] [url] [link-text]</span><br><span class=\"line\">`代码`</span><br></pre></td></tr></table></figure></p>\n<p><code>[language]</code> 是代码语言的名称，用来设置代码块颜色高亮，非必须；<br><code>[title]</code> 是顶部左边的说明，非必须；<br><code>[url]</code> 是顶部右边的超链接地址，非必须；<br><code>[link text]</code> 如它的字面意思，超链接的名称，非必须。<br>亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加 <code>[]</code> 了，要这样写：<code>[] [] [url] [link text]</code>。</p>\n<p>首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\"><span class=\"comment\"># Available value:</span></span><br><span class=\"line\"><span class=\"comment\">#    normal | night | night eighties | night blue | night bright</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">highlight_theme:</span> <span class=\"string\">night</span> <span class=\"string\">eighties</span></span><br></pre></td></tr></table></figure></p>\n<p>要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看<a href=\"https://almostover.ru/2016-07/hexo-highlight-code-styles/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。当然，如果你和我一样懒，可以在站点配置文件 <code>_config.yml</code> 中设置自动高亮（不过这个自动高亮似乎有问题，不建议打开）：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\"># 代码自动高亮</span><br><span class=\"line\"><span class=\"deletion\">-  auto_detect: false</span></span><br><span class=\"line\"><span class=\"addition\">+  auto_detect: true</span></span><br></pre></td></tr></table></figure></p>\n<p>从网上找到的一个文本效果如下（别跟我说你不知道 <code>diff</code> 是什么）：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">Index: languages/ini.js</span></span><br><span class=\"line\"><span class=\"comment\">===================================================================</span></span><br><span class=\"line\"><span class=\"comment\">--- languages/ini.js    (revision 199)</span></span><br><span class=\"line\"><span class=\"comment\">+++ languages/ini.js    (revision 200)</span></span><br><span class=\"line\"><span class=\"meta\">@@ -1,8 +1,7 @@</span></span><br><span class=\"line\"> hljs.LANGUAGES.ini =</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   case_insensitive: true,</span></span><br><span class=\"line\"><span class=\"deletion\">-  defaultMode:</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"addition\">+  defaultMode: &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     contains: ['comment', 'title', 'setting'],</span></span><br><span class=\"line\"><span class=\"addition\">+     illegal: '[^\\\\s]'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">*** /path/to/original timestamp</span></span><br><span class=\"line\"><span class=\"comment\">--- /path/to/new      timestamp</span></span><br><span class=\"line\"><span class=\"comment\">***************</span></span><br><span class=\"line\"><span class=\"meta\">*** 1,3 ****</span></span><br><span class=\"line\"><span class=\"meta\">--- 1,9 ----</span></span><br><span class=\"line\"><span class=\"addition\">+ This is an important</span></span><br><span class=\"line\"><span class=\"addition\">+ notice! It should</span></span><br><span class=\"line\"><span class=\"addition\">+ therefore be located at</span></span><br><span class=\"line\"><span class=\"addition\">+ the beginning of this</span></span><br><span class=\"line\"><span class=\"addition\">+ document!</span></span><br><span class=\"line\"><span class=\"addition\">! compress the size of the</span></span><br><span class=\"line\"><span class=\"addition\">! changes.</span></span><br><span class=\"line\">  It is important to spell</span><br></pre></td></tr></table></figure></p>\n<p>代码仅仅高亮肯定是不够地，代码块地功能也很重要，比如复制这个功能。只要在 <code>_config.yml</code> 里打开就行啦：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Manual define the border radius in codeblock</span></span><br><span class=\"line\">  <span class=\"comment\"># Leave it empty for the default 1</span></span><br><span class=\"line\"><span class=\"attr\">  border_radius:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"comment\"># Add copy button on codeblock</span></span><br><span class=\"line\"><span class=\"attr\">  copy_button:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Show text copy result</span></span><br><span class=\"line\"><span class=\"attr\">    show_result:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Note-标签\"><a href=\"#Note-标签\" class=\"headerlink\" title=\"Note 标签\"></a>Note 标签</h4><p>在主题配置文件_config.yml里有一个关于这个的配置:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Note tag (bs-callout).</span></span><br><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># 风格</span></span><br><span class=\"line\"><span class=\"attr\">  style:</span> <span class=\"string\">flat</span></span><br><span class=\"line\">  <span class=\"comment\"># 要不要图标</span></span><br><span class=\"line\"><span class=\"attr\">  icons:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 圆角矩形</span></span><br><span class=\"line\"><span class=\"attr\">  border_radius:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">  light_bg_offset:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>用 HTML 写就是这个样子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note primary\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>primary<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note success\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note info\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note warning\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>warning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note danger\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>danger<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note danger no-icon\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>danger no-icon<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>用 swig 语法写就是这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] %&#125;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\">[class] : default | primary | success | info | warning | danger.</span><br><span class=\"line\">          May be not defined.</span><br></pre></td></tr></table></figure>\n<p>里面的三种风格长啥样？开启图标长啥样？可以查看<a href=\"https://github.com/iissnan/hexo-theme-next/pull/1697\" target=\"_blank\" rel=\"noopener\">这个页面</a>，更多的介绍也在这个页面，请自行查看</p>\n<p>最后的几种效果：</p>\n<div class=\"note default\"><p>default</p></div><br><div class=\"note primary\"><p>primary</p></div><br><div class=\"note success\"><p>success</p></div><br><div class=\"note info\"><p>info</p></div><br><div class=\"note warning\"><p>warning</p></div><br><div class=\"note danger\"><p>danger</p></div><br><div class=\"note danger no-icon\"><p>danger no-icon</p></div>\n\n<h4 id=\"Label-标签\"><a href=\"#Label-标签\" class=\"headerlink\" title=\"Label 标签\"></a>Label 标签</h4><p><code>label</code> 标签不建议加在段首, 首先可以在主题配置文件中有配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Label tag.</span><br><span class=\"line\">label: true</span><br></pre></td></tr></table></figure></p>\n<p>然后效果如下（<code>@</code>前面的是label的名字，后面的是要显示的文字）</p>\n<span class=\"label default\">default</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label default@default %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label primary\">primary</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label primary@primary %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label success\">success</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label success@success %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label info\">info</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label info@info %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label warning\">warning</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label warning@warning %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label danger\">danger</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label danger@danger %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Tab-选项卡\"><a href=\"#Tab-选项卡\" class=\"headerlink\" title=\"Tab 选项卡\"></a>Tab 选项卡</h4><p>当然也是要先配置一下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tabs tag.</span></span><br><span class=\"line\"><span class=\"attr\">tabs:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span></span><br><span class=\"line\"><span class=\"attr\">    tabs:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    labels:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  border_radius:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\">**这是选项卡 2** 额。。。</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\">**这是选项卡 3** 哇，你找到我了！</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下：<br><div class=\"tabs\" id=\"选项卡\"><ul class=\"nav-tabs\"><li class=\"tab\"><a href=\"#选项卡-1\">选项卡 1</a></li><li class=\"tab active\"><a href=\"#选项卡-2\">选项卡 2</a></li><li class=\"tab\"><a href=\"#选项卡-3\">选项卡 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane\" id=\"选项卡-1\"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p></div><div class=\"tab-pane active\" id=\"选项卡-2\"><p><strong>这是选项卡 2</strong> 额。。。</p></div><div class=\"tab-pane\" id=\"选项卡-3\"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p></div></div></div></p>\n<p>上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。</p>\n<h4 id=\"按钮样式\"><a href=\"#按钮样式\" class=\"headerlink\" title=\"按钮样式\"></a>按钮样式</h4><p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<a class=\"btn\" href=\"https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download fa-lg fa-fw\"></i>更多关于按钮的使用点这里</a>\n<h3 id=\"更多的主题配置\"><a href=\"#更多的主题配置\" class=\"headerlink\" title=\"更多的主题配置\"></a>更多的主题配置</h3><h4 id=\"返回顶部按钮与阅读进度\"><a href=\"#返回顶部按钮与阅读进度\" class=\"headerlink\" title=\"返回顶部按钮与阅读进度\"></a>返回顶部按钮与阅读进度</h4><p>在 <code>next/_config.yml</code> 里找到 <code>b2t</code> 这个地方进行如下配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Back to top in sidebar (only for Pisces | Gemini).</span></span><br><span class=\"line\"><span class=\"attr\">b2t:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># Scroll percent label in b2t button.</span></span><br><span class=\"line\"><span class=\"attr\">scrollpercent:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"添加-RSS-订阅\"><a href=\"#添加-RSS-订阅\" class=\"headerlink\" title=\"添加 RSS 订阅\"></a>添加 RSS 订阅</h4><p>首先安装一个模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p>\n<p>然后在<strong>根目录</strong>下的 <code>_config.yml</code> 里添加：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span> <span class=\"string\">hexo-generate-feed</span></span><br></pre></td></tr></table></figure></p>\n<p>最后在 <code>next\\_config.yml</code> 里配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set rss to false to disable feed link.</span></span><br><span class=\"line\"><span class=\"comment\"># Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.</span></span><br><span class=\"line\"><span class=\"comment\"># Set rss to specific value if you have burned your feed already.</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> <span class=\"string\">/atom.xml</span></span><br></pre></td></tr></table></figure></p>\n<p>重新生成就可以使用 RSS 了。</p>\n<h3 id=\"评论系统重配置\"><a href=\"#评论系统重配置\" class=\"headerlink\" title=\"评论系统重配置\"></a>评论系统重配置</h3><p>以前用的是 Disqus，然而需要翻墙，所以决定换成 Valine。这个 Valine 要先在 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a> 里注册并创建一个应用，这里就不再赘述.然后在 <code>next\\_config.yml</code> 里配置。注意：得在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 应用 Key</code> 中把 AppID 和 AppKey 给复制到 <code>next\\_config.yml</code> 里面去，并且在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 安全中心</code> 里将自己的域名添加到 <code>Web 安全域名</code> 中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">true</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">😎看了这么多，不想说点什么嘛😉</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail,link</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\"><span class=\"attr\">  visitor:</span> <span class=\"literal\">false</span> <span class=\"comment\"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>\n<p>这个 LeanCloud 也是比较良心的啊，可以免费使用，当然我用的是开发版，所以大家不要太着急🤣。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。</p></div>","more":"<h3 id=\"文章的模板文件\"><a href=\"#文章的模板文件\" class=\"headerlink\" title=\"文章的模板文件\"></a>文章的模板文件</h3><p>为了每次更新方便，我直接改了 <code>blog/scaffolds/</code> 下的 <code>post.md</code>，每次生成的时候模板就都有了，不需要自己再去弄。这个是我的模板：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">mathjax: true</span><br><span class=\"line\">copyright: true</span><br><span class=\"line\">comment: true</span><br><span class=\"line\">photo: </span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>说明一下，这个 <code>note</code> 要在 <code>next\\_config.yml</code> 中开启才可以写。下面会讲到。<code>photo</code> 是文章开头的图片，就像这篇文章开头那样，注意一定要加绝对路径，比如我这张图片存在文章的文件夹下，那么路径就是 <code>/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg</code>。<code>copyright</code> 这一项也是要开启之后才行，我的博客的 copyright 是自己重新写的，后面会讲到。最后这个 <code>---</code> 是结束符，和最后的结束语一起用。</p>\n<h3 id=\"Markdown-技巧与内置样式\"><a href=\"#Markdown-技巧与内置样式\" class=\"headerlink\" title=\"Markdown 技巧与内置样式\"></a>Markdown 技巧与内置样式</h3><p><a href=\"https://segmentfault.com/markdown\" target=\"_blank\" rel=\"noopener\">基础的语法</a>就不提了，点进来的应该都会了。这里就讲讲一些技巧。</p>\n<h4 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h4><p>我用的 Markdown 编辑器是 <a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器</p>\n<h4 id=\"分隔线和空行\"><a href=\"#分隔线和空行\" class=\"headerlink\" title=\"分隔线和空行\"></a>分隔线和空行</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是文字</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span></span><br><span class=\"line\">上面是分隔线</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">上面是空行</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p>这是文字</p>\n<p><hr><br>上面是分隔线<br><br><br>上面是空行</p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span></span>引用内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 如果前后间隙很小，可以像下面这样写 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span></span>引用内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><blockquote>引用内容</blockquote></p>\n<p><blockquote>引用内容</blockquote></p>\n\n<h4 id=\"居中和右对齐\"><a href=\"#居中和右对齐\" class=\"headerlink\" title=\"居中和右对齐\"></a>居中和右对齐</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 居中 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span>内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 右对齐 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:right\"</span>&gt;</span></span>内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><center>内容</center></p>\n<div style=\"text-align:right\">内容</div>\n\n<h4 id=\"字体大小和颜色\"><a href=\"#字体大小和颜色\" class=\"headerlink\" title=\"字体大小和颜色\"></a>字体大小和颜色</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#187892\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"number\"</span>&gt;</span></span>内容<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp --&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<font color=\"#187892\" size=\"number\">内容</font>\n\n<h4 id=\"Todo-list\"><a href=\"#Todo-list\" class=\"headerlink\" title=\"Todo list\"></a>Todo list</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<ul><br><li><i class=\"fa fa-check-square\"></i> 已完成</li><br><li><i class=\"fa fa-square\"></i> 未完成</li><br></ul>\n\n<h4 id=\"Note-嵌套-Todo-list\"><a href=\"#Note-嵌套-Todo-list\" class=\"headerlink\" title=\"Note 嵌套 Todo list\"></a>Note 嵌套 Todo list</h4><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 一共有两种写法，效果看下面 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note primary\"</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-check-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 已完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-square\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 未完成</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note primary\"</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-check-square\"&gt;&lt;/i&gt; 已完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-square\"&gt;&lt;/i&gt; 未完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-square\"&gt;&lt;/i&gt; 未完成</span></span><br><span class=\"line\"><span class=\"code\">    &lt;i class=\"fa fa-square\"&gt;&lt;/i&gt; 未完成</span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<div class=\"note primary\"><br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-check-square\"></i> 已完成<br>  <i class=\"fa fa-square\"></i> 未完成<br>  <i class=\"fa fa-square\"></i> 未完成<br>  <i class=\"fa fa-square\"></i> 未完成<br></div><br><div class=\"note primary\"><br>  <p><br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-check-square\"></i> 已完成<br>    <i class=\"fa fa-square\"></i> 未完成<br>    <i class=\"fa fa-square\"></i> 未完成<br>    <i class=\"fa fa-square\"></i> 未完成<br>  </p><br></div>\n\n<p>这两个写法熟悉 HTML 的同学应该是明白的，这里<del>因为我太菜了</del>就不讲了。主要说一下 <code>&lt;i class=&quot;fa fa-square&quot;&gt;&lt;/i&gt;</code> 是从 <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。</p>\n<h4 id=\"Font-Awesome\"><a href=\"#Font-Awesome\" class=\"headerlink\" title=\"Font Awesome\"></a>Font Awesome</h4><p>Font Awesome 更多的使用可以看<a href=\"https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css\" target=\"_blank\" rel=\"noopener\">官网示例</a>，这里讲一个放大图标的方法</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-download\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 普通</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-download fa-lg\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 变大 33%</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-download fa-2x\"</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 两倍大</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><i class=\"fa fa-download\"></i> 普通<br><i class=\"fa fa-download fa-lg\"></i> 变大 33%<br><i class=\"fa fa-download fa-2x\"></i> 两倍大</p>\n<h4 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h4><p>主题自带样式 代码块高亮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```[language] [title] [url] [link-text]</span><br><span class=\"line\">`代码`</span><br></pre></td></tr></table></figure></p>\n<p><code>[language]</code> 是代码语言的名称，用来设置代码块颜色高亮，非必须；<br><code>[title]</code> 是顶部左边的说明，非必须；<br><code>[url]</code> 是顶部右边的超链接地址，非必须；<br><code>[link text]</code> 如它的字面意思，超链接的名称，非必须。<br>亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加 <code>[]</code> 了，要这样写：<code>[] [] [url] [link text]</code>。</p>\n<p>首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\"><span class=\"comment\"># Available value:</span></span><br><span class=\"line\"><span class=\"comment\">#    normal | night | night eighties | night blue | night bright</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">highlight_theme:</span> <span class=\"string\">night</span> <span class=\"string\">eighties</span></span><br></pre></td></tr></table></figure></p>\n<p>要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看<a href=\"https://almostover.ru/2016-07/hexo-highlight-code-styles/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。当然，如果你和我一样懒，可以在站点配置文件 <code>_config.yml</code> 中设置自动高亮（不过这个自动高亮似乎有问题，不建议打开）：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\"># 代码自动高亮</span><br><span class=\"line\"><span class=\"deletion\">-  auto_detect: false</span></span><br><span class=\"line\"><span class=\"addition\">+  auto_detect: true</span></span><br></pre></td></tr></table></figure></p>\n<p>从网上找到的一个文本效果如下（别跟我说你不知道 <code>diff</code> 是什么）：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">Index: languages/ini.js</span></span><br><span class=\"line\"><span class=\"comment\">===================================================================</span></span><br><span class=\"line\"><span class=\"comment\">--- languages/ini.js    (revision 199)</span></span><br><span class=\"line\"><span class=\"comment\">+++ languages/ini.js    (revision 200)</span></span><br><span class=\"line\"><span class=\"meta\">@@ -1,8 +1,7 @@</span></span><br><span class=\"line\"> hljs.LANGUAGES.ini =</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"><span class=\"deletion\">-   case_insensitive: true,</span></span><br><span class=\"line\"><span class=\"deletion\">-  defaultMode:</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"><span class=\"addition\">+  defaultMode: &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     contains: ['comment', 'title', 'setting'],</span></span><br><span class=\"line\"><span class=\"addition\">+     illegal: '[^\\\\s]'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">*** /path/to/original timestamp</span></span><br><span class=\"line\"><span class=\"comment\">--- /path/to/new      timestamp</span></span><br><span class=\"line\"><span class=\"comment\">***************</span></span><br><span class=\"line\"><span class=\"meta\">*** 1,3 ****</span></span><br><span class=\"line\"><span class=\"meta\">--- 1,9 ----</span></span><br><span class=\"line\"><span class=\"addition\">+ This is an important</span></span><br><span class=\"line\"><span class=\"addition\">+ notice! It should</span></span><br><span class=\"line\"><span class=\"addition\">+ therefore be located at</span></span><br><span class=\"line\"><span class=\"addition\">+ the beginning of this</span></span><br><span class=\"line\"><span class=\"addition\">+ document!</span></span><br><span class=\"line\"><span class=\"addition\">! compress the size of the</span></span><br><span class=\"line\"><span class=\"addition\">! changes.</span></span><br><span class=\"line\">  It is important to spell</span><br></pre></td></tr></table></figure></p>\n<p>代码仅仅高亮肯定是不够地，代码块地功能也很重要，比如复制这个功能。只要在 <code>_config.yml</code> 里打开就行啦：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Manual define the border radius in codeblock</span></span><br><span class=\"line\">  <span class=\"comment\"># Leave it empty for the default 1</span></span><br><span class=\"line\"><span class=\"attr\">  border_radius:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"comment\"># Add copy button on codeblock</span></span><br><span class=\"line\"><span class=\"attr\">  copy_button:</span></span><br><span class=\"line\"><span class=\"attr\">    enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># Show text copy result</span></span><br><span class=\"line\"><span class=\"attr\">    show_result:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Note-标签\"><a href=\"#Note-标签\" class=\"headerlink\" title=\"Note 标签\"></a>Note 标签</h4><p>在主题配置文件_config.yml里有一个关于这个的配置:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Note tag (bs-callout).</span></span><br><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># 风格</span></span><br><span class=\"line\"><span class=\"attr\">  style:</span> <span class=\"string\">flat</span></span><br><span class=\"line\">  <span class=\"comment\"># 要不要图标</span></span><br><span class=\"line\"><span class=\"attr\">  icons:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 圆角矩形</span></span><br><span class=\"line\"><span class=\"attr\">  border_radius:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">  light_bg_offset:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>用 HTML 写就是这个样子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note default\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note primary\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>primary<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note success\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>success<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note info\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note warning\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>warning<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note danger\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>danger<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"note danger no-icon\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>danger no-icon<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>用 swig 语法写就是这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] %&#125;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\">[class] : default | primary | success | info | warning | danger.</span><br><span class=\"line\">          May be not defined.</span><br></pre></td></tr></table></figure>\n<p>里面的三种风格长啥样？开启图标长啥样？可以查看<a href=\"https://github.com/iissnan/hexo-theme-next/pull/1697\" target=\"_blank\" rel=\"noopener\">这个页面</a>，更多的介绍也在这个页面，请自行查看</p>\n<p>最后的几种效果：</p>\n<div class=\"note default\"><p>default</p></div><br><div class=\"note primary\"><p>primary</p></div><br><div class=\"note success\"><p>success</p></div><br><div class=\"note info\"><p>info</p></div><br><div class=\"note warning\"><p>warning</p></div><br><div class=\"note danger\"><p>danger</p></div><br><div class=\"note danger no-icon\"><p>danger no-icon</p></div>\n\n<h4 id=\"Label-标签\"><a href=\"#Label-标签\" class=\"headerlink\" title=\"Label 标签\"></a>Label 标签</h4><p><code>label</code> 标签不建议加在段首, 首先可以在主题配置文件中有配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Label tag.</span><br><span class=\"line\">label: true</span><br></pre></td></tr></table></figure></p>\n<p>然后效果如下（<code>@</code>前面的是label的名字，后面的是要显示的文字）</p>\n<span class=\"label default\">default</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label default@default %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label primary\">primary</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label primary@primary %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label success\">success</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label success@success %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label info\">info</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label info@info %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label warning\">warning</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label warning@warning %&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"label danger\">danger</span>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label danger@danger %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Tab-选项卡\"><a href=\"#Tab-选项卡\" class=\"headerlink\" title=\"Tab 选项卡\"></a>Tab 选项卡</h4><p>当然也是要先配置一下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tabs tag.</span></span><br><span class=\"line\"><span class=\"attr\">tabs:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  transition:</span></span><br><span class=\"line\"><span class=\"attr\">    tabs:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    labels:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  border_radius:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\">**这是选项卡 2** 额。。。</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\">**这是选项卡 3** 哇，你找到我了！</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下：<br><div class=\"tabs\" id=\"选项卡\"><ul class=\"nav-tabs\"><li class=\"tab\"><a href=\"#选项卡-1\">选项卡 1</a></li><li class=\"tab active\"><a href=\"#选项卡-2\">选项卡 2</a></li><li class=\"tab\"><a href=\"#选项卡-3\">选项卡 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane\" id=\"选项卡-1\"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p></div><div class=\"tab-pane active\" id=\"选项卡-2\"><p><strong>这是选项卡 2</strong> 额。。。</p></div><div class=\"tab-pane\" id=\"选项卡-3\"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p></div></div></div></p>\n<p>上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。</p>\n<h4 id=\"按钮样式\"><a href=\"#按钮样式\" class=\"headerlink\" title=\"按钮样式\"></a>按钮样式</h4><p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<a class=\"btn\" href=\"https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-download fa-lg fa-fw\"></i>更多关于按钮的使用点这里</a>\n<h3 id=\"更多的主题配置\"><a href=\"#更多的主题配置\" class=\"headerlink\" title=\"更多的主题配置\"></a>更多的主题配置</h3><h4 id=\"返回顶部按钮与阅读进度\"><a href=\"#返回顶部按钮与阅读进度\" class=\"headerlink\" title=\"返回顶部按钮与阅读进度\"></a>返回顶部按钮与阅读进度</h4><p>在 <code>next/_config.yml</code> 里找到 <code>b2t</code> 这个地方进行如下配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Back to top in sidebar (only for Pisces | Gemini).</span></span><br><span class=\"line\"><span class=\"attr\">b2t:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># Scroll percent label in b2t button.</span></span><br><span class=\"line\"><span class=\"attr\">scrollpercent:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"添加-RSS-订阅\"><a href=\"#添加-RSS-订阅\" class=\"headerlink\" title=\"添加 RSS 订阅\"></a>添加 RSS 订阅</h4><p>首先安装一个模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p>\n<p>然后在<strong>根目录</strong>下的 <code>_config.yml</code> 里添加：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plugins:</span> <span class=\"string\">hexo-generate-feed</span></span><br></pre></td></tr></table></figure></p>\n<p>最后在 <code>next\\_config.yml</code> 里配置：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set rss to false to disable feed link.</span></span><br><span class=\"line\"><span class=\"comment\"># Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.</span></span><br><span class=\"line\"><span class=\"comment\"># Set rss to specific value if you have burned your feed already.</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> <span class=\"string\">/atom.xml</span></span><br></pre></td></tr></table></figure></p>\n<p>重新生成就可以使用 RSS 了。</p>\n<h3 id=\"评论系统重配置\"><a href=\"#评论系统重配置\" class=\"headerlink\" title=\"评论系统重配置\"></a>评论系统重配置</h3><p>以前用的是 Disqus，然而需要翻墙，所以决定换成 Valine。这个 Valine 要先在 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a> 里注册并创建一个应用，这里就不再赘述.然后在 <code>next\\_config.yml</code> 里配置。注意：得在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 应用 Key</code> 中把 AppID 和 AppKey 给复制到 <code>next\\_config.yml</code> 里面去，并且在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 安全中心</code> 里将自己的域名添加到 <code>Web 安全域名</code> 中。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span> <span class=\"comment\"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">true</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">😎看了这么多，不想说点什么嘛😉</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail,link</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\"><span class=\"attr\">  visitor:</span> <span class=\"literal\">false</span> <span class=\"comment\"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>\n<p>这个 LeanCloud 也是比较良心的啊，可以免费使用，当然我用的是开发版，所以大家不要太着急🤣。</p>\n<hr>"},{"title":"[NOIP 模拟] 2018-8-7 题解: 我写了个自己都看不懂的程序","date":"2018-08-07T11:22:40.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n今天创历史新高$290$分，第三道题考完自己都没看出自己用了啥方法（Orz），感觉自已要去补数据结构......另外第一道题实在是坑......十分啊！！\n\n<!-- more -->\n\n### T1 选举\n\n**[题目描述]**\n\n$C$国的总统选举委员会最近遇到了一些麻烦。\n\n他们在统计各省对H先生的支持率（百分比）时，把支持率四舍五入到了整数。等他们公布结果后，该国媒体发现这些省份的支持率之和不等于$100$（百分比）！在媒体黑幕声的质疑下，他们不得不找你寻求帮助。\n\n你将得到各省四舍五入后的支持率，请计算这些省份的支持率在四舍五入前的和是否可能等于100？支持率是以百分比的形式统计的。\n请注意，各省的支持率可以是一个包含任意多位的有限小数。一个小数在四舍五入到整数时，若小数点后第一位小于5则舍，大于等于5则入。\n\n例如：\n$26,17,58$是一种可能的支持率，因为它们可能是$25.8,16.5,57.7$四舍五入后得到的，而$25.8+16.5+57.7=100$。\n$49,49$是一种不可能的支持率，因为当$9$的个数有限时，无论有多少个$9$，均有$49.499+...+99+49.499+...+99<100$。\n\n**[输入格式]**\n\n\t输入包含多组数据，第一行是一个整数T，表示数据组数。\n\t接下来是T组数据，每组数据的第一行是一个整数N，表示参与选举的省份个数。\n\t第二行是N个整数，表示各省四舍五入后的支持率。\n\n**[输出格式]**\n\n\t对于每组数据，若是一种可能的支持率，输出Yes，否则输出No。\n\n**[样例输入]**\n\n\t2\n\t2\n\t49 49\n\t3\n\t26 17 58\n\n**[样例输出]**\n\n\tNo\n\tYes\n\n**[数据范围与约定]**\n\n\t对于30%的数据，1<=n<=3；\n\t对于50%的数据，1<=n<=5；\n\t对于80%的数据，1<=四舍五入后各省的支持率<=99；\n\t对于100%的数据，1<=n<=10000，输入数据中的所有整数均在有符号16位整数范围内。\n\n**[题解]**\n\n简单数值计算题，直接讨论情况并计算即可。\n具体来讲，可以求出使用给出的$N$个支持率，最终可能的支持率的取值范围，检查该范围是否包含$100$。\n一般情况下，一个数X在取舍前可能取$[X-0,5,X+0.5)$之间的任意数值。\n需要注意$0$和$100$等边界问题，因为支持率（百分比）一定是一个$[0,100]$之间的数。\n求出的取值范围最好使用整数并加以开闭区间判断，避免实数精度误差。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int64 long long\nint T, n, x;\nint64 sum, l, r;\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"election.in\");\n\tofstream out(\"election.out\");\n\tin.tie(NULL);\n\n\tin >> T;\n\twhile (T--) {\n\t\tin >> n;\n\t\tint cnt0 = 0, cnt100 = 0, flag = 0;\n\t\tsum = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tin >> x;\n\t\t\tsum += x;\n\t\t\tif (x == 0) ++cnt0;\n\t\t\tif (x == 100) ++cnt100;\n\t\t\tif (x > 100) flag = 1;\n\t\t}\n\t\tif (flag) {\n\t\t\tout << \"No\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tl = sum - (n - cnt0) / 2;\n\t\tr = sum + (n + cnt100) / 2;\n\t\tbool cond0 = (l <= 100);\n\t\tbool cond1;\n\t\tif ((n - cnt100) & 1 || (n - cnt100) == 0)\n\t\t\tcond1 = (r >= 100);\n\t\telse cond1 = r > 100;\n\t\tif (cond0 && cond1) out << \"Yes\" << endl;\n\t\telse out << \"No\" << endl;\n\t}\n\treturn 0;\n}\n\n// 注：这个其实是标程，连 double 都没有用 （Orz）\n\n```\n\n**[评价]**\n\n考察了基础的数学知识，只要搞清楚开区间和闭区间就好了。\n\n### T2 异象石\n\n**[题目描述]**\n\n\nAdera 是 Microsoft 应用商店中的一款解谜游戏。\n异象石是进入 Adera 中异时空的引导物，在 Adera 的异时空中有一张地图。这张地图上有$N$个点，\n有$N-1$条双向边把它们连通起来。起初地图上没有任何异象石，在接下来的$M$个时刻中，每个时刻\n会发生以下三种类型的事件之一：\n\n1. 地图的某个点上出现了异象石（已经出现的不会再次出现）；\n2. 地图某个点上的异象石被摧毁（不会摧毁没有异象石的点）；\n3. 向玩家询问使所有异象石所在的点连通的边集的总长度最小是多少。\n\n请你作为玩家回答这些问题。\n\n**[输入格式]**\n\n\t第一行有一个整数N，表示点的个数。\n\t接下来N-1行每行三个整数x,y,z，表示点x和y之间有一条长度为z的双向边。\n\t第N+1行有一个正整数M。\n\t接下来M行每行是一个事件，事件是以下三种格式之一：\n\t+ x  表示点x上出现了异象石\n\t- x  表示点x上的异象石被摧毁\n\t?表示询问使当前所有异象石所在的点连通所需的边集的总长度最小是多少。\n\n**[输出格式]**\n\n\t对于每个 ?事件，输出一个整数表示答案。\n\n**[样例输入]**\n\n\t6\n\t1 2 1\n\t1 3 5\n\t4 1 7\n\t4 5 3\n\t6 4 2\n\t10\n\t+ 3\n\t+ 1\n\t?\n\t+ 6\n\t?\n\t+ 5\n\t?\n\t- 6\n\t- 3\n\t?\n\n**[样例输出]**\n\n\t5\n\t14\n\t17\n\t10\n\n**[数据范围与约定]**\n\n\t对于30%的数据，1 ≤ n, m ≤ 1000。\n\t对于另20%的数据，地图是一条链，或者一朵菊花。\n\t对于100%的数据，1 ≤ n, m ≤ 10^5, 1 ≤ x, y ≤ n, x ≠ y, 1 ≤ z ≤ 10^9。\n\n**[题解]**\n\n如果在$a_1,a_2...a_k$这些点上有异象石，则所需代价就是按照DFS序依次遍历这$k$个点再回到根的总距离。\n这个距离数还等于$a_1,a_2...a_k$排成一个环形序列，相邻两个点的距离之和。\n因此用set维护有异象石的点构成的DFS序，用一个全局变量记录答案，插入、删除时更新set的同时利用LCA算法更新答案。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 110000\n#define NOE -1\n#define int64 long long\n\nint n, m, x, y, z, v;\nchar op;\n\nset<int> s;\nint64 ans, dis[maxn], g[maxn];\nint cnt = 0;\nint f[maxn][20], dep[maxn], dfn[maxn], seq[maxn];\n\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n\tint weight;\n};\n\nedgeNode edges[maxn << 1];\nint heads[maxn << 1];\nint numEdges = 0;\n\ninline void init() { memset(heads, NOE, sizeof(heads)); }\ninline void addEdge(int vertex1, int vertex2, int weight) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = weight;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\n\ninline void addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n}\n\ninline void rDFS(int x, int fa) {\n\tf[x][0] = fa;\n\tdep[x] = dep[fa] + 1;\n\tdfn[x] = ++cnt;\n\tseq[cnt] = x;\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext) {\n\t\tint vt = edges[i].vertexTo;\n\t\tif (vt != fa) {\n\t\t\tdis[vt] = dis[x] + edges[i].weight;\n\t\t\trDFS(vt, x);\n\t\t}\n\t}\n}\n\ninline void initFa() {\n\tfor (int i = 1; i <= 19; ++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tf[j][i] = f[f[j][i - 1]][i - 1];\n}\n\ninline int LCA(int x, int y) {\n\tif (dep[x] < dep[y]) swap(x, y);\n\tint t = dep[x] - dep[y];\n\tfor (int i = 0; i <= 16; ++i)\n\t\tif (t & (1 << i)) x = f[x][i];\n\tif (x == y) return x;\n\tfor (int i = 16; i >= 0; --i) {\n\t\tif (f[x][i] != f[y][i]) {\n\t\t\tx = f[x][i];\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\n\ninline int64 getDist(int x, int y) {\n\treturn dis[x] + dis[y] - dis[LCA(x, y)] * 2;\n}\n\ninline void find(int x, int &l, int &r) {\n\tset<int>::iterator it = s.lower_bound(x);\n\tif (it != s.end()) r = *it;\n\telse r = *s.begin();\n\tif (it == s.begin()) it = s.end();\n\tl = *(--it);\n\tl = seq[l];\n\tr = seq[r];\n}\n\ninline void insert(int x) {\n\tif (!s.empty()) {\n\t\tint l, r;\n\t\tfind(dfn[x], l, r);\n\t\tans -= g[r];\n\t\tg[x] = getDist(l, x);\n\t\tg[r] = getDist(x, r);\n\t\tans += g[x] + g[r];\n\t} else g[x] = 0;\n\ts.insert(dfn[x]);\n}\n\ninline void erase(int x) {\n\tint l, r;\n\ts.erase(dfn[x]);\n\tif (!s.empty()) {\n\t\tfind(dfn[x], l, r);\n\t\tans -= g[x] + g[r];\n\t\tg[r] = getDist(l, r);\n\t}\n\tans += g[r];\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"stone.in\");\n\tofstream out(\"stone.out\");\n\tin.tie(NULL);\n\t\n\tinit();\n\tin >> n;\n\tfor (int i = 1; i < n; ++i) {\n\t\tin >> x >> y >> z;\n\t\taddDuplexEdge(x, y, z);\n\t}\n\t\n\trDFS(1, 0);\n\tinitFa();\n\n\tin >> m;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tin >> op;\n\t\tswitch (op) {\n\t\t\tcase '+' : {\n\t\t\t\tin >> v;\n\t\t\t\tinsert(v);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase '-' : {\n\t\t\t\tin >> v;\n\t\t\t\terase(v);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase '?' : {\n\t\t\t\tout << ans / 2 << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n// 这道题必须一次操作更新一次答案，否则会 TLE\n\n```\n此处附上 std::set 的[用法](https://zh.cppreference.com/w/cpp/container/set)\n\n**[评价]**\n\n对于没有做过的同学来说，思维难度还是比较大的，这种方法就直接记住就行了，要用的时候直接拿出来用。\n\n### T3 序列变换（本次重点！！！）\n\n**[题目描述]**\n\n给定一个长度为$N$的数列$A_i$。\n你可以对数列进行若干次操作，每次操作可以从数列中任选一个数，把它移动到数列的开头或者结尾。\n求最少经过多少次操作，可以把数列变成单调不减的。“单调不减”意味着数列中的任意一个数都不大于排在它后边的数。\n\n**[输入格式]**\n\n\t第一行是一个正整数N。\n\t第二行是N个正整数Ai。\n\n**[输出格式]**\n\n\t输出一个整数，表示最少需要的操作次数。\n\n**[样例输入]**\n\n\t5\n\t6 3 7 8 6\n\n**[样例输出]**\n\n\t2\n\n**[数据范围与约定]**\n\n\t对于30%的数据，满足1≤n≤10。\n\t对于60% 的数据，满足1≤n≤1000。\n\t对于100% 的数据，满足1≤n≤1000000，1≤Ai≤1000000。\n\n**[题解]**\n\n经过分析可以发现，最优解情况下，需要保持一个子序列不动，这个子序列满足：\n\n1. 子序列单调递增；\n2. 若子序列中最小数是$L$，最大数是$R$，则子序列必须包含$[L+1,R-1]$中的数列中的所有数。\n\n用单调队列求出满足这两个条件的子序列的最大长度，用$n$减去就是答案。\n即这个子序列保持不动，其余数向前或后移动一次。\n\n**[参考代码]**\n\n```cpp\n// 以下为 std 代码，不感兴趣的同学可以跳过\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<iomanip>\n#include<queue>\n#include<set>\nusing namespace std;\nconst int SIZE = 1000010;\nint a[SIZE], q[SIZE];\nint n, m, ans;\nvector<int> b[SIZE];\n\nint main() {\n\tfreopen(\"change.in\",\"r\",stdin);\n\tfreopen(\"change.out\",\"w\",stdout);\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tb[a[i]].push_back(i);\n\t\tm = max(m, a[i]);\n\t}\n\tint l = 1, r = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\treverse(b[i].begin(), b[i].end());\n\t\tfor (int j = 0; j < b[i].size(); j++) {\n\t\t\tint k = b[i][j];\n\t\t\twhile (l <= r && q[r] > k) {\n\t\t\t\twhile (l < r && a[q[l]] < a[q[r]]) l++;\n\t\t\t\tr--;\n\t\t\t}\n\t\t\tans = max(ans, r - l + 2 + j);\n\t\t}\n\t\tfor (int j = b[i].size() - 1; j >= 0; j--) {\n\t\t\tq[++r] = b[i][j];\n\t\t}\n\t\t//cout << ans << endl;\n\t}\n\tcout << n - ans << endl;\n}\n```\n\n```cpp\n// 以下是考试时瞎打的代码：\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 1100000\n#define INF 0x3f3f3f3f\n\nint n, A[maxn], B[maxn];\nint ans = -INF;\nint len = 0;\n\ninline bool compare(int x, int y) {\n\tif (A[x] == A[y]) return x < y;\n\treturn A[x] < A[y];\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"change.in\");\n\tofstream out(\"change.out\");\n\tin.tie(NULL);\n\t\n\tin >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tin >> A[i];\n\t\tB[i] = i;\n\t}\n\tsort(B + 1, B + n + 1, compare);\n\t// B 数组记录 A 中元素的 位置，且以 A 中相应的元素大小为优先排序\n\tint j;\n\tfor (int i = 1; i <= n; i = j + 1) {\n\t\tfor (j = i; i < n && B[j] < B[j + 1]; j++);\n\t\tlen = j - i + 1;\n\t\t// 以上这段先找出从 i 开始序号递增的子序列的最大长度\n\t\tfor (int k = i - 1; k != 0 && A[B[k]] == A[B[i - 1]]; --k)\n\t\t\tif (B[k] < B[i]) len++;\n\t\tfor (int k = j + 1; k <= n && A[B[j + 1]] == A[B[k]]; ++k)\n\t\t\tif (B[j] < B[k]) len++;\n\t\t// 因为前面 i 直接变为 j + 1，所以可能出现重复的数字忽略的情况\n\t\t// 故在上面两个循环中：\n\t\t// 一个向左扫，一个向右扫，同时判断在原数组中的位置是否递增\n\t\t// 这种方法速度会更快一点。\n\t\tans = max(ans, len);\n\t\t// 获取最大长度\n\t}\n\tout << n - ans;\n\t// 相减\n\treturn 0;\n}\n\n// 考完试后自己都无法记起这是什么神奇的算法，不过仔细想想还是能想起来的。\n\n```\n\n**[评价]**\n\n这道题既考验思维又考验代码能力，好题。\n\n### 总结\n\n首先，仍然要记住仔细读题，这次第一题就是因为读题不仔细，思考不充分才出问题的。\n其次，有些代码还是好好打打草稿，写写流程图比较好，防止像第三题一样想不起来（#滑稽）。\n\n\n\n---","source":"_posts/NOIP-模拟-2018-8-7-题解-我写了个自己都看不懂的程序.md","raw":"---\ntitle: '[NOIP 模拟] 2018-8-7 题解: 我写了个自己都看不懂的程序'\ndate: 2018-08-07 19:22:40\ntags:\n\t- NOIP 模拟\n\t- 题解\n\t- 神题\ncategories: NOIP\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n今天创历史新高$290$分，第三道题考完自己都没看出自己用了啥方法（Orz），感觉自已要去补数据结构......另外第一道题实在是坑......十分啊！！\n\n<!-- more -->\n\n### T1 选举\n\n**[题目描述]**\n\n$C$国的总统选举委员会最近遇到了一些麻烦。\n\n他们在统计各省对H先生的支持率（百分比）时，把支持率四舍五入到了整数。等他们公布结果后，该国媒体发现这些省份的支持率之和不等于$100$（百分比）！在媒体黑幕声的质疑下，他们不得不找你寻求帮助。\n\n你将得到各省四舍五入后的支持率，请计算这些省份的支持率在四舍五入前的和是否可能等于100？支持率是以百分比的形式统计的。\n请注意，各省的支持率可以是一个包含任意多位的有限小数。一个小数在四舍五入到整数时，若小数点后第一位小于5则舍，大于等于5则入。\n\n例如：\n$26,17,58$是一种可能的支持率，因为它们可能是$25.8,16.5,57.7$四舍五入后得到的，而$25.8+16.5+57.7=100$。\n$49,49$是一种不可能的支持率，因为当$9$的个数有限时，无论有多少个$9$，均有$49.499+...+99+49.499+...+99<100$。\n\n**[输入格式]**\n\n\t输入包含多组数据，第一行是一个整数T，表示数据组数。\n\t接下来是T组数据，每组数据的第一行是一个整数N，表示参与选举的省份个数。\n\t第二行是N个整数，表示各省四舍五入后的支持率。\n\n**[输出格式]**\n\n\t对于每组数据，若是一种可能的支持率，输出Yes，否则输出No。\n\n**[样例输入]**\n\n\t2\n\t2\n\t49 49\n\t3\n\t26 17 58\n\n**[样例输出]**\n\n\tNo\n\tYes\n\n**[数据范围与约定]**\n\n\t对于30%的数据，1<=n<=3；\n\t对于50%的数据，1<=n<=5；\n\t对于80%的数据，1<=四舍五入后各省的支持率<=99；\n\t对于100%的数据，1<=n<=10000，输入数据中的所有整数均在有符号16位整数范围内。\n\n**[题解]**\n\n简单数值计算题，直接讨论情况并计算即可。\n具体来讲，可以求出使用给出的$N$个支持率，最终可能的支持率的取值范围，检查该范围是否包含$100$。\n一般情况下，一个数X在取舍前可能取$[X-0,5,X+0.5)$之间的任意数值。\n需要注意$0$和$100$等边界问题，因为支持率（百分比）一定是一个$[0,100]$之间的数。\n求出的取值范围最好使用整数并加以开闭区间判断，避免实数精度误差。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int64 long long\nint T, n, x;\nint64 sum, l, r;\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"election.in\");\n\tofstream out(\"election.out\");\n\tin.tie(NULL);\n\n\tin >> T;\n\twhile (T--) {\n\t\tin >> n;\n\t\tint cnt0 = 0, cnt100 = 0, flag = 0;\n\t\tsum = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tin >> x;\n\t\t\tsum += x;\n\t\t\tif (x == 0) ++cnt0;\n\t\t\tif (x == 100) ++cnt100;\n\t\t\tif (x > 100) flag = 1;\n\t\t}\n\t\tif (flag) {\n\t\t\tout << \"No\" << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tl = sum - (n - cnt0) / 2;\n\t\tr = sum + (n + cnt100) / 2;\n\t\tbool cond0 = (l <= 100);\n\t\tbool cond1;\n\t\tif ((n - cnt100) & 1 || (n - cnt100) == 0)\n\t\t\tcond1 = (r >= 100);\n\t\telse cond1 = r > 100;\n\t\tif (cond0 && cond1) out << \"Yes\" << endl;\n\t\telse out << \"No\" << endl;\n\t}\n\treturn 0;\n}\n\n// 注：这个其实是标程，连 double 都没有用 （Orz）\n\n```\n\n**[评价]**\n\n考察了基础的数学知识，只要搞清楚开区间和闭区间就好了。\n\n### T2 异象石\n\n**[题目描述]**\n\n\nAdera 是 Microsoft 应用商店中的一款解谜游戏。\n异象石是进入 Adera 中异时空的引导物，在 Adera 的异时空中有一张地图。这张地图上有$N$个点，\n有$N-1$条双向边把它们连通起来。起初地图上没有任何异象石，在接下来的$M$个时刻中，每个时刻\n会发生以下三种类型的事件之一：\n\n1. 地图的某个点上出现了异象石（已经出现的不会再次出现）；\n2. 地图某个点上的异象石被摧毁（不会摧毁没有异象石的点）；\n3. 向玩家询问使所有异象石所在的点连通的边集的总长度最小是多少。\n\n请你作为玩家回答这些问题。\n\n**[输入格式]**\n\n\t第一行有一个整数N，表示点的个数。\n\t接下来N-1行每行三个整数x,y,z，表示点x和y之间有一条长度为z的双向边。\n\t第N+1行有一个正整数M。\n\t接下来M行每行是一个事件，事件是以下三种格式之一：\n\t+ x  表示点x上出现了异象石\n\t- x  表示点x上的异象石被摧毁\n\t?表示询问使当前所有异象石所在的点连通所需的边集的总长度最小是多少。\n\n**[输出格式]**\n\n\t对于每个 ?事件，输出一个整数表示答案。\n\n**[样例输入]**\n\n\t6\n\t1 2 1\n\t1 3 5\n\t4 1 7\n\t4 5 3\n\t6 4 2\n\t10\n\t+ 3\n\t+ 1\n\t?\n\t+ 6\n\t?\n\t+ 5\n\t?\n\t- 6\n\t- 3\n\t?\n\n**[样例输出]**\n\n\t5\n\t14\n\t17\n\t10\n\n**[数据范围与约定]**\n\n\t对于30%的数据，1 ≤ n, m ≤ 1000。\n\t对于另20%的数据，地图是一条链，或者一朵菊花。\n\t对于100%的数据，1 ≤ n, m ≤ 10^5, 1 ≤ x, y ≤ n, x ≠ y, 1 ≤ z ≤ 10^9。\n\n**[题解]**\n\n如果在$a_1,a_2...a_k$这些点上有异象石，则所需代价就是按照DFS序依次遍历这$k$个点再回到根的总距离。\n这个距离数还等于$a_1,a_2...a_k$排成一个环形序列，相邻两个点的距离之和。\n因此用set维护有异象石的点构成的DFS序，用一个全局变量记录答案，插入、删除时更新set的同时利用LCA算法更新答案。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 110000\n#define NOE -1\n#define int64 long long\n\nint n, m, x, y, z, v;\nchar op;\n\nset<int> s;\nint64 ans, dis[maxn], g[maxn];\nint cnt = 0;\nint f[maxn][20], dep[maxn], dfn[maxn], seq[maxn];\n\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n\tint weight;\n};\n\nedgeNode edges[maxn << 1];\nint heads[maxn << 1];\nint numEdges = 0;\n\ninline void init() { memset(heads, NOE, sizeof(heads)); }\ninline void addEdge(int vertex1, int vertex2, int weight) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = weight;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\n\ninline void addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n}\n\ninline void rDFS(int x, int fa) {\n\tf[x][0] = fa;\n\tdep[x] = dep[fa] + 1;\n\tdfn[x] = ++cnt;\n\tseq[cnt] = x;\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext) {\n\t\tint vt = edges[i].vertexTo;\n\t\tif (vt != fa) {\n\t\t\tdis[vt] = dis[x] + edges[i].weight;\n\t\t\trDFS(vt, x);\n\t\t}\n\t}\n}\n\ninline void initFa() {\n\tfor (int i = 1; i <= 19; ++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tf[j][i] = f[f[j][i - 1]][i - 1];\n}\n\ninline int LCA(int x, int y) {\n\tif (dep[x] < dep[y]) swap(x, y);\n\tint t = dep[x] - dep[y];\n\tfor (int i = 0; i <= 16; ++i)\n\t\tif (t & (1 << i)) x = f[x][i];\n\tif (x == y) return x;\n\tfor (int i = 16; i >= 0; --i) {\n\t\tif (f[x][i] != f[y][i]) {\n\t\t\tx = f[x][i];\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\n\ninline int64 getDist(int x, int y) {\n\treturn dis[x] + dis[y] - dis[LCA(x, y)] * 2;\n}\n\ninline void find(int x, int &l, int &r) {\n\tset<int>::iterator it = s.lower_bound(x);\n\tif (it != s.end()) r = *it;\n\telse r = *s.begin();\n\tif (it == s.begin()) it = s.end();\n\tl = *(--it);\n\tl = seq[l];\n\tr = seq[r];\n}\n\ninline void insert(int x) {\n\tif (!s.empty()) {\n\t\tint l, r;\n\t\tfind(dfn[x], l, r);\n\t\tans -= g[r];\n\t\tg[x] = getDist(l, x);\n\t\tg[r] = getDist(x, r);\n\t\tans += g[x] + g[r];\n\t} else g[x] = 0;\n\ts.insert(dfn[x]);\n}\n\ninline void erase(int x) {\n\tint l, r;\n\ts.erase(dfn[x]);\n\tif (!s.empty()) {\n\t\tfind(dfn[x], l, r);\n\t\tans -= g[x] + g[r];\n\t\tg[r] = getDist(l, r);\n\t}\n\tans += g[r];\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"stone.in\");\n\tofstream out(\"stone.out\");\n\tin.tie(NULL);\n\t\n\tinit();\n\tin >> n;\n\tfor (int i = 1; i < n; ++i) {\n\t\tin >> x >> y >> z;\n\t\taddDuplexEdge(x, y, z);\n\t}\n\t\n\trDFS(1, 0);\n\tinitFa();\n\n\tin >> m;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tin >> op;\n\t\tswitch (op) {\n\t\t\tcase '+' : {\n\t\t\t\tin >> v;\n\t\t\t\tinsert(v);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase '-' : {\n\t\t\t\tin >> v;\n\t\t\t\terase(v);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase '?' : {\n\t\t\t\tout << ans / 2 << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n// 这道题必须一次操作更新一次答案，否则会 TLE\n\n```\n此处附上 std::set 的[用法](https://zh.cppreference.com/w/cpp/container/set)\n\n**[评价]**\n\n对于没有做过的同学来说，思维难度还是比较大的，这种方法就直接记住就行了，要用的时候直接拿出来用。\n\n### T3 序列变换（本次重点！！！）\n\n**[题目描述]**\n\n给定一个长度为$N$的数列$A_i$。\n你可以对数列进行若干次操作，每次操作可以从数列中任选一个数，把它移动到数列的开头或者结尾。\n求最少经过多少次操作，可以把数列变成单调不减的。“单调不减”意味着数列中的任意一个数都不大于排在它后边的数。\n\n**[输入格式]**\n\n\t第一行是一个正整数N。\n\t第二行是N个正整数Ai。\n\n**[输出格式]**\n\n\t输出一个整数，表示最少需要的操作次数。\n\n**[样例输入]**\n\n\t5\n\t6 3 7 8 6\n\n**[样例输出]**\n\n\t2\n\n**[数据范围与约定]**\n\n\t对于30%的数据，满足1≤n≤10。\n\t对于60% 的数据，满足1≤n≤1000。\n\t对于100% 的数据，满足1≤n≤1000000，1≤Ai≤1000000。\n\n**[题解]**\n\n经过分析可以发现，最优解情况下，需要保持一个子序列不动，这个子序列满足：\n\n1. 子序列单调递增；\n2. 若子序列中最小数是$L$，最大数是$R$，则子序列必须包含$[L+1,R-1]$中的数列中的所有数。\n\n用单调队列求出满足这两个条件的子序列的最大长度，用$n$减去就是答案。\n即这个子序列保持不动，其余数向前或后移动一次。\n\n**[参考代码]**\n\n```cpp\n// 以下为 std 代码，不感兴趣的同学可以跳过\n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<iomanip>\n#include<queue>\n#include<set>\nusing namespace std;\nconst int SIZE = 1000010;\nint a[SIZE], q[SIZE];\nint n, m, ans;\nvector<int> b[SIZE];\n\nint main() {\n\tfreopen(\"change.in\",\"r\",stdin);\n\tfreopen(\"change.out\",\"w\",stdout);\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tb[a[i]].push_back(i);\n\t\tm = max(m, a[i]);\n\t}\n\tint l = 1, r = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t\treverse(b[i].begin(), b[i].end());\n\t\tfor (int j = 0; j < b[i].size(); j++) {\n\t\t\tint k = b[i][j];\n\t\t\twhile (l <= r && q[r] > k) {\n\t\t\t\twhile (l < r && a[q[l]] < a[q[r]]) l++;\n\t\t\t\tr--;\n\t\t\t}\n\t\t\tans = max(ans, r - l + 2 + j);\n\t\t}\n\t\tfor (int j = b[i].size() - 1; j >= 0; j--) {\n\t\t\tq[++r] = b[i][j];\n\t\t}\n\t\t//cout << ans << endl;\n\t}\n\tcout << n - ans << endl;\n}\n```\n\n```cpp\n// 以下是考试时瞎打的代码：\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 1100000\n#define INF 0x3f3f3f3f\n\nint n, A[maxn], B[maxn];\nint ans = -INF;\nint len = 0;\n\ninline bool compare(int x, int y) {\n\tif (A[x] == A[y]) return x < y;\n\treturn A[x] < A[y];\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"change.in\");\n\tofstream out(\"change.out\");\n\tin.tie(NULL);\n\t\n\tin >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tin >> A[i];\n\t\tB[i] = i;\n\t}\n\tsort(B + 1, B + n + 1, compare);\n\t// B 数组记录 A 中元素的 位置，且以 A 中相应的元素大小为优先排序\n\tint j;\n\tfor (int i = 1; i <= n; i = j + 1) {\n\t\tfor (j = i; i < n && B[j] < B[j + 1]; j++);\n\t\tlen = j - i + 1;\n\t\t// 以上这段先找出从 i 开始序号递增的子序列的最大长度\n\t\tfor (int k = i - 1; k != 0 && A[B[k]] == A[B[i - 1]]; --k)\n\t\t\tif (B[k] < B[i]) len++;\n\t\tfor (int k = j + 1; k <= n && A[B[j + 1]] == A[B[k]]; ++k)\n\t\t\tif (B[j] < B[k]) len++;\n\t\t// 因为前面 i 直接变为 j + 1，所以可能出现重复的数字忽略的情况\n\t\t// 故在上面两个循环中：\n\t\t// 一个向左扫，一个向右扫，同时判断在原数组中的位置是否递增\n\t\t// 这种方法速度会更快一点。\n\t\tans = max(ans, len);\n\t\t// 获取最大长度\n\t}\n\tout << n - ans;\n\t// 相减\n\treturn 0;\n}\n\n// 考完试后自己都无法记起这是什么神奇的算法，不过仔细想想还是能想起来的。\n\n```\n\n**[评价]**\n\n这道题既考验思维又考验代码能力，好题。\n\n### 总结\n\n首先，仍然要记住仔细读题，这次第一题就是因为读题不仔细，思考不充分才出问题的。\n其次，有些代码还是好好打打草稿，写写流程图比较好，防止像第三题一样想不起来（#滑稽）。\n\n\n\n---","slug":"NOIP-模拟-2018-8-7-题解-我写了个自己都看不懂的程序","published":1,"updated":"2018-09-16T04:14:28.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbs30030rgc874o5vvz3","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>今天创历史新高$290$分，第三道题考完自己都没看出自己用了啥方法（Orz），感觉自已要去补数据结构……另外第一道题实在是坑……十分啊！！</p>\n<a id=\"more\"></a>\n<h3 id=\"T1-选举\"><a href=\"#T1-选举\" class=\"headerlink\" title=\"T1 选举\"></a>T1 选举</h3><p><strong>[题目描述]</strong></p>\n<p>$C$国的总统选举委员会最近遇到了一些麻烦。</p>\n<p>他们在统计各省对H先生的支持率（百分比）时，把支持率四舍五入到了整数。等他们公布结果后，该国媒体发现这些省份的支持率之和不等于$100$（百分比）！在媒体黑幕声的质疑下，他们不得不找你寻求帮助。</p>\n<p>你将得到各省四舍五入后的支持率，请计算这些省份的支持率在四舍五入前的和是否可能等于100？支持率是以百分比的形式统计的。<br>请注意，各省的支持率可以是一个包含任意多位的有限小数。一个小数在四舍五入到整数时，若小数点后第一位小于5则舍，大于等于5则入。</p>\n<p>例如：<br>$26,17,58$是一种可能的支持率，因为它们可能是$25.8,16.5,57.7$四舍五入后得到的，而$25.8+16.5+57.7=100$。<br>$49,49$是一种不可能的支持率，因为当$9$的个数有限时，无论有多少个$9$，均有$49.499+…+99+49.499+…+99&lt;100$。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>输入包含多组数据，第一行是一个整数T，表示数据组数。\n接下来是T组数据，每组数据的第一行是一个整数N，表示参与选举的省份个数。\n第二行是N个整数，表示各省四舍五入后的支持率。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每组数据，若是一种可能的支持率，输出Yes，否则输出No。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>2\n2\n49 49\n3\n26 17 58\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>No\nYes\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，1&lt;=n&lt;=3；\n对于50%的数据，1&lt;=n&lt;=5；\n对于80%的数据，1&lt;=四舍五入后各省的支持率&lt;=99；\n对于100%的数据，1&lt;=n&lt;=10000，输入数据中的所有整数均在有符号16位整数范围内。\n</code></pre><p><strong>[题解]</strong></p>\n<p>简单数值计算题，直接讨论情况并计算即可。<br>具体来讲，可以求出使用给出的$N$个支持率，最终可能的支持率的取值范围，检查该范围是否包含$100$。<br>一般情况下，一个数X在取舍前可能取$[X-0,5,X+0.5)$之间的任意数值。<br>需要注意$0$和$100$等边界问题，因为支持率（百分比）一定是一个$[0,100]$之间的数。<br>求出的取值范围最好使用整数并加以开闭区间判断，避免实数精度误差。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int64 long long</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, x;</span><br><span class=\"line\">int64 sum, l, r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"election.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"election.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tin &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cnt0 = <span class=\"number\">0</span>, cnt100 = <span class=\"number\">0</span>, flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tin &gt;&gt; x;</span><br><span class=\"line\">\t\t\tsum += x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) ++cnt0;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">100</span>) ++cnt100;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">100</span>) flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tout &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tl = sum - (n - cnt0) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tr = sum + (n + cnt100) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> cond0 = (l &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> cond1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((n - cnt100) &amp; <span class=\"number\">1</span> || (n - cnt100) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcond1 = (r &gt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cond1 = r &gt; <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cond0 &amp;&amp; cond1) out &lt;&lt; <span class=\"string\">\"Yes\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> out &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注：这个其实是标程，连 double 都没有用 （Orz）</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>考察了基础的数学知识，只要搞清楚开区间和闭区间就好了。</p>\n<h3 id=\"T2-异象石\"><a href=\"#T2-异象石\" class=\"headerlink\" title=\"T2 异象石\"></a>T2 异象石</h3><p><strong>[题目描述]</strong></p>\n<p>Adera 是 Microsoft 应用商店中的一款解谜游戏。<br>异象石是进入 Adera 中异时空的引导物，在 Adera 的异时空中有一张地图。这张地图上有$N$个点，<br>有$N-1$条双向边把它们连通起来。起初地图上没有任何异象石，在接下来的$M$个时刻中，每个时刻<br>会发生以下三种类型的事件之一：</p>\n<ol>\n<li>地图的某个点上出现了异象石（已经出现的不会再次出现）；</li>\n<li>地图某个点上的异象石被摧毁（不会摧毁没有异象石的点）；</li>\n<li>向玩家询问使所有异象石所在的点连通的边集的总长度最小是多少。</li>\n</ol>\n<p>请你作为玩家回答这些问题。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>第一行有一个整数N，表示点的个数。\n接下来N-1行每行三个整数x,y,z，表示点x和y之间有一条长度为z的双向边。\n第N+1行有一个正整数M。\n接下来M行每行是一个事件，事件是以下三种格式之一：\n+ x  表示点x上出现了异象石\n- x  表示点x上的异象石被摧毁\n?表示询问使当前所有异象石所在的点连通所需的边集的总长度最小是多少。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每个 ?事件，输出一个整数表示答案。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>6\n1 2 1\n1 3 5\n4 1 7\n4 5 3\n6 4 2\n10\n+ 3\n+ 1\n?\n+ 6\n?\n+ 5\n?\n- 6\n- 3\n?\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>5\n14\n17\n10\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，1 ≤ n, m ≤ 1000。\n对于另20%的数据，地图是一条链，或者一朵菊花。\n对于100%的数据，1 ≤ n, m ≤ 10^5, 1 ≤ x, y ≤ n, x ≠ y, 1 ≤ z ≤ 10^9。\n</code></pre><p><strong>[题解]</strong></p>\n<p>如果在$a_1,a_2…a_k$这些点上有异象石，则所需代价就是按照DFS序依次遍历这$k$个点再回到根的总距离。<br>这个距离数还等于$a_1,a_2…a_k$排成一个环形序列，相邻两个点的距离之和。<br>因此用set维护有异象石的点构成的DFS序，用一个全局变量记录答案，插入、删除时更新set的同时利用LCA算法更新答案。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int64 long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, y, z, v;</span><br><span class=\"line\"><span class=\"keyword\">char</span> op;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">int64 ans, dis[maxn], g[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn][<span class=\"number\">20</span>], dep[maxn], dfn[maxn], seq[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = weight;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rDFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tf[x][<span class=\"number\">0</span>] = fa;</span><br><span class=\"line\">\tdep[x] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tdfn[x] = ++cnt;</span><br><span class=\"line\">\tseq[cnt] = x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> vt = edges[i].vertexTo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (vt != fa) &#123;</span><br><span class=\"line\">\t\t\tdis[vt] = dis[x] + edges[i].weight;</span><br><span class=\"line\">\t\t\trDFS(vt, x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">initFa</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\tf[j][i] = f[f[j][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = dep[x] - dep[y];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">16</span>; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &amp; (<span class=\"number\">1</span> &lt;&lt; i)) x = f[x][i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">16</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (f[x][i] != f[y][i]) &#123;</span><br><span class=\"line\">\t\t\tx = f[x][i];</span><br><span class=\"line\">\t\t\ty = f[y][i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[x][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">getDist</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dis[x] + dis[y] - dis[LCA(x, y)] * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> &amp;l, <span class=\"keyword\">int</span> &amp;r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = s.lower_bound(x);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it != s.end()) r = *it;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> r = *s.begin();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == s.begin()) it = s.end();</span><br><span class=\"line\">\tl = *(--it);</span><br><span class=\"line\">\tl = seq[l];</span><br><span class=\"line\">\tr = seq[r];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!s.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">\t\tfind(dfn[x], l, r);</span><br><span class=\"line\">\t\tans -= g[r];</span><br><span class=\"line\">\t\tg[x] = getDist(l, x);</span><br><span class=\"line\">\t\tg[r] = getDist(x, r);</span><br><span class=\"line\">\t\tans += g[x] + g[r];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> g[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ts.insert(dfn[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">\ts.erase(dfn[x]);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!s.empty()) &#123;</span><br><span class=\"line\">\t\tfind(dfn[x], l, r);</span><br><span class=\"line\">\t\tans -= g[x] + g[r];</span><br><span class=\"line\">\t\tg[r] = getDist(l, r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans += g[r];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"stone.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"stone.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">\t\taddDuplexEdge(x, y, z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\trDFS(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tinitFa();</span><br><span class=\"line\"></span><br><span class=\"line\">\tin &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; op;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'+'</span> : &#123;</span><br><span class=\"line\">\t\t\t\tin &gt;&gt; v;</span><br><span class=\"line\">\t\t\t\tinsert(v);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'-'</span> : &#123;</span><br><span class=\"line\">\t\t\t\tin &gt;&gt; v;</span><br><span class=\"line\">\t\t\t\terase(v);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'?'</span> : &#123;</span><br><span class=\"line\">\t\t\t\tout &lt;&lt; ans / <span class=\"number\">2</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这道题必须一次操作更新一次答案，否则会 TLE</span></span><br></pre></td></tr></table></figure>\n<p>此处附上 std::set 的<a href=\"https://zh.cppreference.com/w/cpp/container/set\" target=\"_blank\" rel=\"noopener\">用法</a></p>\n<p><strong>[评价]</strong></p>\n<p>对于没有做过的同学来说，思维难度还是比较大的，这种方法就直接记住就行了，要用的时候直接拿出来用。</p>\n<h3 id=\"T3-序列变换（本次重点！！！）\"><a href=\"#T3-序列变换（本次重点！！！）\" class=\"headerlink\" title=\"T3 序列变换（本次重点！！！）\"></a>T3 序列变换（本次重点！！！）</h3><p><strong>[题目描述]</strong></p>\n<p>给定一个长度为$N$的数列$A_i$。<br>你可以对数列进行若干次操作，每次操作可以从数列中任选一个数，把它移动到数列的开头或者结尾。<br>求最少经过多少次操作，可以把数列变成单调不减的。“单调不减”意味着数列中的任意一个数都不大于排在它后边的数。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>第一行是一个正整数N。\n第二行是N个正整数Ai。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>输出一个整数，表示最少需要的操作次数。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>5\n6 3 7 8 6\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>2\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，满足1≤n≤10。\n对于60% 的数据，满足1≤n≤1000。\n对于100% 的数据，满足1≤n≤1000000，1≤Ai≤1000000。\n</code></pre><p><strong>[题解]</strong></p>\n<p>经过分析可以发现，最优解情况下，需要保持一个子序列不动，这个子序列满足：</p>\n<ol>\n<li>子序列单调递增；</li>\n<li>若子序列中最小数是$L$，最大数是$R$，则子序列必须包含$[L+1,R-1]$中的数列中的所有数。</li>\n</ol>\n<p>用单调队列求出满足这两个条件的子序列的最大长度，用$n$减去就是答案。<br>即这个子序列保持不动，其余数向前或后移动一次。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下为 std 代码，不感兴趣的同学可以跳过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[SIZE], q[SIZE];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, ans;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; b[SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"change.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"change.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tb[a[i]].push_back(i);</span><br><span class=\"line\">\t\tm = max(m, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\treverse(b[i].begin(), b[i].end());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b[i].size(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> k = b[i][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (l &lt;= r &amp;&amp; q[r] &gt; k) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (l &lt; r &amp;&amp; a[q[l]] &lt; a[q[r]]) l++;</span><br><span class=\"line\">\t\t\t\tr--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = max(ans, r - l + <span class=\"number\">2</span> + j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = b[i].size() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">\t\t\tq[++r] = b[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; n - ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下是考试时瞎打的代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1100000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, A[maxn], B[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans = -INF;</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (A[x] == A[y]) <span class=\"keyword\">return</span> x &lt; y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A[x] &lt; A[y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"change.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"change.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; A[i];</span><br><span class=\"line\">\t\tB[i] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(B + <span class=\"number\">1</span>, B + n + <span class=\"number\">1</span>, compare);</span><br><span class=\"line\">\t<span class=\"comment\">// B 数组记录 A 中元素的 位置，且以 A 中相应的元素大小为优先排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i = j + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i; i &lt; n &amp;&amp; B[j] &lt; B[j + <span class=\"number\">1</span>]; j++);</span><br><span class=\"line\">\t\tlen = j - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 以上这段先找出从 i 开始序号递增的子序列的最大长度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i - <span class=\"number\">1</span>; k != <span class=\"number\">0</span> &amp;&amp; A[B[k]] == A[B[i - <span class=\"number\">1</span>]]; --k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (B[k] &lt; B[i]) len++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j + <span class=\"number\">1</span>; k &lt;= n &amp;&amp; A[B[j + <span class=\"number\">1</span>]] == A[B[k]]; ++k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (B[j] &lt; B[k]) len++;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 因为前面 i 直接变为 j + 1，所以可能出现重复的数字忽略的情况</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 故在上面两个循环中：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 一个向左扫，一个向右扫，同时判断在原数组中的位置是否递增</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 这种方法速度会更快一点。</span></span><br><span class=\"line\">\t\tans = max(ans, len);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取最大长度</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tout &lt;&lt; n - ans;</span><br><span class=\"line\">\t<span class=\"comment\">// 相减</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 考完试后自己都无法记起这是什么神奇的算法，不过仔细想想还是能想起来的。</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>这道题既考验思维又考验代码能力，好题。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>首先，仍然要记住仔细读题，这次第一题就是因为读题不仔细，思考不充分才出问题的。<br>其次，有些代码还是好好打打草稿，写写流程图比较好，防止像第三题一样想不起来（#滑稽）。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>今天创历史新高$290$分，第三道题考完自己都没看出自己用了啥方法（Orz），感觉自已要去补数据结构……另外第一道题实在是坑……十分啊！！</p>","more":"<h3 id=\"T1-选举\"><a href=\"#T1-选举\" class=\"headerlink\" title=\"T1 选举\"></a>T1 选举</h3><p><strong>[题目描述]</strong></p>\n<p>$C$国的总统选举委员会最近遇到了一些麻烦。</p>\n<p>他们在统计各省对H先生的支持率（百分比）时，把支持率四舍五入到了整数。等他们公布结果后，该国媒体发现这些省份的支持率之和不等于$100$（百分比）！在媒体黑幕声的质疑下，他们不得不找你寻求帮助。</p>\n<p>你将得到各省四舍五入后的支持率，请计算这些省份的支持率在四舍五入前的和是否可能等于100？支持率是以百分比的形式统计的。<br>请注意，各省的支持率可以是一个包含任意多位的有限小数。一个小数在四舍五入到整数时，若小数点后第一位小于5则舍，大于等于5则入。</p>\n<p>例如：<br>$26,17,58$是一种可能的支持率，因为它们可能是$25.8,16.5,57.7$四舍五入后得到的，而$25.8+16.5+57.7=100$。<br>$49,49$是一种不可能的支持率，因为当$9$的个数有限时，无论有多少个$9$，均有$49.499+…+99+49.499+…+99&lt;100$。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>输入包含多组数据，第一行是一个整数T，表示数据组数。\n接下来是T组数据，每组数据的第一行是一个整数N，表示参与选举的省份个数。\n第二行是N个整数，表示各省四舍五入后的支持率。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每组数据，若是一种可能的支持率，输出Yes，否则输出No。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>2\n2\n49 49\n3\n26 17 58\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>No\nYes\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，1&lt;=n&lt;=3；\n对于50%的数据，1&lt;=n&lt;=5；\n对于80%的数据，1&lt;=四舍五入后各省的支持率&lt;=99；\n对于100%的数据，1&lt;=n&lt;=10000，输入数据中的所有整数均在有符号16位整数范围内。\n</code></pre><p><strong>[题解]</strong></p>\n<p>简单数值计算题，直接讨论情况并计算即可。<br>具体来讲，可以求出使用给出的$N$个支持率，最终可能的支持率的取值范围，检查该范围是否包含$100$。<br>一般情况下，一个数X在取舍前可能取$[X-0,5,X+0.5)$之间的任意数值。<br>需要注意$0$和$100$等边界问题，因为支持率（百分比）一定是一个$[0,100]$之间的数。<br>求出的取值范围最好使用整数并加以开闭区间判断，避免实数精度误差。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int64 long long</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, x;</span><br><span class=\"line\">int64 sum, l, r;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"election.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"election.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tin &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cnt0 = <span class=\"number\">0</span>, cnt100 = <span class=\"number\">0</span>, flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tin &gt;&gt; x;</span><br><span class=\"line\">\t\t\tsum += x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) ++cnt0;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">100</span>) ++cnt100;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">100</span>) flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tout &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tl = sum - (n - cnt0) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tr = sum + (n + cnt100) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> cond0 = (l &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> cond1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((n - cnt100) &amp; <span class=\"number\">1</span> || (n - cnt100) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcond1 = (r &gt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> cond1 = r &gt; <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cond0 &amp;&amp; cond1) out &lt;&lt; <span class=\"string\">\"Yes\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> out &lt;&lt; <span class=\"string\">\"No\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注：这个其实是标程，连 double 都没有用 （Orz）</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>考察了基础的数学知识，只要搞清楚开区间和闭区间就好了。</p>\n<h3 id=\"T2-异象石\"><a href=\"#T2-异象石\" class=\"headerlink\" title=\"T2 异象石\"></a>T2 异象石</h3><p><strong>[题目描述]</strong></p>\n<p>Adera 是 Microsoft 应用商店中的一款解谜游戏。<br>异象石是进入 Adera 中异时空的引导物，在 Adera 的异时空中有一张地图。这张地图上有$N$个点，<br>有$N-1$条双向边把它们连通起来。起初地图上没有任何异象石，在接下来的$M$个时刻中，每个时刻<br>会发生以下三种类型的事件之一：</p>\n<ol>\n<li>地图的某个点上出现了异象石（已经出现的不会再次出现）；</li>\n<li>地图某个点上的异象石被摧毁（不会摧毁没有异象石的点）；</li>\n<li>向玩家询问使所有异象石所在的点连通的边集的总长度最小是多少。</li>\n</ol>\n<p>请你作为玩家回答这些问题。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>第一行有一个整数N，表示点的个数。\n接下来N-1行每行三个整数x,y,z，表示点x和y之间有一条长度为z的双向边。\n第N+1行有一个正整数M。\n接下来M行每行是一个事件，事件是以下三种格式之一：\n+ x  表示点x上出现了异象石\n- x  表示点x上的异象石被摧毁\n?表示询问使当前所有异象石所在的点连通所需的边集的总长度最小是多少。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每个 ?事件，输出一个整数表示答案。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>6\n1 2 1\n1 3 5\n4 1 7\n4 5 3\n6 4 2\n10\n+ 3\n+ 1\n?\n+ 6\n?\n+ 5\n?\n- 6\n- 3\n?\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>5\n14\n17\n10\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，1 ≤ n, m ≤ 1000。\n对于另20%的数据，地图是一条链，或者一朵菊花。\n对于100%的数据，1 ≤ n, m ≤ 10^5, 1 ≤ x, y ≤ n, x ≠ y, 1 ≤ z ≤ 10^9。\n</code></pre><p><strong>[题解]</strong></p>\n<p>如果在$a_1,a_2…a_k$这些点上有异象石，则所需代价就是按照DFS序依次遍历这$k$个点再回到根的总距离。<br>这个距离数还等于$a_1,a_2…a_k$排成一个环形序列，相邻两个点的距离之和。<br>因此用set维护有异象石的点构成的DFS序，用一个全局变量记录答案，插入、删除时更新set的同时利用LCA算法更新答案。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int64 long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, y, z, v;</span><br><span class=\"line\"><span class=\"keyword\">char</span> op;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">int64 ans, dis[maxn], g[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn][<span class=\"number\">20</span>], dep[maxn], dfn[maxn], seq[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = weight;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rDFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tf[x][<span class=\"number\">0</span>] = fa;</span><br><span class=\"line\">\tdep[x] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tdfn[x] = ++cnt;</span><br><span class=\"line\">\tseq[cnt] = x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> vt = edges[i].vertexTo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (vt != fa) &#123;</span><br><span class=\"line\">\t\t\tdis[vt] = dis[x] + edges[i].weight;</span><br><span class=\"line\">\t\t\trDFS(vt, x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">initFa</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\tf[j][i] = f[f[j][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = dep[x] - dep[y];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">16</span>; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (t &amp; (<span class=\"number\">1</span> &lt;&lt; i)) x = f[x][i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == y) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">16</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (f[x][i] != f[y][i]) &#123;</span><br><span class=\"line\">\t\t\tx = f[x][i];</span><br><span class=\"line\">\t\t\ty = f[y][i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[x][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">getDist</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dis[x] + dis[y] - dis[LCA(x, y)] * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> &amp;l, <span class=\"keyword\">int</span> &amp;r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = s.lower_bound(x);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it != s.end()) r = *it;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> r = *s.begin();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == s.begin()) it = s.end();</span><br><span class=\"line\">\tl = *(--it);</span><br><span class=\"line\">\tl = seq[l];</span><br><span class=\"line\">\tr = seq[r];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!s.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">\t\tfind(dfn[x], l, r);</span><br><span class=\"line\">\t\tans -= g[r];</span><br><span class=\"line\">\t\tg[x] = getDist(l, x);</span><br><span class=\"line\">\t\tg[r] = getDist(x, r);</span><br><span class=\"line\">\t\tans += g[x] + g[r];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> g[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ts.insert(dfn[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">\ts.erase(dfn[x]);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!s.empty()) &#123;</span><br><span class=\"line\">\t\tfind(dfn[x], l, r);</span><br><span class=\"line\">\t\tans -= g[x] + g[r];</span><br><span class=\"line\">\t\tg[r] = getDist(l, r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans += g[r];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"stone.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"stone.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">\t\taddDuplexEdge(x, y, z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\trDFS(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tinitFa();</span><br><span class=\"line\"></span><br><span class=\"line\">\tin &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; op;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (op) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'+'</span> : &#123;</span><br><span class=\"line\">\t\t\t\tin &gt;&gt; v;</span><br><span class=\"line\">\t\t\t\tinsert(v);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'-'</span> : &#123;</span><br><span class=\"line\">\t\t\t\tin &gt;&gt; v;</span><br><span class=\"line\">\t\t\t\terase(v);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">'?'</span> : &#123;</span><br><span class=\"line\">\t\t\t\tout &lt;&lt; ans / <span class=\"number\">2</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这道题必须一次操作更新一次答案，否则会 TLE</span></span><br></pre></td></tr></table></figure>\n<p>此处附上 std::set 的<a href=\"https://zh.cppreference.com/w/cpp/container/set\" target=\"_blank\" rel=\"noopener\">用法</a></p>\n<p><strong>[评价]</strong></p>\n<p>对于没有做过的同学来说，思维难度还是比较大的，这种方法就直接记住就行了，要用的时候直接拿出来用。</p>\n<h3 id=\"T3-序列变换（本次重点！！！）\"><a href=\"#T3-序列变换（本次重点！！！）\" class=\"headerlink\" title=\"T3 序列变换（本次重点！！！）\"></a>T3 序列变换（本次重点！！！）</h3><p><strong>[题目描述]</strong></p>\n<p>给定一个长度为$N$的数列$A_i$。<br>你可以对数列进行若干次操作，每次操作可以从数列中任选一个数，把它移动到数列的开头或者结尾。<br>求最少经过多少次操作，可以把数列变成单调不减的。“单调不减”意味着数列中的任意一个数都不大于排在它后边的数。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>第一行是一个正整数N。\n第二行是N个正整数Ai。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>输出一个整数，表示最少需要的操作次数。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>5\n6 3 7 8 6\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>2\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，满足1≤n≤10。\n对于60% 的数据，满足1≤n≤1000。\n对于100% 的数据，满足1≤n≤1000000，1≤Ai≤1000000。\n</code></pre><p><strong>[题解]</strong></p>\n<p>经过分析可以发现，最优解情况下，需要保持一个子序列不动，这个子序列满足：</p>\n<ol>\n<li>子序列单调递增；</li>\n<li>若子序列中最小数是$L$，最大数是$R$，则子序列必须包含$[L+1,R-1]$中的数列中的所有数。</li>\n</ol>\n<p>用单调队列求出满足这两个条件的子序列的最大长度，用$n$减去就是答案。<br>即这个子序列保持不动，其余数向前或后移动一次。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下为 std 代码，不感兴趣的同学可以跳过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[SIZE], q[SIZE];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, ans;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; b[SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"change.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"change.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tb[a[i]].push_back(i);</span><br><span class=\"line\">\t\tm = max(m, a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\treverse(b[i].begin(), b[i].end());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; b[i].size(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> k = b[i][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (l &lt;= r &amp;&amp; q[r] &gt; k) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (l &lt; r &amp;&amp; a[q[l]] &lt; a[q[r]]) l++;</span><br><span class=\"line\">\t\t\t\tr--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = max(ans, r - l + <span class=\"number\">2</span> + j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = b[i].size() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">\t\t\tq[++r] = b[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; n - ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下是考试时瞎打的代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1100000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, A[maxn], B[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans = -INF;</span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (A[x] == A[y]) <span class=\"keyword\">return</span> x &lt; y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> A[x] &lt; A[y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"change.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"change.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; A[i];</span><br><span class=\"line\">\t\tB[i] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(B + <span class=\"number\">1</span>, B + n + <span class=\"number\">1</span>, compare);</span><br><span class=\"line\">\t<span class=\"comment\">// B 数组记录 A 中元素的 位置，且以 A 中相应的元素大小为优先排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i = j + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i; i &lt; n &amp;&amp; B[j] &lt; B[j + <span class=\"number\">1</span>]; j++);</span><br><span class=\"line\">\t\tlen = j - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 以上这段先找出从 i 开始序号递增的子序列的最大长度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i - <span class=\"number\">1</span>; k != <span class=\"number\">0</span> &amp;&amp; A[B[k]] == A[B[i - <span class=\"number\">1</span>]]; --k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (B[k] &lt; B[i]) len++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j + <span class=\"number\">1</span>; k &lt;= n &amp;&amp; A[B[j + <span class=\"number\">1</span>]] == A[B[k]]; ++k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (B[j] &lt; B[k]) len++;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 因为前面 i 直接变为 j + 1，所以可能出现重复的数字忽略的情况</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 故在上面两个循环中：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 一个向左扫，一个向右扫，同时判断在原数组中的位置是否递增</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 这种方法速度会更快一点。</span></span><br><span class=\"line\">\t\tans = max(ans, len);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取最大长度</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tout &lt;&lt; n - ans;</span><br><span class=\"line\">\t<span class=\"comment\">// 相减</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 考完试后自己都无法记起这是什么神奇的算法，不过仔细想想还是能想起来的。</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>这道题既考验思维又考验代码能力，好题。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>首先，仍然要记住仔细读题，这次第一题就是因为读题不仔细，思考不充分才出问题的。<br>其次，有些代码还是好好打打草稿，写写流程图比较好，防止像第三题一样想不起来（#滑稽）。</p>\n<hr>"},{"title":"[C++ 奇技淫巧] 流迭代器使用","date":"2018-08-17T11:09:16.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n自从熟知了 STL 库这个东西，我就再也离不开它了，以前一直以为**只有容器才会有迭代器可以用**，然而这是因为自己的知识水平还不够高，今天就介绍一下流迭代器这种神奇的存在。\n\n<!-- more -->\n\n### 流迭代器\n\n**iostream 迭代器（iostream iterator）**：与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。\n\n虽然 `iostream` 类型不是容器，但标准库同样提供了在 `iostream` 对象上使用的迭代器：`istream_iterator` 用于读取输入流，而 `ostream_iterator` 则用于写输出流。这些迭代器将它们所对应的流视为特定类型的**元素序列**。\n\n下面列出流迭代器的使用方法：\n\n|     `iostream`  迭代器的构造函数      |                          对应的意义                          |\n| :-----------------------------------: | :----------------------------------------------------------: |\n|    `istream_iterator<T> in(strm)`     | 创建从输入流 `strm` 中读取T类型对象的 `istream_iterator` 对象 |\n|        `istream_terator<T> in`        |           `istream_iterator` 对象的超出末端迭代器            |\n|    `ostream_iterator<T> out(strm)`    | 创建将T类型的对象写到输出流 `strm` 的 `ostream_iterator` 对象 |\n| `ostream_iterator<T> out(str, delim)` | 创建将 `T` 类型的对象写到输出流 `strm` 的 `ostream_iterator` 对象，在写入过程中使用 `delim` 作为元素的分隔符。`delim` 是以空字符结束的字符数组（C风格字符串）。 |\n\n| `istream_iterator` 的操作 |                          对应的意义                          |\n| :-----------------------: | :----------------------------------------------------------: |\n| `it1 == it2; it1 != it2`  | 比较两上 `istream_iterator` 对象是否相等（不等）。迭代器读取的必须是相同的类型。如果两个迭代器都是 `end` 值，则它们相等。对于两个都不指向流结束位置的迭代器，如果它们使用同一个输入流构造，则它们也相等 |\n|           `*it`           |                      返回从流中读取的值                      |\n|         `it->mem`         |   是 `(*it).mem` 的同义词。返回从流中读取的对象的 mem 成员   |\n|       `++it; it++`        | 通过使用元素类型提供的 `>>` 操作从输入流中读取下一个元素值，使迭代器向前移动。通常，前缀版本使用迭代器在流中向前移动，并返回对加 $1$ 后的迭代器的引用。而后缀版本使迭代器在流中向前移动后，返回原值 |\n\n**注：流迭代器都是类模板：任何已定义输入操作符（`>>` 操作符）的类型都可以定义istream_iterator。任何已定义输出操作符（`<<` 操作符）的类型可定义 `ostream_iterator`。** \n\n### 流迭代器使用\n\n**注：迭代器的头文件别忘记引入。 `#include <iterator>`**\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<iterator>\nusing namespace std;\n\nint main() {\n\tistream_iterator<int> cinIter(cin);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec;\n\twhile (cinIter != endOfStream)\n\t\t//注意++先引用后增值，不能写出前缀\n\t\tvec.push_back(*cinIter++);\n\t//也可以写成  vector<int> vec(cinIter, endOfStream);\n\n\tfor (int i = 0; i != vec.size(); ++i) cout << vec[i];\n\treturn 0;\n}\n```\n\n**注：其中 `end_of_stream` 定义为空的迭代器对象，用作结束迭代器。绑定流上的迭代器在遇到文件结束或某个错误时，将等于结束迭代器的值。** \n\n```cpp\nint main(int argc, char **argv) {\n\tostream_iterator<string> outIter(cout, \"\\n\");\n\tistream_iterator<string> inIter(cin), endOfStream;\n\twhile(endOfStream != inIter)\n\t\t*outIter++ = *inIter++; \n\treturn 0;\n}\n```\n**注：执行顺序是先 `iter++`，返回 `iter`，最后 `*iter`。**\n**注意输出，输入 `1 2 3 4 5`，按 `enter` 输出 `1\\n2\\n3\\n4\\n`，按 `ctrl+z` 输出 `5`。**\n\n```cpp\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <iterator>\nusing namespace std;\n \nint main(int argc, char **argv) {\n\tifstream infile(\"in.txt\");\n\tistream_iterator<int> cinIter(infile);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec(cinIter, endOfStream);\n\tsort(vec.begin(), vec.end());\n\tostream_iterator<int> output(cout, \" \");\n\tunique_copy(vec.begin(), vec.end(), output);\n\treturn 0;\n}\n```\n示例输入/输出：\n\n\tINPUT(in.txt): 1 2 2 2 5 5 6 6 7 8 9 10 9 100 \n\t       OUTPUT: 1 2 5 6 7 8 9 10 100\n\n### 流迭代器的限制\n\n- 不可能从 `ostream_iterator` 对象读入，也不可能写到 `istream_iterator` 对象中。\n- 一旦给 `ostream_iterator`对象赋了一个值，写入就提交了。赋值后，没有办法再改变这个值。此外，`ostream_iterator` 对象中每个不同的值都只能正好输出一次。\n- `ostream_iterator` 没有 `->` 操作符。\n\n### 流迭代器的速度\n\n为了测试流迭代器的速度，我先随机生成了 $10000000$ 个数据，生成代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tofstream test(\"in.txt\");\n\tsrand((unsigned)time(NULL) * 19260817); // +1s\n\tfor (int i = 1; i <= 10000000; ++i)\n\t\ttest << rand() << \" \";\n\treturn 0;\n}\n```\n#### 迭代器测试\n\n```cpp\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <algorithm>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n \nint main(int argc, char **argv) {\n\tauto start = system_clock::now();\n\tifstream infile(\"in.txt\");\n\tistream_iterator<int> cinIter(infile);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec(cinIter, endOfStream);\n\tauto end = system_clock::now();\n\tauto duration = duration_cast<microseconds>(end - start);\n\tcout << \"cost: \" \n\t\t << double(duration.count()) * microseconds::period::num / microseconds::period::den \n\t\t << \" seconds\" << endl;\n\treturn 0;\n}\n```\n结果：\n\n\tcost: 10.7543 seconds\n\n**注：为了测试时间尽量精准，这里引入了 `chrono` 库，使用了支持 C++ 11 的 gcc 7.3.0，并且是在 Linux(Ubuntu) 上编译运行的，鉴于编译器的优化能力一个版本比一个版本强，此处没有开优化但结果仍可能有误差，与 OI 中使用迭代器的速度不一样，读者可以使用别的库再进行实验。**\n\n#### 开了 $O_2$ 优化的流迭代器\n\n```cpp\n#pragma GCC optimize(2)\n\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <algorithm>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n \nint main(int argc, char **argv) {\n\tauto start = system_clock::now();\n\tifstream infile(\"in.txt\");\n\tistream_iterator<int> cinIter(infile);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec(cinIter, endOfStream);\n\tauto end = system_clock::now();\n\tauto duration = duration_cast<microseconds>(end - start);\n\tcout << \"cost: \" \n\t\t << double(duration.count()) * microseconds::period::num / microseconds::period::den \n\t\t << \" seconds\" << endl;\n\treturn 0;\n}\n```\n结果：\n\t\n\tcost: 2.31234 seconds\n\n**注：开了优化的结果，读者自行判断**\n\n#### OI 中快读的时间测试\n\n```cpp\n#include <cstdlib>\n#include <cstdio>\n#include <chrono>\n#include <cctype>\n#include <iostream>\n#include <vector>\nusing namespace std;\nusing namespace std::chrono;\n\ninline void read(int &x) {\n\tx = 0;\n\tbool sign = false;\n\tchar ch = 0;\n\twhile (!isdigit(ch)) {\n\t\tsign |= (ch == '-');\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch)) {\n\t\tx = (x << 3) + (x << 1) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\tx = sign ? -x : x;\n}\n\nint main(int argc, char **argv) {\n\tauto start = system_clock::now();\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tint x;\n\tvector<int> a;\n\tfor (int i = 0; i < 10000000; ++i) {\n\t\tread(x);\n\t\ta.push_back(x);\n\t}\n\n\tauto end = system_clock::now();\n\tauto duration = duration_cast<microseconds>(end - start);\n\tcout << \"cost: \" \n\t\t << double(duration.count()) * microseconds::period::num / microseconds::period::den \n\t\t << \" seconds\" << endl;\n\treturn 0;\n}\n```\n\n结果\n\n\tcost: 2.61905 seconds\n\n**注：快读的写法也许不是最优，读者可以自行实验。**\n\n### 总结\n\n事实上，抛开 OI 比赛不说，STL 的库使用优化还是很强的，但是 OI 中嘛，如果作大死用这个也许真的会崩。至于有关 STL 速度的讨论可以看[这里](https://www.zhihu.com/question/51650118)。\n\n---","source":"_posts/C-奇技淫巧-流迭代器使用.md","raw":"---\ntitle: '[C++ 奇技淫巧] 流迭代器使用'\ndate: 2018-08-17 19:09:16\ntags:\n\t- C++ 奇技淫巧\n\t- 迭代器\n\t- iostream\ncategories: 奇技淫巧\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n自从熟知了 STL 库这个东西，我就再也离不开它了，以前一直以为**只有容器才会有迭代器可以用**，然而这是因为自己的知识水平还不够高，今天就介绍一下流迭代器这种神奇的存在。\n\n<!-- more -->\n\n### 流迭代器\n\n**iostream 迭代器（iostream iterator）**：与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。\n\n虽然 `iostream` 类型不是容器，但标准库同样提供了在 `iostream` 对象上使用的迭代器：`istream_iterator` 用于读取输入流，而 `ostream_iterator` 则用于写输出流。这些迭代器将它们所对应的流视为特定类型的**元素序列**。\n\n下面列出流迭代器的使用方法：\n\n|     `iostream`  迭代器的构造函数      |                          对应的意义                          |\n| :-----------------------------------: | :----------------------------------------------------------: |\n|    `istream_iterator<T> in(strm)`     | 创建从输入流 `strm` 中读取T类型对象的 `istream_iterator` 对象 |\n|        `istream_terator<T> in`        |           `istream_iterator` 对象的超出末端迭代器            |\n|    `ostream_iterator<T> out(strm)`    | 创建将T类型的对象写到输出流 `strm` 的 `ostream_iterator` 对象 |\n| `ostream_iterator<T> out(str, delim)` | 创建将 `T` 类型的对象写到输出流 `strm` 的 `ostream_iterator` 对象，在写入过程中使用 `delim` 作为元素的分隔符。`delim` 是以空字符结束的字符数组（C风格字符串）。 |\n\n| `istream_iterator` 的操作 |                          对应的意义                          |\n| :-----------------------: | :----------------------------------------------------------: |\n| `it1 == it2; it1 != it2`  | 比较两上 `istream_iterator` 对象是否相等（不等）。迭代器读取的必须是相同的类型。如果两个迭代器都是 `end` 值，则它们相等。对于两个都不指向流结束位置的迭代器，如果它们使用同一个输入流构造，则它们也相等 |\n|           `*it`           |                      返回从流中读取的值                      |\n|         `it->mem`         |   是 `(*it).mem` 的同义词。返回从流中读取的对象的 mem 成员   |\n|       `++it; it++`        | 通过使用元素类型提供的 `>>` 操作从输入流中读取下一个元素值，使迭代器向前移动。通常，前缀版本使用迭代器在流中向前移动，并返回对加 $1$ 后的迭代器的引用。而后缀版本使迭代器在流中向前移动后，返回原值 |\n\n**注：流迭代器都是类模板：任何已定义输入操作符（`>>` 操作符）的类型都可以定义istream_iterator。任何已定义输出操作符（`<<` 操作符）的类型可定义 `ostream_iterator`。** \n\n### 流迭代器使用\n\n**注：迭代器的头文件别忘记引入。 `#include <iterator>`**\n\n```cpp\n#include<iostream>\n#include<vector>\n#include<iterator>\nusing namespace std;\n\nint main() {\n\tistream_iterator<int> cinIter(cin);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec;\n\twhile (cinIter != endOfStream)\n\t\t//注意++先引用后增值，不能写出前缀\n\t\tvec.push_back(*cinIter++);\n\t//也可以写成  vector<int> vec(cinIter, endOfStream);\n\n\tfor (int i = 0; i != vec.size(); ++i) cout << vec[i];\n\treturn 0;\n}\n```\n\n**注：其中 `end_of_stream` 定义为空的迭代器对象，用作结束迭代器。绑定流上的迭代器在遇到文件结束或某个错误时，将等于结束迭代器的值。** \n\n```cpp\nint main(int argc, char **argv) {\n\tostream_iterator<string> outIter(cout, \"\\n\");\n\tistream_iterator<string> inIter(cin), endOfStream;\n\twhile(endOfStream != inIter)\n\t\t*outIter++ = *inIter++; \n\treturn 0;\n}\n```\n**注：执行顺序是先 `iter++`，返回 `iter`，最后 `*iter`。**\n**注意输出，输入 `1 2 3 4 5`，按 `enter` 输出 `1\\n2\\n3\\n4\\n`，按 `ctrl+z` 输出 `5`。**\n\n```cpp\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <iterator>\nusing namespace std;\n \nint main(int argc, char **argv) {\n\tifstream infile(\"in.txt\");\n\tistream_iterator<int> cinIter(infile);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec(cinIter, endOfStream);\n\tsort(vec.begin(), vec.end());\n\tostream_iterator<int> output(cout, \" \");\n\tunique_copy(vec.begin(), vec.end(), output);\n\treturn 0;\n}\n```\n示例输入/输出：\n\n\tINPUT(in.txt): 1 2 2 2 5 5 6 6 7 8 9 10 9 100 \n\t       OUTPUT: 1 2 5 6 7 8 9 10 100\n\n### 流迭代器的限制\n\n- 不可能从 `ostream_iterator` 对象读入，也不可能写到 `istream_iterator` 对象中。\n- 一旦给 `ostream_iterator`对象赋了一个值，写入就提交了。赋值后，没有办法再改变这个值。此外，`ostream_iterator` 对象中每个不同的值都只能正好输出一次。\n- `ostream_iterator` 没有 `->` 操作符。\n\n### 流迭代器的速度\n\n为了测试流迭代器的速度，我先随机生成了 $10000000$ 个数据，生成代码如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tofstream test(\"in.txt\");\n\tsrand((unsigned)time(NULL) * 19260817); // +1s\n\tfor (int i = 1; i <= 10000000; ++i)\n\t\ttest << rand() << \" \";\n\treturn 0;\n}\n```\n#### 迭代器测试\n\n```cpp\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <algorithm>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n \nint main(int argc, char **argv) {\n\tauto start = system_clock::now();\n\tifstream infile(\"in.txt\");\n\tistream_iterator<int> cinIter(infile);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec(cinIter, endOfStream);\n\tauto end = system_clock::now();\n\tauto duration = duration_cast<microseconds>(end - start);\n\tcout << \"cost: \" \n\t\t << double(duration.count()) * microseconds::period::num / microseconds::period::den \n\t\t << \" seconds\" << endl;\n\treturn 0;\n}\n```\n结果：\n\n\tcost: 10.7543 seconds\n\n**注：为了测试时间尽量精准，这里引入了 `chrono` 库，使用了支持 C++ 11 的 gcc 7.3.0，并且是在 Linux(Ubuntu) 上编译运行的，鉴于编译器的优化能力一个版本比一个版本强，此处没有开优化但结果仍可能有误差，与 OI 中使用迭代器的速度不一样，读者可以使用别的库再进行实验。**\n\n#### 开了 $O_2$ 优化的流迭代器\n\n```cpp\n#pragma GCC optimize(2)\n\n#include <fstream>\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <algorithm>\n#include <chrono>\nusing namespace std;\nusing namespace std::chrono;\n \nint main(int argc, char **argv) {\n\tauto start = system_clock::now();\n\tifstream infile(\"in.txt\");\n\tistream_iterator<int> cinIter(infile);\n\tistream_iterator<int> endOfStream;\n\tvector<int> vec(cinIter, endOfStream);\n\tauto end = system_clock::now();\n\tauto duration = duration_cast<microseconds>(end - start);\n\tcout << \"cost: \" \n\t\t << double(duration.count()) * microseconds::period::num / microseconds::period::den \n\t\t << \" seconds\" << endl;\n\treturn 0;\n}\n```\n结果：\n\t\n\tcost: 2.31234 seconds\n\n**注：开了优化的结果，读者自行判断**\n\n#### OI 中快读的时间测试\n\n```cpp\n#include <cstdlib>\n#include <cstdio>\n#include <chrono>\n#include <cctype>\n#include <iostream>\n#include <vector>\nusing namespace std;\nusing namespace std::chrono;\n\ninline void read(int &x) {\n\tx = 0;\n\tbool sign = false;\n\tchar ch = 0;\n\twhile (!isdigit(ch)) {\n\t\tsign |= (ch == '-');\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch)) {\n\t\tx = (x << 3) + (x << 1) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\tx = sign ? -x : x;\n}\n\nint main(int argc, char **argv) {\n\tauto start = system_clock::now();\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tint x;\n\tvector<int> a;\n\tfor (int i = 0; i < 10000000; ++i) {\n\t\tread(x);\n\t\ta.push_back(x);\n\t}\n\n\tauto end = system_clock::now();\n\tauto duration = duration_cast<microseconds>(end - start);\n\tcout << \"cost: \" \n\t\t << double(duration.count()) * microseconds::period::num / microseconds::period::den \n\t\t << \" seconds\" << endl;\n\treturn 0;\n}\n```\n\n结果\n\n\tcost: 2.61905 seconds\n\n**注：快读的写法也许不是最优，读者可以自行实验。**\n\n### 总结\n\n事实上，抛开 OI 比赛不说，STL 的库使用优化还是很强的，但是 OI 中嘛，如果作大死用这个也许真的会崩。至于有关 STL 速度的讨论可以看[这里](https://www.zhihu.com/question/51650118)。\n\n---","slug":"C-奇技淫巧-流迭代器使用","published":1,"updated":"2018-09-16T04:14:28.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbsf0032rgc87miq6n9u","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>自从熟知了 STL 库这个东西，我就再也离不开它了，以前一直以为<strong>只有容器才会有迭代器可以用</strong>，然而这是因为自己的知识水平还不够高，今天就介绍一下流迭代器这种神奇的存在。</p>\n<a id=\"more\"></a>\n<h3 id=\"流迭代器\"><a href=\"#流迭代器\" class=\"headerlink\" title=\"流迭代器\"></a>流迭代器</h3><p><strong>iostream 迭代器（iostream iterator）</strong>：与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。</p>\n<p>虽然 <code>iostream</code> 类型不是容器，但标准库同样提供了在 <code>iostream</code> 对象上使用的迭代器：<code>istream_iterator</code> 用于读取输入流，而 <code>ostream_iterator</code> 则用于写输出流。这些迭代器将它们所对应的流视为特定类型的<strong>元素序列</strong>。</p>\n<p>下面列出流迭代器的使用方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><code>iostream</code>  迭代器的构造函数</th>\n<th style=\"text-align:center\">对应的意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>istream_iterator&lt;T&gt; in(strm)</code></td>\n<td style=\"text-align:center\">创建从输入流 <code>strm</code> 中读取T类型对象的 <code>istream_iterator</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>istream_terator&lt;T&gt; in</code></td>\n<td style=\"text-align:center\"><code>istream_iterator</code> 对象的超出末端迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ostream_iterator&lt;T&gt; out(strm)</code></td>\n<td style=\"text-align:center\">创建将T类型的对象写到输出流 <code>strm</code> 的 <code>ostream_iterator</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ostream_iterator&lt;T&gt; out(str, delim)</code></td>\n<td style=\"text-align:center\">创建将 <code>T</code> 类型的对象写到输出流 <code>strm</code> 的 <code>ostream_iterator</code> 对象，在写入过程中使用 <code>delim</code> 作为元素的分隔符。<code>delim</code> 是以空字符结束的字符数组（C风格字符串）。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><code>istream_iterator</code> 的操作</th>\n<th style=\"text-align:center\">对应的意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>it1 == it2; it1 != it2</code></td>\n<td style=\"text-align:center\">比较两上 <code>istream_iterator</code> 对象是否相等（不等）。迭代器读取的必须是相同的类型。如果两个迭代器都是 <code>end</code> 值，则它们相等。对于两个都不指向流结束位置的迭代器，如果它们使用同一个输入流构造，则它们也相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*it</code></td>\n<td style=\"text-align:center\">返回从流中读取的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>it-&gt;mem</code></td>\n<td style=\"text-align:center\">是 <code>(*it).mem</code> 的同义词。返回从流中读取的对象的 mem 成员</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>++it; it++</code></td>\n<td style=\"text-align:center\">通过使用元素类型提供的 <code>&gt;&gt;</code> 操作从输入流中读取下一个元素值，使迭代器向前移动。通常，前缀版本使用迭代器在流中向前移动，并返回对加 $1$ 后的迭代器的引用。而后缀版本使迭代器在流中向前移动后，返回原值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：流迭代器都是类模板：任何已定义输入操作符（<code>&gt;&gt;</code> 操作符）的类型都可以定义istream_iterator。任何已定义输出操作符（<code>&lt;&lt;</code> 操作符）的类型可定义 <code>ostream_iterator</code>。</strong> </p>\n<h3 id=\"流迭代器使用\"><a href=\"#流迭代器使用\" class=\"headerlink\" title=\"流迭代器使用\"></a>流迭代器使用</h3><p><strong>注：迭代器的头文件别忘记引入。 <code>#include &lt;iterator&gt;</code></strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(<span class=\"built_in\">cin</span>);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cinIter != endOfStream)</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意++先引用后增值，不能写出前缀</span></span><br><span class=\"line\">\t\tvec.push_back(*cinIter++);</span><br><span class=\"line\">\t<span class=\"comment\">//也可以写成  vector&lt;int&gt; vec(cinIter, endOfStream);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != vec.size(); ++i) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：其中 <code>end_of_stream</code> 定义为空的迭代器对象，用作结束迭代器。绑定流上的迭代器在遇到文件结束或某个错误时，将等于结束迭代器的值。</strong> </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\tostream_iterator&lt;<span class=\"built_in\">string</span>&gt; outIter(<span class=\"built_in\">cout</span>, <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"built_in\">string</span>&gt; inIter(<span class=\"built_in\">cin</span>), endOfStream;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(endOfStream != inIter)</span><br><span class=\"line\">\t\t*outIter++ = *inIter++; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：执行顺序是先 <code>iter++</code>，返回 <code>iter</code>，最后 <code>*iter</code>。</strong><br><strong>注意输出，输入 <code>1 2 3 4 5</code>，按 <code>enter</code> 输出 <code>1\\n2\\n3\\n4\\n</code>，按 <code>ctrl+z</code> 输出 <code>5</code>。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(infile);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class=\"line\">\tsort(vec.begin(), vec.end());</span><br><span class=\"line\">\tostream_iterator&lt;<span class=\"keyword\">int</span>&gt; output(<span class=\"built_in\">cout</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\tunique_copy(vec.begin(), vec.end(), output);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例输入/输出：</p>\n<pre><code>INPUT(in.txt): 1 2 2 2 5 5 6 6 7 8 9 10 9 100 \n       OUTPUT: 1 2 5 6 7 8 9 10 100\n</code></pre><h3 id=\"流迭代器的限制\"><a href=\"#流迭代器的限制\" class=\"headerlink\" title=\"流迭代器的限制\"></a>流迭代器的限制</h3><ul>\n<li>不可能从 <code>ostream_iterator</code> 对象读入，也不可能写到 <code>istream_iterator</code> 对象中。</li>\n<li>一旦给 <code>ostream_iterator</code>对象赋了一个值，写入就提交了。赋值后，没有办法再改变这个值。此外，<code>ostream_iterator</code> 对象中每个不同的值都只能正好输出一次。</li>\n<li><code>ostream_iterator</code> 没有 <code>-&gt;</code> 操作符。</li>\n</ul>\n<h3 id=\"流迭代器的速度\"><a href=\"#流迭代器的速度\" class=\"headerlink\" title=\"流迭代器的速度\"></a>流迭代器的速度</h3><p>为了测试流迭代器的速度，我先随机生成了 $10000000$ 个数据，生成代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">test</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span>)time(<span class=\"literal\">NULL</span>) * <span class=\"number\">19260817</span>); <span class=\"comment\">// +1s</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10000000</span>; ++i)</span><br><span class=\"line\">\t\ttest &lt;&lt; rand() &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代器测试\"><a href=\"#迭代器测试\" class=\"headerlink\" title=\"迭代器测试\"></a>迭代器测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(infile);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span> </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<pre><code>cost: 10.7543 seconds\n</code></pre><p><strong>注：为了测试时间尽量精准，这里引入了 <code>chrono</code> 库，使用了支持 C++ 11 的 gcc 7.3.0，并且是在 Linux(Ubuntu) 上编译运行的，鉴于编译器的优化能力一个版本比一个版本强，此处没有开优化但结果仍可能有误差，与 OI 中使用迭代器的速度不一样，读者可以使用别的库再进行实验。</strong></p>\n<h4 id=\"开了-O-2-优化的流迭代器\"><a href=\"#开了-O-2-优化的流迭代器\" class=\"headerlink\" title=\"开了 $O_2$ 优化的流迭代器\"></a>开了 $O_2$ 优化的流迭代器</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(infile);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span> </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<pre><code>cost: 2.31234 seconds\n</code></pre><p><strong>注：开了优化的结果，读者自行判断</strong></p>\n<h4 id=\"OI-中快读的时间测试\"><a href=\"#OI-中快读的时间测试\" class=\"headerlink\" title=\"OI 中快读的时间测试\"></a>OI 中快读的时间测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">\tx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">\t\tsign |= (ch == <span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">\t\tx = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tx = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000</span>; ++i) &#123;</span><br><span class=\"line\">\t\tread(x);</span><br><span class=\"line\">\t\ta.push_back(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span> </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<pre><code>cost: 2.61905 seconds\n</code></pre><p><strong>注：快读的写法也许不是最优，读者可以自行实验。</strong></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>事实上，抛开 OI 比赛不说，STL 的库使用优化还是很强的，但是 OI 中嘛，如果作大死用这个也许真的会崩。至于有关 STL 速度的讨论可以看<a href=\"https://www.zhihu.com/question/51650118\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>自从熟知了 STL 库这个东西，我就再也离不开它了，以前一直以为<strong>只有容器才会有迭代器可以用</strong>，然而这是因为自己的知识水平还不够高，今天就介绍一下流迭代器这种神奇的存在。</p>","more":"<h3 id=\"流迭代器\"><a href=\"#流迭代器\" class=\"headerlink\" title=\"流迭代器\"></a>流迭代器</h3><p><strong>iostream 迭代器（iostream iterator）</strong>：与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。</p>\n<p>虽然 <code>iostream</code> 类型不是容器，但标准库同样提供了在 <code>iostream</code> 对象上使用的迭代器：<code>istream_iterator</code> 用于读取输入流，而 <code>ostream_iterator</code> 则用于写输出流。这些迭代器将它们所对应的流视为特定类型的<strong>元素序列</strong>。</p>\n<p>下面列出流迭代器的使用方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><code>iostream</code>  迭代器的构造函数</th>\n<th style=\"text-align:center\">对应的意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>istream_iterator&lt;T&gt; in(strm)</code></td>\n<td style=\"text-align:center\">创建从输入流 <code>strm</code> 中读取T类型对象的 <code>istream_iterator</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>istream_terator&lt;T&gt; in</code></td>\n<td style=\"text-align:center\"><code>istream_iterator</code> 对象的超出末端迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ostream_iterator&lt;T&gt; out(strm)</code></td>\n<td style=\"text-align:center\">创建将T类型的对象写到输出流 <code>strm</code> 的 <code>ostream_iterator</code> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ostream_iterator&lt;T&gt; out(str, delim)</code></td>\n<td style=\"text-align:center\">创建将 <code>T</code> 类型的对象写到输出流 <code>strm</code> 的 <code>ostream_iterator</code> 对象，在写入过程中使用 <code>delim</code> 作为元素的分隔符。<code>delim</code> 是以空字符结束的字符数组（C风格字符串）。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><code>istream_iterator</code> 的操作</th>\n<th style=\"text-align:center\">对应的意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>it1 == it2; it1 != it2</code></td>\n<td style=\"text-align:center\">比较两上 <code>istream_iterator</code> 对象是否相等（不等）。迭代器读取的必须是相同的类型。如果两个迭代器都是 <code>end</code> 值，则它们相等。对于两个都不指向流结束位置的迭代器，如果它们使用同一个输入流构造，则它们也相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*it</code></td>\n<td style=\"text-align:center\">返回从流中读取的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>it-&gt;mem</code></td>\n<td style=\"text-align:center\">是 <code>(*it).mem</code> 的同义词。返回从流中读取的对象的 mem 成员</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>++it; it++</code></td>\n<td style=\"text-align:center\">通过使用元素类型提供的 <code>&gt;&gt;</code> 操作从输入流中读取下一个元素值，使迭代器向前移动。通常，前缀版本使用迭代器在流中向前移动，并返回对加 $1$ 后的迭代器的引用。而后缀版本使迭代器在流中向前移动后，返回原值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：流迭代器都是类模板：任何已定义输入操作符（<code>&gt;&gt;</code> 操作符）的类型都可以定义istream_iterator。任何已定义输出操作符（<code>&lt;&lt;</code> 操作符）的类型可定义 <code>ostream_iterator</code>。</strong> </p>\n<h3 id=\"流迭代器使用\"><a href=\"#流迭代器使用\" class=\"headerlink\" title=\"流迭代器使用\"></a>流迭代器使用</h3><p><strong>注：迭代器的头文件别忘记引入。 <code>#include &lt;iterator&gt;</code></strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(<span class=\"built_in\">cin</span>);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cinIter != endOfStream)</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意++先引用后增值，不能写出前缀</span></span><br><span class=\"line\">\t\tvec.push_back(*cinIter++);</span><br><span class=\"line\">\t<span class=\"comment\">//也可以写成  vector&lt;int&gt; vec(cinIter, endOfStream);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i != vec.size(); ++i) <span class=\"built_in\">cout</span> &lt;&lt; vec[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：其中 <code>end_of_stream</code> 定义为空的迭代器对象，用作结束迭代器。绑定流上的迭代器在遇到文件结束或某个错误时，将等于结束迭代器的值。</strong> </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\tostream_iterator&lt;<span class=\"built_in\">string</span>&gt; outIter(<span class=\"built_in\">cout</span>, <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"built_in\">string</span>&gt; inIter(<span class=\"built_in\">cin</span>), endOfStream;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(endOfStream != inIter)</span><br><span class=\"line\">\t\t*outIter++ = *inIter++; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：执行顺序是先 <code>iter++</code>，返回 <code>iter</code>，最后 <code>*iter</code>。</strong><br><strong>注意输出，输入 <code>1 2 3 4 5</code>，按 <code>enter</code> 输出 <code>1\\n2\\n3\\n4\\n</code>，按 <code>ctrl+z</code> 输出 <code>5</code>。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(infile);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class=\"line\">\tsort(vec.begin(), vec.end());</span><br><span class=\"line\">\tostream_iterator&lt;<span class=\"keyword\">int</span>&gt; output(<span class=\"built_in\">cout</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\tunique_copy(vec.begin(), vec.end(), output);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例输入/输出：</p>\n<pre><code>INPUT(in.txt): 1 2 2 2 5 5 6 6 7 8 9 10 9 100 \n       OUTPUT: 1 2 5 6 7 8 9 10 100\n</code></pre><h3 id=\"流迭代器的限制\"><a href=\"#流迭代器的限制\" class=\"headerlink\" title=\"流迭代器的限制\"></a>流迭代器的限制</h3><ul>\n<li>不可能从 <code>ostream_iterator</code> 对象读入，也不可能写到 <code>istream_iterator</code> 对象中。</li>\n<li>一旦给 <code>ostream_iterator</code>对象赋了一个值，写入就提交了。赋值后，没有办法再改变这个值。此外，<code>ostream_iterator</code> 对象中每个不同的值都只能正好输出一次。</li>\n<li><code>ostream_iterator</code> 没有 <code>-&gt;</code> 操作符。</li>\n</ul>\n<h3 id=\"流迭代器的速度\"><a href=\"#流迭代器的速度\" class=\"headerlink\" title=\"流迭代器的速度\"></a>流迭代器的速度</h3><p>为了测试流迭代器的速度，我先随机生成了 $10000000$ 个数据，生成代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">test</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span>)time(<span class=\"literal\">NULL</span>) * <span class=\"number\">19260817</span>); <span class=\"comment\">// +1s</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10000000</span>; ++i)</span><br><span class=\"line\">\t\ttest &lt;&lt; rand() &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代器测试\"><a href=\"#迭代器测试\" class=\"headerlink\" title=\"迭代器测试\"></a>迭代器测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(infile);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span> </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<pre><code>cost: 10.7543 seconds\n</code></pre><p><strong>注：为了测试时间尽量精准，这里引入了 <code>chrono</code> 库，使用了支持 C++ 11 的 gcc 7.3.0，并且是在 Linux(Ubuntu) 上编译运行的，鉴于编译器的优化能力一个版本比一个版本强，此处没有开优化但结果仍可能有误差，与 OI 中使用迭代器的速度不一样，读者可以使用别的库再进行实验。</strong></p>\n<h4 id=\"开了-O-2-优化的流迭代器\"><a href=\"#开了-O-2-优化的流迭代器\" class=\"headerlink\" title=\"开了 $O_2$ 优化的流迭代器\"></a>开了 $O_2$ 优化的流迭代器</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">infile</span><span class=\"params\">(<span class=\"string\">\"in.txt\"</span>)</span></span>;</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; cinIter(infile);</span><br><span class=\"line\">\tistream_iterator&lt;<span class=\"keyword\">int</span>&gt; endOfStream;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span> </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<pre><code>cost: 2.31234 seconds\n</code></pre><p><strong>注：开了优化的结果，读者自行判断</strong></p>\n<h4 id=\"OI-中快读的时间测试\"><a href=\"#OI-中快读的时间测试\" class=\"headerlink\" title=\"OI 中快读的时间测试\"></a>OI 中快读的时间测试</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>::chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">\tx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">\t\tsign |= (ch == <span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123;</span><br><span class=\"line\">\t\tx = (x &lt;&lt; <span class=\"number\">3</span>) + (x &lt;&lt; <span class=\"number\">1</span>) + (ch ^ <span class=\"number\">48</span>);</span><br><span class=\"line\">\t\tch = getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tx = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> start = system_clock::now();</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"in.txt\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000</span>; ++i) &#123;</span><br><span class=\"line\">\t\tread(x);</span><br><span class=\"line\">\t\ta.push_back(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> end = system_clock::now();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"cost: \"</span> </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"keyword\">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class=\"line\">\t\t &lt;&lt; <span class=\"string\">\" seconds\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<pre><code>cost: 2.61905 seconds\n</code></pre><p><strong>注：快读的写法也许不是最优，读者可以自行实验。</strong></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>事实上，抛开 OI 比赛不说，STL 的库使用优化还是很强的，但是 OI 中嘛，如果作大死用这个也许真的会崩。至于有关 STL 速度的讨论可以看<a href=\"https://www.zhihu.com/question/51650118\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<hr>"},{"title":"[NOIP 模拟] 2018-8-6 题解: 一次戏剧性的模拟测试","date":"2018-08-06T09:05:38.000Z","mathjax":true,"copyright":true,"_content":"\n今天模拟测试一共有三道题，这里先发一下有关这三道题的题解，有关这几类题目的详解会在以后更新。\n<!-- more -->\n### T1 奇数码问题\n\n**[题目描述]**\n\n你一定玩过八数码游戏，它实际上是在一个$3\\times 3$的网格中进行的，$1$个空格和$1 \\sim 8$这$8$个数字恰好不重不漏地分布在这$3 \\times 3$的网格中。\n\n例如：\n\n\t5 2 8\n\t1 3 _\n\t4 6 7\n\n在游戏过程中，可以把空格与其上、下、左、右四个方向之一的数字交换（如果存在）。\n例如在上例中，空格可与左、上、下面的数字交换，分别变成：\n\n\t5 2 8       5 2 _      5 2 8\n\t1 _ 3       1 3 8      1 3 7\n\t4 6 7       4 6 7      4 6 _\n\n奇数码游戏是它的一个扩展，在一个$n \\times n$的网格中进行，其中n为奇数，1个空格和$1 \\sim n\\times n-1$这$n\\times n-1$个数恰好不重不漏地分布在$n\\times n$的网格中。\n\n空格移动的规则与八数码游戏相同，实际上，八数码就是一个$n=3$的奇数码游戏。\n\n现在给定两个奇数码游戏的局面，请判断是否存在一种移动空格的方式，使得其中一个局面可以变化到另一个局面。\n\n**[输入格式]**\n\n\t多组数据，对于每组数据：\n\t第1行一个奇整数n。\n\t接下来n行每行n个整数，表示第一个局面。\n\t接下来n行每行n个整数，表示第二个局面。\n\t局面中每个整数都是0~n*n-1之一，其中用0代表空格，其余数值与奇数码游戏中的意\n\t义相同，保证这些整数的分布不重不漏。\n\n**[输出格式]**\n\n\t对于每组数据，若两个局面可达，输出TAK，否则输出NIE。\n\n**[样例输入]**\n\n\t3\n\t1 2 3\n\t0 4 6\n\t7 5 8\n\t1 2 3\n\t4 5 6\n\t7 8 0\n\t1\n\t0\n\t0\n\n**[样例输出]**\n\n\tTAK\n\tTAK\n\n**[数据范围与约定]**\n\n\t对于30%的数据，1<=n<=3；\n\t对于60%的数据，1<=n<=50；\n\t对于100%的数据，1<=n<=500，n为奇数，每个测试点不超过10组。\n\n**[题解]**\n\n通过题目可知，这是一道经典的八数码问题，可以说是模板题。\n对于这种问题，可以把方阵转为链（忽略输入的$0$），然后统计初始状态和目标状态的逆序对的数量。\n若逆序对数的奇偶性相同，则可以到达，否则不行。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, a, t[300010];\n\ninline void modify(int x) {\n\tfor (int i = x; i <= n; i += i & -i) ++t[i];\n}\n\ninline int query(int x) {\n\tint res = 0;\n\tfor (int i = x; i; i -= i & -i)\n\t\tres += t[i];\n\treturn res;\n}\n\ninline int work() {\n\tmemset(t, 0, sizeof(t));\n\tint cnt = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%d\", &a);\n\t\tif (!a) continue;\n\t\tcnt += query(n) - query(a);\n\t\tmodify(a);\n\t}\n\treturn cnt & 1;\n}\n\nint main() {\n\tfreopen(\"digital.in\", \"r\", stdin);\n\tfreopen(\"digital.out\", \"w\", stdout);\n\n\tfor (; scanf(\"%d\", &n) == 1; ) {\n\t\tn *= n;\n\t\tif (work() == work()) printf(\"TAK\\n\");\n\t\telse printf(\"NIE\\n\");\n\t}\n\treturn 0;\n}\n\n// 此处使用了树状数组做\n// 本题还可以使用归并排序做，有兴趣的同学可以试试看用归并排序做。\n\n```\n\n**[评价]**\n\n第一题嘛......水题，模板题，送分题......\n\n### T2 树洞\n**[题目描述]**\n\n在一片栖息地上有$N$棵树，每棵树下住着一只兔子，有$M$条路径连接这些树。更特殊地是，只有一棵树有$3$条或更多的路径与它相连，其它的树只有$1$条或$2$条路径与其相连。换句话讲，这些树和树之间的路径构成一张$N$个点、$M$条边的无向连通图，而度数大于$2$的点至多有$1$个。\n\n近年以来，栖息地频繁收到人类的侵扰。兔子们联合起来召开了一场会议，决定在其中$K$棵树上建造树洞。当危险来临时，每只兔子均会同时前往距离它最近的树洞躲避，路程中花费的时间在数值上等于距离。为了在最短的时间内让所有兔子脱离危险，请你安排一种建造树洞的方式，使最后一只到达树洞的兔子所花费的时间尽量少。\n\n**[输入格式]**\n\n\t第一行有3个整数N，M，K，分别表示树（兔子）的个数、路径数、计划建造的树洞数。\n\t接下来M行每行三个整数x,y，表示第x棵树和第y棵树之间有一条路径相连。\n\t1<=x,y<=N，x≠y，任意两棵树之间至多只有1条路径。\n\n**[输出格式]**\n\n\t一个整数，表示在最优方案下，最后一只到达树洞的兔子所花费的时间。\n\n**[样例输入]**\n\n\t5 5 2\n\t1 2\n\t2 3\n\t3 1\n\t1 4\n\t4 5\n\n**[样例输出]**\n\n\t1\n\n**[数据范围与约定]**\n\n\t对于20%的数据，1 ≤  n ≤ 10。\n\t对于另外30%的数据，每棵树至多与2条路径相连。\n\t对于另外30%的数据，保证存在一种最优解，使与3条或更多路径相连的树上一定建造了树洞。\n\t对于100%的数据，1 ≤ n ≤ 2000，n-1<=m<=n*(n-1)/2。\n\n**[题解]**\n\n求最大值最小，而且答案满足单调，很显然可以用二分 \n如何验证？\n首先考虑一条链的情况，答案必然是$\\frac{n - k}{k}$；\n\n而另外存在一个特殊点有三条及以上的边的情况\n我们先枚举一个点，可以将特殊点覆盖，覆盖后，\n原来的图将断成若干条链，然后重复之前链的做法统计答案是否超过k，\n来判断二分的答案是否正确\n\n**[参考代码]**\n\n```cpp\n#include<cstdio>\n#include<cstring>\n\nint n, m, k, rt, deep, mi;\nint deg[2005], dis[2005];\nbool vis[2005], first[2005];\nint head[2005], num;\n\nstruct edge {\n\tint nxt, to;\n} e[4000005];\n\nvoid add(int x, int y) {\n\te[++num].nxt = head[x];\n\te[num].to = y;\n\thead[x] = num;\n}\n\nvoid dfs(int x, int len) {\n\tdeep += 1;\n\tvis[x] = 1;\n\tif (!len) return;\n\tfor (int i = head[x]; i; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (!vis[v]) {\n\t\t\tdis[v] = dis[x] + 1;\n\t\t\tdfs(v, len - 1);\n\t\t}\n\t}\n}\n\nbool check(int x) {\n\tmemset(vis, 0, sizeof(vis));\n\tdfs(rt, x);\n\tmemcpy(first, vis, sizeof(vis));\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (first[i]) {\n\t\t\tint res = 0;\n\t\t\tmemset(vis, 0, sizeof(vis));\n\t\t\tdfs(i, x);\n\t\t\tfor (int j = 1; j <= n && res < k; j++)\n\t\t\tif (!vis[j]) {\n\t\t\t\tdeep = 0;\n\t\t\t\tdfs(j, n);\n\t\t\t\tres += (deep + 2 * x) / (2 * x + 1);\n\t\t\t}\n\t\t\tif (res < k) return 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tdeg[x]++;\n\t\tdeg[y]++;\n\t\tadd(x, y);\n\t\tadd(y, x);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (deg[i] > 2) {\n\t\t\trt=i;\n\t\t\tbreak;\n\t\t}\t\t\n\t}\n\tif (!rt) {\n\t\tprintf(\"%d\", (n + k - 1) / k / 2);\n\t\treturn 0;\n\t}\n\tint l = 1, r = n - 1, ans = n;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(mid)) {\n\t\t\tans = mid;\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n\tprintf(\"%d\", ans);\n}\n\n\n```\n\n**[评价]**\n\n之所以标题称这次模拟为“戏剧性的模拟测试”，是因为这道题一开始不会，用了个随机数骗了个 10 分（逃）。\n\n虽然这种骗分方法不值得提倡，但也是没有办法的办法，毕竟信奥有时就是这么玄。\n\n对于这种二分答案的题要记住题目所满足的条件：单调性，一般遇到最大值求最小，最小值求最大的这种坑题可以考虑二分答案的方法了。\n\n\n### T3 まんふは函数\n\n**[吐槽]**\n\n为什么这道题一上来就吐槽呢？首先，这道题的思维难度比较大，其次，这道题的思维难度比较小（WTF!!??）。\n<div style=\"align: center\"> <img src=\"黑人问号.jpg\"/> </div>\n首先来看一下题目中日语的发音：\n<div style=\"align: center\"> <img src=\"翻译1.jpg\"/> </div>\n重新排列之后：\n<div style=\"align: center\"> <img src=\"翻译2.jpg\"/> </div>\n经过 Google 的提醒：\n<div style=\"align: center\"> <img src=\"翻译3.jpg\"/> </div>\n\n这不就是 Huffman 的意思吗......\n明摆着让我们用霍夫曼树......\n\n（当然，从题中所给的公式也可以看出来，比如考试的时候我就看出来了（逃）。）\n\n**[题目描述]**\n\n有n个正整数 $A[1], A[2]...A[n]$，满足 ${A[i]}\\geqslant{A[i+1]}$。\n它们可以产生$n$个正整数 $B[1], B[2]...B[n]$，其中 $B[i]=\\sum_{j=i}^n A[j]$\n\nまんふは函数（マンフハ函数）$f:(Z,Z) \\rightarrow Z$定义为：\n\n$$\nf(i,j)=\n\\begin{cases}\n0, & \\text{($i$,$j$) = (1,1)}\\\\\n\\min\\lbrace f(i-1,j+1), f(i,\\lceil\\frac{j}{2}\\rceil)+B[i]\\rbrace, & i,j \\in [1,n], \\text{ } i,j \\neq{(1,1)}\\\\\n10^{11037}, & \\text{otherwise}\n\\end{cases}\n$$\n\n试求$f(n,1)$。\n\n**[输入格式]**\n\n\t输入包含多组数据，不超过10组。\n\t每组数据的第一行是一个正整数，第二行n个正整数A[i]。\n\n**[输出格式]**\n\n\t对于每组数据，输出一个整数表示f(n,1)。\n\n**[样例输入]**\n\n\t3\n\t1 1 1\n\t5\n\t28 26 25 24 1\n\t10\n\t996 901 413 331 259 241 226 209 139 49\n\n**[样例输出]**\n\n\t5\n\t233\n\t11037\n\n**[样例解释]**\n\n\t对于第一组数据：\n\tf(1, 1) = 0\n\tf(1, 2) = f(1, 1) + 3 = 3\n\tf(1, 3) = f(1, 2) + 3 = 6\n\tf(2, 1) = min(f(2, 1) + 2, f(1, 2)) = 3\n\tf(2, 2) = min(f(2, 1) + 2, f(1, 3)) = 5\n\tf(2, 3) = f(2, 2) + 2 = 7\n\tf(3, 1) = min(f(3, 1) + 1, f(2, 2)) = 5\n**[数据范围与约定]**\n\n\t对于30%的数据，满足1 ≤ n ≤ 20。\n\t对于60% 的数据，满足1 ≤ n ≤ 1000。\n\t对于 100% 的数据，满足1 ≤ n ≤ 100000，1 ≤ A[i] ≤ 10000。\n\n**[题解]**\n\n对于会日语的同学，直接看吐槽就行了，如果不会日语呢？\n先仔细读题，研究题中所给的表达式，有两个边界条件，这是不是很像状态转移方程？\n那么我们就可以从动态规划的角度来解决题目的意思。$B$ 数组其实是 $A$ 的一个后缀和，\n而 $min$ 中的两个 $f(i,j)$, 一个减一，一个除以二，自然而然地联想到这是树的合并，\n记 $f(i,j)$ 为合并了 $i$ 个点，产生 $j$ 棵树的状态，\n那么我们要么合并到树中，要么合并两棵子树，为了使合并的总量最小，\n我们就可以用霍夫曼树来解了，题目的思路就开朗了。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 110000\n#define int64 long long\n\nint64 node[maxn], u[maxn];\nint64 tot, n, len, ans;\nint64 x, y;\n\nint64 top() {\n\tif (x <= n && (y > len || node[x] < u[y]))\n\t\treturn node[x++];\n\telse return u[y++];\n}\n\nint main() {\n\twhile (~scanf(\"%d\",&n)) {\n\t\tans = 0;\n\t\tlen = 0;\n\t\tx = 1;\n\t\ty = 1;\n\t\ttot = 0;\n\t\tmemset(node, 0, sizeof(node));\n\t\tmemset(u, 0, sizeof(u));\n\t\ttot = n;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tint tmp;\n\t\t\tscanf(\"%d\",&tmp);\n\t\t\tnode[tot--] = tmp;\n\t\t}\n\t\tfor (int i = 1; i < n; ++i) {\n\t\t\tu[len + 1] = top() + top();\n\t\t\tans += u[++len];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n// 提醒注意多组数据读入问题\n// ++i 和 i++ 的区别要清楚\n\n```\n\n**[评价]**\n\n好题，由类状态转移方程推出题目的原意，再进行解答，思维难度比较大，好题。\n\n\n### 总结\n\n今天三道题，除了第三道题，另外两道题都不是很考验思维，只要还是技巧。\n看来我还是需要提升自己的知识水平，防止再出现第二题做不出，只能随机数的情况。\n\n---","source":"_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试.md","raw":"---\ntitle: '[NOIP 模拟] 2018-8-6 题解: 一次戏剧性的模拟测试'\ndate: 2018-08-06 17:05:38\ntags:\n\t- NOIP 模拟\n\t- 题解\n\t- 神题\ncategories: NOIP\nmathjax: true\ncopyright: true\n---\n\n今天模拟测试一共有三道题，这里先发一下有关这三道题的题解，有关这几类题目的详解会在以后更新。\n<!-- more -->\n### T1 奇数码问题\n\n**[题目描述]**\n\n你一定玩过八数码游戏，它实际上是在一个$3\\times 3$的网格中进行的，$1$个空格和$1 \\sim 8$这$8$个数字恰好不重不漏地分布在这$3 \\times 3$的网格中。\n\n例如：\n\n\t5 2 8\n\t1 3 _\n\t4 6 7\n\n在游戏过程中，可以把空格与其上、下、左、右四个方向之一的数字交换（如果存在）。\n例如在上例中，空格可与左、上、下面的数字交换，分别变成：\n\n\t5 2 8       5 2 _      5 2 8\n\t1 _ 3       1 3 8      1 3 7\n\t4 6 7       4 6 7      4 6 _\n\n奇数码游戏是它的一个扩展，在一个$n \\times n$的网格中进行，其中n为奇数，1个空格和$1 \\sim n\\times n-1$这$n\\times n-1$个数恰好不重不漏地分布在$n\\times n$的网格中。\n\n空格移动的规则与八数码游戏相同，实际上，八数码就是一个$n=3$的奇数码游戏。\n\n现在给定两个奇数码游戏的局面，请判断是否存在一种移动空格的方式，使得其中一个局面可以变化到另一个局面。\n\n**[输入格式]**\n\n\t多组数据，对于每组数据：\n\t第1行一个奇整数n。\n\t接下来n行每行n个整数，表示第一个局面。\n\t接下来n行每行n个整数，表示第二个局面。\n\t局面中每个整数都是0~n*n-1之一，其中用0代表空格，其余数值与奇数码游戏中的意\n\t义相同，保证这些整数的分布不重不漏。\n\n**[输出格式]**\n\n\t对于每组数据，若两个局面可达，输出TAK，否则输出NIE。\n\n**[样例输入]**\n\n\t3\n\t1 2 3\n\t0 4 6\n\t7 5 8\n\t1 2 3\n\t4 5 6\n\t7 8 0\n\t1\n\t0\n\t0\n\n**[样例输出]**\n\n\tTAK\n\tTAK\n\n**[数据范围与约定]**\n\n\t对于30%的数据，1<=n<=3；\n\t对于60%的数据，1<=n<=50；\n\t对于100%的数据，1<=n<=500，n为奇数，每个测试点不超过10组。\n\n**[题解]**\n\n通过题目可知，这是一道经典的八数码问题，可以说是模板题。\n对于这种问题，可以把方阵转为链（忽略输入的$0$），然后统计初始状态和目标状态的逆序对的数量。\n若逆序对数的奇偶性相同，则可以到达，否则不行。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, a, t[300010];\n\ninline void modify(int x) {\n\tfor (int i = x; i <= n; i += i & -i) ++t[i];\n}\n\ninline int query(int x) {\n\tint res = 0;\n\tfor (int i = x; i; i -= i & -i)\n\t\tres += t[i];\n\treturn res;\n}\n\ninline int work() {\n\tmemset(t, 0, sizeof(t));\n\tint cnt = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%d\", &a);\n\t\tif (!a) continue;\n\t\tcnt += query(n) - query(a);\n\t\tmodify(a);\n\t}\n\treturn cnt & 1;\n}\n\nint main() {\n\tfreopen(\"digital.in\", \"r\", stdin);\n\tfreopen(\"digital.out\", \"w\", stdout);\n\n\tfor (; scanf(\"%d\", &n) == 1; ) {\n\t\tn *= n;\n\t\tif (work() == work()) printf(\"TAK\\n\");\n\t\telse printf(\"NIE\\n\");\n\t}\n\treturn 0;\n}\n\n// 此处使用了树状数组做\n// 本题还可以使用归并排序做，有兴趣的同学可以试试看用归并排序做。\n\n```\n\n**[评价]**\n\n第一题嘛......水题，模板题，送分题......\n\n### T2 树洞\n**[题目描述]**\n\n在一片栖息地上有$N$棵树，每棵树下住着一只兔子，有$M$条路径连接这些树。更特殊地是，只有一棵树有$3$条或更多的路径与它相连，其它的树只有$1$条或$2$条路径与其相连。换句话讲，这些树和树之间的路径构成一张$N$个点、$M$条边的无向连通图，而度数大于$2$的点至多有$1$个。\n\n近年以来，栖息地频繁收到人类的侵扰。兔子们联合起来召开了一场会议，决定在其中$K$棵树上建造树洞。当危险来临时，每只兔子均会同时前往距离它最近的树洞躲避，路程中花费的时间在数值上等于距离。为了在最短的时间内让所有兔子脱离危险，请你安排一种建造树洞的方式，使最后一只到达树洞的兔子所花费的时间尽量少。\n\n**[输入格式]**\n\n\t第一行有3个整数N，M，K，分别表示树（兔子）的个数、路径数、计划建造的树洞数。\n\t接下来M行每行三个整数x,y，表示第x棵树和第y棵树之间有一条路径相连。\n\t1<=x,y<=N，x≠y，任意两棵树之间至多只有1条路径。\n\n**[输出格式]**\n\n\t一个整数，表示在最优方案下，最后一只到达树洞的兔子所花费的时间。\n\n**[样例输入]**\n\n\t5 5 2\n\t1 2\n\t2 3\n\t3 1\n\t1 4\n\t4 5\n\n**[样例输出]**\n\n\t1\n\n**[数据范围与约定]**\n\n\t对于20%的数据，1 ≤  n ≤ 10。\n\t对于另外30%的数据，每棵树至多与2条路径相连。\n\t对于另外30%的数据，保证存在一种最优解，使与3条或更多路径相连的树上一定建造了树洞。\n\t对于100%的数据，1 ≤ n ≤ 2000，n-1<=m<=n*(n-1)/2。\n\n**[题解]**\n\n求最大值最小，而且答案满足单调，很显然可以用二分 \n如何验证？\n首先考虑一条链的情况，答案必然是$\\frac{n - k}{k}$；\n\n而另外存在一个特殊点有三条及以上的边的情况\n我们先枚举一个点，可以将特殊点覆盖，覆盖后，\n原来的图将断成若干条链，然后重复之前链的做法统计答案是否超过k，\n来判断二分的答案是否正确\n\n**[参考代码]**\n\n```cpp\n#include<cstdio>\n#include<cstring>\n\nint n, m, k, rt, deep, mi;\nint deg[2005], dis[2005];\nbool vis[2005], first[2005];\nint head[2005], num;\n\nstruct edge {\n\tint nxt, to;\n} e[4000005];\n\nvoid add(int x, int y) {\n\te[++num].nxt = head[x];\n\te[num].to = y;\n\thead[x] = num;\n}\n\nvoid dfs(int x, int len) {\n\tdeep += 1;\n\tvis[x] = 1;\n\tif (!len) return;\n\tfor (int i = head[x]; i; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (!vis[v]) {\n\t\t\tdis[v] = dis[x] + 1;\n\t\t\tdfs(v, len - 1);\n\t\t}\n\t}\n}\n\nbool check(int x) {\n\tmemset(vis, 0, sizeof(vis));\n\tdfs(rt, x);\n\tmemcpy(first, vis, sizeof(vis));\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (first[i]) {\n\t\t\tint res = 0;\n\t\t\tmemset(vis, 0, sizeof(vis));\n\t\t\tdfs(i, x);\n\t\t\tfor (int j = 1; j <= n && res < k; j++)\n\t\t\tif (!vis[j]) {\n\t\t\t\tdeep = 0;\n\t\t\t\tdfs(j, n);\n\t\t\t\tres += (deep + 2 * x) / (2 * x + 1);\n\t\t\t}\n\t\t\tif (res < k) return 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tdeg[x]++;\n\t\tdeg[y]++;\n\t\tadd(x, y);\n\t\tadd(y, x);\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (deg[i] > 2) {\n\t\t\trt=i;\n\t\t\tbreak;\n\t\t}\t\t\n\t}\n\tif (!rt) {\n\t\tprintf(\"%d\", (n + k - 1) / k / 2);\n\t\treturn 0;\n\t}\n\tint l = 1, r = n - 1, ans = n;\n\twhile (l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(mid)) {\n\t\t\tans = mid;\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n\tprintf(\"%d\", ans);\n}\n\n\n```\n\n**[评价]**\n\n之所以标题称这次模拟为“戏剧性的模拟测试”，是因为这道题一开始不会，用了个随机数骗了个 10 分（逃）。\n\n虽然这种骗分方法不值得提倡，但也是没有办法的办法，毕竟信奥有时就是这么玄。\n\n对于这种二分答案的题要记住题目所满足的条件：单调性，一般遇到最大值求最小，最小值求最大的这种坑题可以考虑二分答案的方法了。\n\n\n### T3 まんふは函数\n\n**[吐槽]**\n\n为什么这道题一上来就吐槽呢？首先，这道题的思维难度比较大，其次，这道题的思维难度比较小（WTF!!??）。\n<div style=\"align: center\"> <img src=\"黑人问号.jpg\"/> </div>\n首先来看一下题目中日语的发音：\n<div style=\"align: center\"> <img src=\"翻译1.jpg\"/> </div>\n重新排列之后：\n<div style=\"align: center\"> <img src=\"翻译2.jpg\"/> </div>\n经过 Google 的提醒：\n<div style=\"align: center\"> <img src=\"翻译3.jpg\"/> </div>\n\n这不就是 Huffman 的意思吗......\n明摆着让我们用霍夫曼树......\n\n（当然，从题中所给的公式也可以看出来，比如考试的时候我就看出来了（逃）。）\n\n**[题目描述]**\n\n有n个正整数 $A[1], A[2]...A[n]$，满足 ${A[i]}\\geqslant{A[i+1]}$。\n它们可以产生$n$个正整数 $B[1], B[2]...B[n]$，其中 $B[i]=\\sum_{j=i}^n A[j]$\n\nまんふは函数（マンフハ函数）$f:(Z,Z) \\rightarrow Z$定义为：\n\n$$\nf(i,j)=\n\\begin{cases}\n0, & \\text{($i$,$j$) = (1,1)}\\\\\n\\min\\lbrace f(i-1,j+1), f(i,\\lceil\\frac{j}{2}\\rceil)+B[i]\\rbrace, & i,j \\in [1,n], \\text{ } i,j \\neq{(1,1)}\\\\\n10^{11037}, & \\text{otherwise}\n\\end{cases}\n$$\n\n试求$f(n,1)$。\n\n**[输入格式]**\n\n\t输入包含多组数据，不超过10组。\n\t每组数据的第一行是一个正整数，第二行n个正整数A[i]。\n\n**[输出格式]**\n\n\t对于每组数据，输出一个整数表示f(n,1)。\n\n**[样例输入]**\n\n\t3\n\t1 1 1\n\t5\n\t28 26 25 24 1\n\t10\n\t996 901 413 331 259 241 226 209 139 49\n\n**[样例输出]**\n\n\t5\n\t233\n\t11037\n\n**[样例解释]**\n\n\t对于第一组数据：\n\tf(1, 1) = 0\n\tf(1, 2) = f(1, 1) + 3 = 3\n\tf(1, 3) = f(1, 2) + 3 = 6\n\tf(2, 1) = min(f(2, 1) + 2, f(1, 2)) = 3\n\tf(2, 2) = min(f(2, 1) + 2, f(1, 3)) = 5\n\tf(2, 3) = f(2, 2) + 2 = 7\n\tf(3, 1) = min(f(3, 1) + 1, f(2, 2)) = 5\n**[数据范围与约定]**\n\n\t对于30%的数据，满足1 ≤ n ≤ 20。\n\t对于60% 的数据，满足1 ≤ n ≤ 1000。\n\t对于 100% 的数据，满足1 ≤ n ≤ 100000，1 ≤ A[i] ≤ 10000。\n\n**[题解]**\n\n对于会日语的同学，直接看吐槽就行了，如果不会日语呢？\n先仔细读题，研究题中所给的表达式，有两个边界条件，这是不是很像状态转移方程？\n那么我们就可以从动态规划的角度来解决题目的意思。$B$ 数组其实是 $A$ 的一个后缀和，\n而 $min$ 中的两个 $f(i,j)$, 一个减一，一个除以二，自然而然地联想到这是树的合并，\n记 $f(i,j)$ 为合并了 $i$ 个点，产生 $j$ 棵树的状态，\n那么我们要么合并到树中，要么合并两棵子树，为了使合并的总量最小，\n我们就可以用霍夫曼树来解了，题目的思路就开朗了。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 110000\n#define int64 long long\n\nint64 node[maxn], u[maxn];\nint64 tot, n, len, ans;\nint64 x, y;\n\nint64 top() {\n\tif (x <= n && (y > len || node[x] < u[y]))\n\t\treturn node[x++];\n\telse return u[y++];\n}\n\nint main() {\n\twhile (~scanf(\"%d\",&n)) {\n\t\tans = 0;\n\t\tlen = 0;\n\t\tx = 1;\n\t\ty = 1;\n\t\ttot = 0;\n\t\tmemset(node, 0, sizeof(node));\n\t\tmemset(u, 0, sizeof(u));\n\t\ttot = n;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tint tmp;\n\t\t\tscanf(\"%d\",&tmp);\n\t\t\tnode[tot--] = tmp;\n\t\t}\n\t\tfor (int i = 1; i < n; ++i) {\n\t\t\tu[len + 1] = top() + top();\n\t\t\tans += u[++len];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n// 提醒注意多组数据读入问题\n// ++i 和 i++ 的区别要清楚\n\n```\n\n**[评价]**\n\n好题，由类状态转移方程推出题目的原意，再进行解答，思维难度比较大，好题。\n\n\n### 总结\n\n今天三道题，除了第三道题，另外两道题都不是很考验思维，只要还是技巧。\n看来我还是需要提升自己的知识水平，防止再出现第二题做不出，只能随机数的情况。\n\n---","slug":"NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试","published":1,"updated":"2018-09-16T04:14:28.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbsk0034rgc84smog44f","content":"<p>今天模拟测试一共有三道题，这里先发一下有关这三道题的题解，有关这几类题目的详解会在以后更新。<br><a id=\"more\"></a></p>\n<h3 id=\"T1-奇数码问题\"><a href=\"#T1-奇数码问题\" class=\"headerlink\" title=\"T1 奇数码问题\"></a>T1 奇数码问题</h3><p><strong>[题目描述]</strong></p>\n<p>你一定玩过八数码游戏，它实际上是在一个$3\\times 3$的网格中进行的，$1$个空格和$1 \\sim 8$这$8$个数字恰好不重不漏地分布在这$3 \\times 3$的网格中。</p>\n<p>例如：</p>\n<pre><code>5 2 8\n1 3 _\n4 6 7\n</code></pre><p>在游戏过程中，可以把空格与其上、下、左、右四个方向之一的数字交换（如果存在）。<br>例如在上例中，空格可与左、上、下面的数字交换，分别变成：</p>\n<pre><code>5 2 8       5 2 _      5 2 8\n1 _ 3       1 3 8      1 3 7\n4 6 7       4 6 7      4 6 _\n</code></pre><p>奇数码游戏是它的一个扩展，在一个$n \\times n$的网格中进行，其中n为奇数，1个空格和$1 \\sim n\\times n-1$这$n\\times n-1$个数恰好不重不漏地分布在$n\\times n$的网格中。</p>\n<p>空格移动的规则与八数码游戏相同，实际上，八数码就是一个$n=3$的奇数码游戏。</p>\n<p>现在给定两个奇数码游戏的局面，请判断是否存在一种移动空格的方式，使得其中一个局面可以变化到另一个局面。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>多组数据，对于每组数据：\n第1行一个奇整数n。\n接下来n行每行n个整数，表示第一个局面。\n接下来n行每行n个整数，表示第二个局面。\n局面中每个整数都是0~n*n-1之一，其中用0代表空格，其余数值与奇数码游戏中的意\n义相同，保证这些整数的分布不重不漏。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每组数据，若两个局面可达，输出TAK，否则输出NIE。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>3\n1 2 3\n0 4 6\n7 5 8\n1 2 3\n4 5 6\n7 8 0\n1\n0\n0\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>TAK\nTAK\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，1&lt;=n&lt;=3；\n对于60%的数据，1&lt;=n&lt;=50；\n对于100%的数据，1&lt;=n&lt;=500，n为奇数，每个测试点不超过10组。\n</code></pre><p><strong>[题解]</strong></p>\n<p>通过题目可知，这是一道经典的八数码问题，可以说是模板题。<br>对于这种问题，可以把方阵转为链（忽略输入的$0$），然后统计初始状态和目标状态的逆序对的数量。<br>若逆序对数的奇偶性相同，则可以到达，否则不行。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a, t[<span class=\"number\">300010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt;= n; i += i &amp; -i) ++t[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i; i -= i &amp; -i)</span><br><span class=\"line\">\t\tres += t[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(t, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(t));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tcnt += query(n) - query(a);</span><br><span class=\"line\">\t\tmodify(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"digital.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"digital.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n) == <span class=\"number\">1</span>; ) &#123;</span><br><span class=\"line\">\t\tn *= n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (work() == work()) <span class=\"built_in\">printf</span>(<span class=\"string\">\"TAK\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NIE\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此处使用了树状数组做</span></span><br><span class=\"line\"><span class=\"comment\">// 本题还可以使用归并排序做，有兴趣的同学可以试试看用归并排序做。</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>第一题嘛……水题，模板题，送分题……</p>\n<h3 id=\"T2-树洞\"><a href=\"#T2-树洞\" class=\"headerlink\" title=\"T2 树洞\"></a>T2 树洞</h3><p><strong>[题目描述]</strong></p>\n<p>在一片栖息地上有$N$棵树，每棵树下住着一只兔子，有$M$条路径连接这些树。更特殊地是，只有一棵树有$3$条或更多的路径与它相连，其它的树只有$1$条或$2$条路径与其相连。换句话讲，这些树和树之间的路径构成一张$N$个点、$M$条边的无向连通图，而度数大于$2$的点至多有$1$个。</p>\n<p>近年以来，栖息地频繁收到人类的侵扰。兔子们联合起来召开了一场会议，决定在其中$K$棵树上建造树洞。当危险来临时，每只兔子均会同时前往距离它最近的树洞躲避，路程中花费的时间在数值上等于距离。为了在最短的时间内让所有兔子脱离危险，请你安排一种建造树洞的方式，使最后一只到达树洞的兔子所花费的时间尽量少。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>第一行有3个整数N，M，K，分别表示树（兔子）的个数、路径数、计划建造的树洞数。\n接下来M行每行三个整数x,y，表示第x棵树和第y棵树之间有一条路径相连。\n1&lt;=x,y&lt;=N，x≠y，任意两棵树之间至多只有1条路径。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>一个整数，表示在最优方案下，最后一只到达树洞的兔子所花费的时间。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>5 5 2\n1 2\n2 3\n3 1\n1 4\n4 5\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>1\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于20%的数据，1 ≤  n ≤ 10。\n对于另外30%的数据，每棵树至多与2条路径相连。\n对于另外30%的数据，保证存在一种最优解，使与3条或更多路径相连的树上一定建造了树洞。\n对于100%的数据，1 ≤ n ≤ 2000，n-1&lt;=m&lt;=n*(n-1)/2。\n</code></pre><p><strong>[题解]</strong></p>\n<p>求最大值最小，而且答案满足单调，很显然可以用二分<br>如何验证？<br>首先考虑一条链的情况，答案必然是$\\frac{n - k}{k}$；</p>\n<p>而另外存在一个特殊点有三条及以上的边的情况<br>我们先枚举一个点，可以将特殊点覆盖，覆盖后，<br>原来的图将断成若干条链，然后重复之前链的做法统计答案是否超过k，<br>来判断二分的答案是否正确</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k, rt, deep, mi;</span><br><span class=\"line\"><span class=\"keyword\">int</span> deg[<span class=\"number\">2005</span>], dis[<span class=\"number\">2005</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">2005</span>], first[<span class=\"number\">2005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[<span class=\"number\">2005</span>], num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nxt, to;</span><br><span class=\"line\">&#125; e[<span class=\"number\">4000005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\te[++num].nxt = head[x];</span><br><span class=\"line\">\te[num].to = y;</span><br><span class=\"line\">\thead[x] = num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\tdeep += <span class=\"number\">1</span>;</span><br><span class=\"line\">\tvis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!len) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v = e[i].to;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">\t\t\tdis[v] = dis[x] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tdfs(v, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\tdfs(rt, x);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(first, vis, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (first[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t\t\tdfs(i, x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n &amp;&amp; res &lt; k; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!vis[j]) &#123;</span><br><span class=\"line\">\t\t\t\tdeep = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tdfs(j, n);</span><br><span class=\"line\">\t\t\t\tres += (deep + <span class=\"number\">2</span> * x) / (<span class=\"number\">2</span> * x + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res &lt; k) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\tdeg[x]++;</span><br><span class=\"line\">\t\tdeg[y]++;</span><br><span class=\"line\">\t\tadd(x, y);</span><br><span class=\"line\">\t\tadd(y, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (deg[i] &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\trt=i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!rt) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, (n + k - <span class=\"number\">1</span>) / k / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = n - <span class=\"number\">1</span>, ans = n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (check(mid)) &#123;</span><br><span class=\"line\">\t\t\tans = mid;</span><br><span class=\"line\">\t\t\tr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>之所以标题称这次模拟为“戏剧性的模拟测试”，是因为这道题一开始不会，用了个随机数骗了个 10 分（逃）。</p>\n<p>虽然这种骗分方法不值得提倡，但也是没有办法的办法，毕竟信奥有时就是这么玄。</p>\n<p>对于这种二分答案的题要记住题目所满足的条件：单调性，一般遇到最大值求最小，最小值求最大的这种坑题可以考虑二分答案的方法了。</p>\n<h3 id=\"T3-まんふは函数\"><a href=\"#T3-まんふは函数\" class=\"headerlink\" title=\"T3 まんふは函数\"></a>T3 まんふは函数</h3><p><strong>[吐槽]</strong></p>\n<p>为什么这道题一上来就吐槽呢？首先，这道题的思维难度比较大，其次，这道题的思维难度比较小（WTF!!??）。</p>\n<div style=\"align: center\"> <img src=\"黑人问号.jpg\"> </div><br>首先来看一下题目中日语的发音：<br><div style=\"align: center\"> <img src=\"翻译1.jpg\"> </div><br>重新排列之后：<br><div style=\"align: center\"> <img src=\"翻译2.jpg\"> </div><br>经过 Google 的提醒：<br><div style=\"align: center\"> <img src=\"翻译3.jpg\"> </div>\n\n<p>这不就是 Huffman 的意思吗……<br>明摆着让我们用霍夫曼树……</p>\n<p>（当然，从题中所给的公式也可以看出来，比如考试的时候我就看出来了（逃）。）</p>\n<p><strong>[题目描述]</strong></p>\n<p>有n个正整数 $A[1], A[2]…A[n]$，满足 ${A[i]}\\geqslant{A[i+1]}$。<br>它们可以产生$n$个正整数 $B[1], B[2]…B[n]$，其中 $B[i]=\\sum_{j=i}^n A[j]$</p>\n<p>まんふは函数（マンフハ函数）$f:(Z,Z) \\rightarrow Z$定义为：</p>\n<p>$$<br>f(i,j)=<br>\\begin{cases}<br>0, &amp; \\text{($i$,$j$) = (1,1)}\\\\<br>\\min\\lbrace f(i-1,j+1), f(i,\\lceil\\frac{j}{2}\\rceil)+B[i]\\rbrace, &amp; i,j \\in [1,n], \\text{ } i,j \\neq{(1,1)}\\\\<br>10^{11037}, &amp; \\text{otherwise}<br>\\end{cases}<br>$$</p>\n<p>试求$f(n,1)$。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>输入包含多组数据，不超过10组。\n每组数据的第一行是一个正整数，第二行n个正整数A[i]。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每组数据，输出一个整数表示f(n,1)。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>3\n1 1 1\n5\n28 26 25 24 1\n10\n996 901 413 331 259 241 226 209 139 49\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>5\n233\n11037\n</code></pre><p><strong>[样例解释]</strong></p>\n<pre><code>对于第一组数据：\nf(1, 1) = 0\nf(1, 2) = f(1, 1) + 3 = 3\nf(1, 3) = f(1, 2) + 3 = 6\nf(2, 1) = min(f(2, 1) + 2, f(1, 2)) = 3\nf(2, 2) = min(f(2, 1) + 2, f(1, 3)) = 5\nf(2, 3) = f(2, 2) + 2 = 7\nf(3, 1) = min(f(3, 1) + 1, f(2, 2)) = 5\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，满足1 ≤ n ≤ 20。\n对于60% 的数据，满足1 ≤ n ≤ 1000。\n对于 100% 的数据，满足1 ≤ n ≤ 100000，1 ≤ A[i] ≤ 10000。\n</code></pre><p><strong>[题解]</strong></p>\n<p>对于会日语的同学，直接看吐槽就行了，如果不会日语呢？<br>先仔细读题，研究题中所给的表达式，有两个边界条件，这是不是很像状态转移方程？<br>那么我们就可以从动态规划的角度来解决题目的意思。$B$ 数组其实是 $A$ 的一个后缀和，<br>而 $min$ 中的两个 $f(i,j)$, 一个减一，一个除以二，自然而然地联想到这是树的合并，<br>记 $f(i,j)$ 为合并了 $i$ 个点，产生 $j$ 棵树的状态，<br>那么我们要么合并到树中，要么合并两棵子树，为了使合并的总量最小，<br>我们就可以用霍夫曼树来解了，题目的思路就开朗了。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int64 long long</span></span><br><span class=\"line\"></span><br><span class=\"line\">int64 node[maxn], u[maxn];</span><br><span class=\"line\">int64 tot, n, len, ans;</span><br><span class=\"line\">int64 x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">int64 <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x &lt;= n &amp;&amp; (y &gt; len || node[x] &lt; u[y]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node[x++];</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> u[y++];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tx = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ty = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(node, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(node));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(u, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(u));</span><br><span class=\"line\">\t\ttot = n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">\t\t\tnode[tot--] = tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\tu[len + <span class=\"number\">1</span>] = top() + top();</span><br><span class=\"line\">\t\t\tans += u[++len];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提醒注意多组数据读入问题</span></span><br><span class=\"line\"><span class=\"comment\">// ++i 和 i++ 的区别要清楚</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>好题，由类状态转移方程推出题目的原意，再进行解答，思维难度比较大，好题。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天三道题，除了第三道题，另外两道题都不是很考验思维，只要还是技巧。<br>看来我还是需要提升自己的知识水平，防止再出现第二题做不出，只能随机数的情况。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>今天模拟测试一共有三道题，这里先发一下有关这三道题的题解，有关这几类题目的详解会在以后更新。<br>","more":"</p>\n<h3 id=\"T1-奇数码问题\"><a href=\"#T1-奇数码问题\" class=\"headerlink\" title=\"T1 奇数码问题\"></a>T1 奇数码问题</h3><p><strong>[题目描述]</strong></p>\n<p>你一定玩过八数码游戏，它实际上是在一个$3\\times 3$的网格中进行的，$1$个空格和$1 \\sim 8$这$8$个数字恰好不重不漏地分布在这$3 \\times 3$的网格中。</p>\n<p>例如：</p>\n<pre><code>5 2 8\n1 3 _\n4 6 7\n</code></pre><p>在游戏过程中，可以把空格与其上、下、左、右四个方向之一的数字交换（如果存在）。<br>例如在上例中，空格可与左、上、下面的数字交换，分别变成：</p>\n<pre><code>5 2 8       5 2 _      5 2 8\n1 _ 3       1 3 8      1 3 7\n4 6 7       4 6 7      4 6 _\n</code></pre><p>奇数码游戏是它的一个扩展，在一个$n \\times n$的网格中进行，其中n为奇数，1个空格和$1 \\sim n\\times n-1$这$n\\times n-1$个数恰好不重不漏地分布在$n\\times n$的网格中。</p>\n<p>空格移动的规则与八数码游戏相同，实际上，八数码就是一个$n=3$的奇数码游戏。</p>\n<p>现在给定两个奇数码游戏的局面，请判断是否存在一种移动空格的方式，使得其中一个局面可以变化到另一个局面。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>多组数据，对于每组数据：\n第1行一个奇整数n。\n接下来n行每行n个整数，表示第一个局面。\n接下来n行每行n个整数，表示第二个局面。\n局面中每个整数都是0~n*n-1之一，其中用0代表空格，其余数值与奇数码游戏中的意\n义相同，保证这些整数的分布不重不漏。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每组数据，若两个局面可达，输出TAK，否则输出NIE。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>3\n1 2 3\n0 4 6\n7 5 8\n1 2 3\n4 5 6\n7 8 0\n1\n0\n0\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>TAK\nTAK\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，1&lt;=n&lt;=3；\n对于60%的数据，1&lt;=n&lt;=50；\n对于100%的数据，1&lt;=n&lt;=500，n为奇数，每个测试点不超过10组。\n</code></pre><p><strong>[题解]</strong></p>\n<p>通过题目可知，这是一道经典的八数码问题，可以说是模板题。<br>对于这种问题，可以把方阵转为链（忽略输入的$0$），然后统计初始状态和目标状态的逆序对的数量。<br>若逆序对数的奇偶性相同，则可以到达，否则不行。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a, t[<span class=\"number\">300010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i &lt;= n; i += i &amp; -i) ++t[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = x; i; i -= i &amp; -i)</span><br><span class=\"line\">\t\tres += t[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(t, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(t));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!a) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tcnt += query(n) - query(a);</span><br><span class=\"line\">\t\tmodify(a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"digital.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"digital.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n) == <span class=\"number\">1</span>; ) &#123;</span><br><span class=\"line\">\t\tn *= n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (work() == work()) <span class=\"built_in\">printf</span>(<span class=\"string\">\"TAK\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NIE\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此处使用了树状数组做</span></span><br><span class=\"line\"><span class=\"comment\">// 本题还可以使用归并排序做，有兴趣的同学可以试试看用归并排序做。</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>第一题嘛……水题，模板题，送分题……</p>\n<h3 id=\"T2-树洞\"><a href=\"#T2-树洞\" class=\"headerlink\" title=\"T2 树洞\"></a>T2 树洞</h3><p><strong>[题目描述]</strong></p>\n<p>在一片栖息地上有$N$棵树，每棵树下住着一只兔子，有$M$条路径连接这些树。更特殊地是，只有一棵树有$3$条或更多的路径与它相连，其它的树只有$1$条或$2$条路径与其相连。换句话讲，这些树和树之间的路径构成一张$N$个点、$M$条边的无向连通图，而度数大于$2$的点至多有$1$个。</p>\n<p>近年以来，栖息地频繁收到人类的侵扰。兔子们联合起来召开了一场会议，决定在其中$K$棵树上建造树洞。当危险来临时，每只兔子均会同时前往距离它最近的树洞躲避，路程中花费的时间在数值上等于距离。为了在最短的时间内让所有兔子脱离危险，请你安排一种建造树洞的方式，使最后一只到达树洞的兔子所花费的时间尽量少。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>第一行有3个整数N，M，K，分别表示树（兔子）的个数、路径数、计划建造的树洞数。\n接下来M行每行三个整数x,y，表示第x棵树和第y棵树之间有一条路径相连。\n1&lt;=x,y&lt;=N，x≠y，任意两棵树之间至多只有1条路径。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>一个整数，表示在最优方案下，最后一只到达树洞的兔子所花费的时间。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>5 5 2\n1 2\n2 3\n3 1\n1 4\n4 5\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>1\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于20%的数据，1 ≤  n ≤ 10。\n对于另外30%的数据，每棵树至多与2条路径相连。\n对于另外30%的数据，保证存在一种最优解，使与3条或更多路径相连的树上一定建造了树洞。\n对于100%的数据，1 ≤ n ≤ 2000，n-1&lt;=m&lt;=n*(n-1)/2。\n</code></pre><p><strong>[题解]</strong></p>\n<p>求最大值最小，而且答案满足单调，很显然可以用二分<br>如何验证？<br>首先考虑一条链的情况，答案必然是$\\frac{n - k}{k}$；</p>\n<p>而另外存在一个特殊点有三条及以上的边的情况<br>我们先枚举一个点，可以将特殊点覆盖，覆盖后，<br>原来的图将断成若干条链，然后重复之前链的做法统计答案是否超过k，<br>来判断二分的答案是否正确</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k, rt, deep, mi;</span><br><span class=\"line\"><span class=\"keyword\">int</span> deg[<span class=\"number\">2005</span>], dis[<span class=\"number\">2005</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">2005</span>], first[<span class=\"number\">2005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[<span class=\"number\">2005</span>], num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nxt, to;</span><br><span class=\"line\">&#125; e[<span class=\"number\">4000005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\te[++num].nxt = head[x];</span><br><span class=\"line\">\te[num].to = y;</span><br><span class=\"line\">\thead[x] = num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\tdeep += <span class=\"number\">1</span>;</span><br><span class=\"line\">\tvis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!len) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> v = e[i].to;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!vis[v]) &#123;</span><br><span class=\"line\">\t\t\tdis[v] = dis[x] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tdfs(v, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\tdfs(rt, x);</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(first, vis, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (first[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">\t\t\tdfs(i, x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n &amp;&amp; res &lt; k; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!vis[j]) &#123;</span><br><span class=\"line\">\t\t\t\tdeep = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tdfs(j, n);</span><br><span class=\"line\">\t\t\t\tres += (deep + <span class=\"number\">2</span> * x) / (<span class=\"number\">2</span> * x + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res &lt; k) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\tdeg[x]++;</span><br><span class=\"line\">\t\tdeg[y]++;</span><br><span class=\"line\">\t\tadd(x, y);</span><br><span class=\"line\">\t\tadd(y, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (deg[i] &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\trt=i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!rt) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, (n + k - <span class=\"number\">1</span>) / k / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = n - <span class=\"number\">1</span>, ans = n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (check(mid)) &#123;</span><br><span class=\"line\">\t\t\tans = mid;</span><br><span class=\"line\">\t\t\tr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>之所以标题称这次模拟为“戏剧性的模拟测试”，是因为这道题一开始不会，用了个随机数骗了个 10 分（逃）。</p>\n<p>虽然这种骗分方法不值得提倡，但也是没有办法的办法，毕竟信奥有时就是这么玄。</p>\n<p>对于这种二分答案的题要记住题目所满足的条件：单调性，一般遇到最大值求最小，最小值求最大的这种坑题可以考虑二分答案的方法了。</p>\n<h3 id=\"T3-まんふは函数\"><a href=\"#T3-まんふは函数\" class=\"headerlink\" title=\"T3 まんふは函数\"></a>T3 まんふは函数</h3><p><strong>[吐槽]</strong></p>\n<p>为什么这道题一上来就吐槽呢？首先，这道题的思维难度比较大，其次，这道题的思维难度比较小（WTF!!??）。</p>\n<div style=\"align: center\"> <img src=\"黑人问号.jpg\"> </div><br>首先来看一下题目中日语的发音：<br><div style=\"align: center\"> <img src=\"翻译1.jpg\"> </div><br>重新排列之后：<br><div style=\"align: center\"> <img src=\"翻译2.jpg\"> </div><br>经过 Google 的提醒：<br><div style=\"align: center\"> <img src=\"翻译3.jpg\"> </div>\n\n<p>这不就是 Huffman 的意思吗……<br>明摆着让我们用霍夫曼树……</p>\n<p>（当然，从题中所给的公式也可以看出来，比如考试的时候我就看出来了（逃）。）</p>\n<p><strong>[题目描述]</strong></p>\n<p>有n个正整数 $A[1], A[2]…A[n]$，满足 ${A[i]}\\geqslant{A[i+1]}$。<br>它们可以产生$n$个正整数 $B[1], B[2]…B[n]$，其中 $B[i]=\\sum_{j=i}^n A[j]$</p>\n<p>まんふは函数（マンフハ函数）$f:(Z,Z) \\rightarrow Z$定义为：</p>\n<p>$$<br>f(i,j)=<br>\\begin{cases}<br>0, &amp; \\text{($i$,$j$) = (1,1)}\\\\<br>\\min\\lbrace f(i-1,j+1), f(i,\\lceil\\frac{j}{2}\\rceil)+B[i]\\rbrace, &amp; i,j \\in [1,n], \\text{ } i,j \\neq{(1,1)}\\\\<br>10^{11037}, &amp; \\text{otherwise}<br>\\end{cases}<br>$$</p>\n<p>试求$f(n,1)$。</p>\n<p><strong>[输入格式]</strong></p>\n<pre><code>输入包含多组数据，不超过10组。\n每组数据的第一行是一个正整数，第二行n个正整数A[i]。\n</code></pre><p><strong>[输出格式]</strong></p>\n<pre><code>对于每组数据，输出一个整数表示f(n,1)。\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>3\n1 1 1\n5\n28 26 25 24 1\n10\n996 901 413 331 259 241 226 209 139 49\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>5\n233\n11037\n</code></pre><p><strong>[样例解释]</strong></p>\n<pre><code>对于第一组数据：\nf(1, 1) = 0\nf(1, 2) = f(1, 1) + 3 = 3\nf(1, 3) = f(1, 2) + 3 = 6\nf(2, 1) = min(f(2, 1) + 2, f(1, 2)) = 3\nf(2, 2) = min(f(2, 1) + 2, f(1, 3)) = 5\nf(2, 3) = f(2, 2) + 2 = 7\nf(3, 1) = min(f(3, 1) + 1, f(2, 2)) = 5\n</code></pre><p><strong>[数据范围与约定]</strong></p>\n<pre><code>对于30%的数据，满足1 ≤ n ≤ 20。\n对于60% 的数据，满足1 ≤ n ≤ 1000。\n对于 100% 的数据，满足1 ≤ n ≤ 100000，1 ≤ A[i] ≤ 10000。\n</code></pre><p><strong>[题解]</strong></p>\n<p>对于会日语的同学，直接看吐槽就行了，如果不会日语呢？<br>先仔细读题，研究题中所给的表达式，有两个边界条件，这是不是很像状态转移方程？<br>那么我们就可以从动态规划的角度来解决题目的意思。$B$ 数组其实是 $A$ 的一个后缀和，<br>而 $min$ 中的两个 $f(i,j)$, 一个减一，一个除以二，自然而然地联想到这是树的合并，<br>记 $f(i,j)$ 为合并了 $i$ 个点，产生 $j$ 棵树的状态，<br>那么我们要么合并到树中，要么合并两棵子树，为了使合并的总量最小，<br>我们就可以用霍夫曼树来解了，题目的思路就开朗了。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int64 long long</span></span><br><span class=\"line\"></span><br><span class=\"line\">int64 node[maxn], u[maxn];</span><br><span class=\"line\">int64 tot, n, len, ans;</span><br><span class=\"line\">int64 x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">int64 <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x &lt;= n &amp;&amp; (y &gt; len || node[x] &lt; u[y]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node[x++];</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> u[y++];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (~<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tx = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ty = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(node, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(node));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(u, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(u));</span><br><span class=\"line\">\t\ttot = n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">\t\t\tnode[tot--] = tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\tu[len + <span class=\"number\">1</span>] = top() + top();</span><br><span class=\"line\">\t\t\tans += u[++len];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提醒注意多组数据读入问题</span></span><br><span class=\"line\"><span class=\"comment\">// ++i 和 i++ 的区别要清楚</span></span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>好题，由类状态转移方程推出题目的原意，再进行解答，思维难度比较大，好题。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天三道题，除了第三道题，另外两道题都不是很考验思维，只要还是技巧。<br>看来我还是需要提升自己的知识水平，防止再出现第二题做不出，只能随机数的情况。</p>\n<hr>"},{"title":"[图论] 图论基础知识","date":"2018-08-10T11:49:26.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n因为自己的图论其实掌握得不怎么样，所以开一篇博客，来加深一下自己图论的基础。注意，本文只是基础，主要普及图的存储，最短路和遍历（$DFS$ 和 $BFS$）。\n\n<!-- more -->\n\n### 定义\n\n在图论中，我们定义一张图为由顶点集（Vertices）和边集（Edges）组成的二元组，即 $G = (V, E)$。此处 $V$ 和 $E$ 也可写为 $V(G)$ 和 $E(G)$。\n\n### 基本术语\n\n**阶（Order）**：图 $G$ 中顶集 $V$ 的大小称作图 $G$ 的阶。\n\n**子图（Sub-Graph）**：图 $G'$ 称作图 $G$ 的子图如果 $V(G')\\subseteq V(G)$ 以及 $E(G')\\subseteq E(G)$。\n\n**生成子图（Spanning Sub-Graph）**：指满足条件 $V(G')=V(G)$ 的 $G$ 的子图 $G'$。\n\n**度（Degree）**是一个顶点的度是指与该顶点相关联的总边数，顶点 $v$ 的度记作 $d(v)$。度和边有如下关系：$\\sum_{v\\in V} d(v)=2\\left|E\\right|$。\n\n**出度（Out-degree）和入度（In-degree）**：对有向图而言，顶点的度还可分为出度和入度。一个顶点的出度为 $d_o$ ，是指有 $d_o$ 条边以该顶点为起点，或说与该点关联的出边共有 $d_o$ 条。入度的概念也类似。\n\n**自环（Loop）**：若一条边的两个顶点相同，则此边称作自环。\n\n**路径（Path）**：从顶点u到顶点v的一条路径是指一个序列 $v_0,e_1,v_1,e_2,v_2,...e_k,v_k$，$e_i$ 的起点终点为 $v_{i-1}$ 及 $v_i$； $k$ 称作路径的长度； $v_0=u$，称为路径的起点；$v_k=v$，称为路径的终点。如果 $u=v$，称该路径是闭的，反之则称为开的；如果 $v_1,...,v_k$ 两两不等，则称之为简单路径（Simple path，注意， $u=v$ 是允许的）。\n\n**行迹（Trace）**：如果路径 $P(u,v)$ 中边各不相同，则该路径称为 $u$ 到 $v$ 的一条行迹。\n\n**轨道（Track）**：即简单路径。\n\n闭的行迹称作**回路（Circuit）**，闭的轨道称作圈（Cycle）。（现存文献中的命名法并无统一标准。比如在另一种定义中，walk 对应上述的 path，path 对应上述的 track，trail对应上述的 trace。）\n\n**距离（Distance）**：从顶点 $u$ 出发到顶点 $v$ 的最短路径若存在，则此路径的长度称作从 $u$ 到 $v$ 的距离。若从 $u$ 到 $v$ 根本不存在路径，则记该距离为无穷（$\\infty$）。\n\n**桥（Bridge）**：若去掉一条边，便会使得整个图不连通，该边称为桥。\n\n### 编程实现图的存储\n\n#### 邻接矩阵存图\n\n```cpp\n#define maxn 100\n#define INF 0x3f\n\nint g[maxn][maxn];\n\nvoid init() { memset(g, INF, sizeof(g)); } // 初始化\nvoid addEdge(int vertex1, int vertex2, int wieght) {\n\tg[vertex1][vertex2] = weight;\n} // 添加一条单向边\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n} // 添加一条双向边 / 无向边\n\n```\n其中 $g[i][j]$ 表示从 $i$ 到 $j$ 的边的权。\n注意邻接矩阵方便使用，但空间复杂度为 $O(n^2)$，在点比较多的时候不太实用，极有可能会爆。\n\n#### 邻接表存图\n\n先上代码：\n\n```cpp\n#define maxn 11000\n#define maxm 21000\n#define NOE -1\n\nint v[maxm], e[maxm], heads[maxn], nxt[maxm]\nint tot = 0;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\n// 初始化\nvoid addEdge(int vertex1, int vertex2, int weight) {\n\ttot++;\n\tv[tot] = vertex2;\n\te[tot] = weight;\n\tnxt[tot] = heads[vertex1];\n\theads[vertex1] = tot;\n} // 加边\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n} // 加双向边\n\nvoid travel(int x) {\n\tfor (int i = heads[x]; i != NOE; i = nxt[i]) {\n\t\tint y = v[i];\n\t\tint x = e[i];\n\t\t// 找到一条有向边 (x, y) 边权为 z\n\t\t// do something here\n\t} // 遍历从 x 出发的边\n}\n\n```\n\n$v[]$ 和 $e[]$ 记录了每条边的终点和边权，$nxt[]$模拟指针，表示从想同节点出发的下一条边在 $v[]$ 和 $e[]$ 中的存储位置，$heads[i]$ 表示从 $i$ 出发的第一条边。信息奥赛中使用数组模拟指针足够了，如果想知道具体的邻接表的相关知识看这里：[Wikipedia](https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E8%A1%A8)\n\n#### 链式前向星\n\n**个人认为最好的存图方式，虽然与邻接表没有太大区别，但是好写多了（与真正的邻接表对比，不是 OI 中的阉割版）。**\n\n```cpp\n#define maxn 11000\n#define maxm 21000\n#define NOE -1\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n\tint weight;\n};\n\nedgeNode edges[maxm];\nint heads[maxn];\nint numEdges = 0;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\nvoid addEdge(int vertex1, int vertex2, int weight) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = weight;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n} // 加边\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n} // 加双向边\n\nvoid travel(int x) {\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext) {\n\t\tint y = edges[i].vertexTo;\n\t\tint z = edges[i].weight;\n\t\t// 找到一条有向边 (x, y) 边权为 z\n\t\t// do something here\n\t} // 遍历从 x 出发的边\n}\n\n```\n\n多写写就会熟悉了。\n\n### 图的遍历\n\n#### 深度优先遍历 DFS\n\n深度优先搜索法是树的先序遍历的推广，它的基本思想是：从图 $G$ 的某个顶点 $v_0$ 出发，访问 $v_0$，然后选择一个与 $v_0$ 相邻且没被访问过的顶点 $v_i$ 访问，再从 $v_i$ 出发选择一个与 $v_i$ 相邻且未被访问的顶点 $v_j$ 进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点 $w$，从 $w$ 出发按同样的方法向前遍历，直到图中所有顶点都被访问。具体实现如下：\n\n```cpp\nbool visited[maxn];\nvoid initDFS() { memset(visited, false, sizeof(visited)); }\nvoid rDFS(int x) {\n\tvisited[x] = true;\n\tvisit(); // 根据具体情况定义 visit()\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext)\n\t\tif (!visited[edges[i].vertexTo])\n\t\t\trDFS(edges[i].vertexTo);\n\treturn; // 最好加上 return\n} // 因为这是递归实现的，故命名为 rDfS\n\n```\n\n$DFS$ 全称为 $Depth$ $First$ $Search$，其实是一个搜索算法，有关搜索的算法，未来会开个专题详细讲解，通俗的语言概括就是不顾一切向前冲，撞墙了再回头。\n\n对于下面这么一张图：\n\n<div style=\"align: center\"> <img src=\"pic1.jpg\"/> </div>\n\n它的遍历方式如下：\n\n<div style=\"align: center\"> <img src=\"pic2.jpg\"/> </div>\n\n遍历顺序：\n$$v_1 \\rightarrow v_2 \\rightarrow v_4 \\rightarrow v_8 \\rightarrow v_5 \\rightarrow v_3 \\rightarrow v_6 \\rightarrow v_7$$\n\n$DFS$ 还是很常用的，属于必备知识。\n\n#### 广度优先遍历 BFS\n\n图的广度优先搜索是树的按层次遍历的推广，它的基本思想是：首先访问初始点 $v_i$，并将其标记为已访问过，接着访问 $v_i$ 的所有未被访问过的邻接点 $v_{i1},v_{i2},...,v_{it}$，并均标记已访问过，然后再按照 $v_{i1},v_{i2},...,v_{it}$的次序，访问每一个顶点的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和初始点 $v_i$ 有路径相通的顶点都被访问过为止。非递归实现如下：\n\n```cpp\nqueue<int> Q;\nint dep[maxn];\n\nvoid initBFS() {\n\tmemset(dep, 0, sizeof(dep));\n\twhile (!Q.empty()) Q.pop();\n}\n\nvoid BFS() {\n\tQ.push(1);\n\tdep[1] = 1;\n\t// dep[i] 表示节点 i 的深度，即从 1 到 i 需要走过的最少点数\n\twhile (!Q.empty()) {\n\t\tint x = Q.front();\n\t\tQ.pop();\n\t\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext) {\n\t\t\tint y = edges[i].vertexTo;\n\t\t\tif (dep[y]) continue;\n\t\t\t// 这里直接使用 dep[] 来替代 visited[]，顺便求出点的深度\n\t\t\tdep[y] = dep[x] + 1;\n\t\t\tQ.push(y);\n\t\t}\n\t}\n}\n\n```\n\n对于下面这么一张图：\n\n<div style=\"align: center\"> <img src=\"pic3.jpg\"/> </div>\n\n它的遍历方式如下：\n\n<div style=\"align: center\"> <img src=\"pic4.jpg\"/> </div>\n\n遍历顺序：\n$$v_1\\rightarrow v_2\\rightarrow v_3\\rightarrow v_4\\rightarrow v_5\\rightarrow v_6\\rightarrow v_7\\rightarrow v_8$$\n\n\n### 最短路径算法\n\n#### Floyd 求多源最短路\n\nFloyd 的本质是动态规划，我们令 $D[i,j,k]$ 表示经过若干个编号不超过 $k$ 的节点，从 $i$ 到 $j$ 的最短路径的长度。该问题可以划分成两个子问题，经过编号不超过 $k-1$ 的节点从 $i$ 到 $j$，或者从 $i$ 先到 $k$ 再到 $j$，于是我们写出动态规划方程：\n\n$$D[i,j,k]=min\\lbrace D[k-1,i,j],D[k-1,i,k]+D[k-1,k,j]\\rbrace$$\n\n**注意，$k$ 是阶段，所以必须置于外层循环中，$i$ 和 $j$ 是附加状态，所以置于内层循环。**\n\n与背包问题类似，我们可以忽略 $k$ 这一维，于是我们有：\n\n$$D[i,j]=min\\lbrace D[i,j],D[i,k]+D[k,j]\\rbrace$$\n\n$D[i,j]$ 保存了从 $i$ 到 $j$ 的最短路的长度\n\n实现代码如下：\n\n```cpp\n#define maxn 310\n#define INF 0x3f\n\nint d[maxn][maxn], n, m;\nint x, y, x;\n\nint main() {\n\tcin >> n >> m;\n\tmemset(d, INF, sizeof(d));\n\tfor (int i = 1; i <= n; ++i) d[i][i] = 0;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tcin >> x >> y >> z;\n\t\td[x][y] = min(d[x][y], z);\n\t}\n\t// 初始化 & 输入\n\tfor (int k = 1; k <= n; ++k)\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tfor (int j = 1; j <= n; ++j)\n\t\t\t\td[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n\t// Floyd 求最短路\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tcout << d[i][j] << \" \";\n\t// 输出\n}\n\n```\n\n一般来说，在数据小的时候可以使用 Floyd 算法，数据大的时候尽量去思考别的方法。\n\n#### Dijkstra 求单源最短路\n\nDijkstra 算法流程如下：\n\n1. 初始化 $dist[1] = 0$，其余节点初始化为一个极大值。\n2. 找出一个未被标记的，$dist[x]$ 最小的节点 $x$，然后标记节点 $x$。\n3. 扫描节点 $x$ 的所有出边 $(u, v, w)$，若 $dist[v] > dist[u] + w$，则使用 $dist[u] + w$ 更新 $dist[v]$\n4. 重复 $2 \\thicksim 3$ 两个步骤，直到节点全部被标记。\n\nDijkstra 算法基于贪心，只适用于边权非负的图。\n优化：使用二叉堆对 $dist$ 进行维护，$O(\\log n)$ 的时间获取最小值并删除，$O(\\log n)$ 的时间执行一条边的扩展和更新，最终在 $O((m+n) \\log n)$ 的时间内完成 Dijkstra。\n\n实现代码如下：\n\n```cpp\n// 关于图的定义部分这里省略\nstruct heapNode {\n\tint u, d;\n\tbool operator<(const heapNode& b) const { return d > b.d; }\n}\n// 注意，为了建立小根堆，此处重载的运算符有一点不同。\n// 可以通俗地理解为：如果到 b 的距离比到 u 的距离小，那么 b 的优先级比 u 高。\npriority_queue<heapNode> Q; // 使用优先队列建立小根堆。\nint dist[maxn]; // 记录从 x 到 各点的最短距离\n\nvoid Dijkstra(int x) {\n\twhile (!Q.empty()) Q.pop();\n\tfor (int i = 1; i <= n; ++i) dist[i] = INF;\n\tdist[x] = 0; // 到自己的距离为 0\n\tQ.push((heapNode){ x, 0 });\n\twhile (!Q.empty()) {\n\t\theapNode f = Q.top();\n\t\tQ.pop();\n\t\tint u = f.u;\n\t\tint d = f.d;\n\t\tif (d != dist[u]) continue;\n\t\tfor (int i = heads[u]; i != NOE; i = edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] > dist[u] + w) {\n\t\t\t\tdist[j] = dist[u] + w;\n\t\t\t\tQ.push()((heapNode){ j, dist[j] });\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n#### Bellman-Ford 及 SPFA 算法\n\n给定一张有向图，若对于图中的某一条边 $(x,y,z)$，有 $dist[y] \\leqslant dist[x]+z$ 成立，则称该边满足**三角形不等式**。若所有的边都满足三角形不等式，则 $dist$ 数组就是所求的最短路。\n\n首先介绍基于迭代思想的 Bellman-Ford 算法。它的流程如下：\n\n1. 扫描所有的边 $(x,y,z)$，若 $dist[y] > dist[x]+z$，则用后者更新它。\n2. 重复上述步骤，直到没有操作发生。\n\nBellman-Ford 的时间复杂度为 $O(nm)$。\n\n而 SPFA 实际上是队列优化的 Bellman-Ford 算法，这是国际上的通称。SPFA 的算法流程大致如下：\n\n1. 建立一个队列，最初队列中只含有起点 $1$。\n2. 取出队头结点 $x$，扫描它的所有出边 $(x, y, x)$，若 $dist[y] > dist[x]+z$，则用后者更新前者，同时若 $y$ 不在队列中，则把 $y$ 入队。\n3. 重复上述步骤，直到队列为空。\n\nSPFA 中的队列避免了 Bellman-Ford 中对不需要扩展的节点的冗余扫描，在稀疏图上的运行效率较高，为 $O(km)$ 级别，$k$ 是一个较小的常数，而在稠密图或特殊构造的网格图上，算法仍可能退化为 $O(nm)$，这也是很多人说 SPFA 算法玄学的原因。但是在遇到负边权的时候，只能够使用 SPFA。\n\nSPFA 的实现：\n\n```cpp\nint dist[maxn];\nbitset<maxn> inq; // 记录是否在队列中\nqueue<int> Q;\n\nvoid SPFA(int x) {\n\tmemset(dist, INF, sizeof(dist));\n\tdist[x] = 0;\n\tQ.push(x);\n\tinq[x] = true;\n\tint k;\n\twhile (!Q.empty()) {\n\t\tk = Q.front();\n\t\tQ.pop();\n\t\tinq[k] = false;\n\t\tif (dist[k] == INF) continue;\n\t\tfor (int i = heads[k]; i != NOE; i = edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] > dist[k] + w) {\n\t\t\t\tdist[j] = dist[k] + w;\n\t\t\t\tif (!inq[j]) {\n\t\t\t\t\tQ.push(j);\n\t\t\t\t\tinq[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n如果不是处理负边权的图的话， SPFA 尽量不要用，原因嘛......它太玄了。\n\n---","source":"_posts/图论-图论基础知识.md","raw":"---\ntitle: '[图论] 图论基础知识'\ndate: 2018-08-10 19:49:26\ntags:\n\t- 图论\n\t- 最短路\n\t- 图的遍历\n\t- BFS\n\t- DFS\n\t- Floyd\n\t- Dijkstra\n\t- Bellman-Ford\n\t- SPFA\ncategories: 图论\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n因为自己的图论其实掌握得不怎么样，所以开一篇博客，来加深一下自己图论的基础。注意，本文只是基础，主要普及图的存储，最短路和遍历（$DFS$ 和 $BFS$）。\n\n<!-- more -->\n\n### 定义\n\n在图论中，我们定义一张图为由顶点集（Vertices）和边集（Edges）组成的二元组，即 $G = (V, E)$。此处 $V$ 和 $E$ 也可写为 $V(G)$ 和 $E(G)$。\n\n### 基本术语\n\n**阶（Order）**：图 $G$ 中顶集 $V$ 的大小称作图 $G$ 的阶。\n\n**子图（Sub-Graph）**：图 $G'$ 称作图 $G$ 的子图如果 $V(G')\\subseteq V(G)$ 以及 $E(G')\\subseteq E(G)$。\n\n**生成子图（Spanning Sub-Graph）**：指满足条件 $V(G')=V(G)$ 的 $G$ 的子图 $G'$。\n\n**度（Degree）**是一个顶点的度是指与该顶点相关联的总边数，顶点 $v$ 的度记作 $d(v)$。度和边有如下关系：$\\sum_{v\\in V} d(v)=2\\left|E\\right|$。\n\n**出度（Out-degree）和入度（In-degree）**：对有向图而言，顶点的度还可分为出度和入度。一个顶点的出度为 $d_o$ ，是指有 $d_o$ 条边以该顶点为起点，或说与该点关联的出边共有 $d_o$ 条。入度的概念也类似。\n\n**自环（Loop）**：若一条边的两个顶点相同，则此边称作自环。\n\n**路径（Path）**：从顶点u到顶点v的一条路径是指一个序列 $v_0,e_1,v_1,e_2,v_2,...e_k,v_k$，$e_i$ 的起点终点为 $v_{i-1}$ 及 $v_i$； $k$ 称作路径的长度； $v_0=u$，称为路径的起点；$v_k=v$，称为路径的终点。如果 $u=v$，称该路径是闭的，反之则称为开的；如果 $v_1,...,v_k$ 两两不等，则称之为简单路径（Simple path，注意， $u=v$ 是允许的）。\n\n**行迹（Trace）**：如果路径 $P(u,v)$ 中边各不相同，则该路径称为 $u$ 到 $v$ 的一条行迹。\n\n**轨道（Track）**：即简单路径。\n\n闭的行迹称作**回路（Circuit）**，闭的轨道称作圈（Cycle）。（现存文献中的命名法并无统一标准。比如在另一种定义中，walk 对应上述的 path，path 对应上述的 track，trail对应上述的 trace。）\n\n**距离（Distance）**：从顶点 $u$ 出发到顶点 $v$ 的最短路径若存在，则此路径的长度称作从 $u$ 到 $v$ 的距离。若从 $u$ 到 $v$ 根本不存在路径，则记该距离为无穷（$\\infty$）。\n\n**桥（Bridge）**：若去掉一条边，便会使得整个图不连通，该边称为桥。\n\n### 编程实现图的存储\n\n#### 邻接矩阵存图\n\n```cpp\n#define maxn 100\n#define INF 0x3f\n\nint g[maxn][maxn];\n\nvoid init() { memset(g, INF, sizeof(g)); } // 初始化\nvoid addEdge(int vertex1, int vertex2, int wieght) {\n\tg[vertex1][vertex2] = weight;\n} // 添加一条单向边\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n} // 添加一条双向边 / 无向边\n\n```\n其中 $g[i][j]$ 表示从 $i$ 到 $j$ 的边的权。\n注意邻接矩阵方便使用，但空间复杂度为 $O(n^2)$，在点比较多的时候不太实用，极有可能会爆。\n\n#### 邻接表存图\n\n先上代码：\n\n```cpp\n#define maxn 11000\n#define maxm 21000\n#define NOE -1\n\nint v[maxm], e[maxm], heads[maxn], nxt[maxm]\nint tot = 0;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\n// 初始化\nvoid addEdge(int vertex1, int vertex2, int weight) {\n\ttot++;\n\tv[tot] = vertex2;\n\te[tot] = weight;\n\tnxt[tot] = heads[vertex1];\n\theads[vertex1] = tot;\n} // 加边\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n} // 加双向边\n\nvoid travel(int x) {\n\tfor (int i = heads[x]; i != NOE; i = nxt[i]) {\n\t\tint y = v[i];\n\t\tint x = e[i];\n\t\t// 找到一条有向边 (x, y) 边权为 z\n\t\t// do something here\n\t} // 遍历从 x 出发的边\n}\n\n```\n\n$v[]$ 和 $e[]$ 记录了每条边的终点和边权，$nxt[]$模拟指针，表示从想同节点出发的下一条边在 $v[]$ 和 $e[]$ 中的存储位置，$heads[i]$ 表示从 $i$ 出发的第一条边。信息奥赛中使用数组模拟指针足够了，如果想知道具体的邻接表的相关知识看这里：[Wikipedia](https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E8%A1%A8)\n\n#### 链式前向星\n\n**个人认为最好的存图方式，虽然与邻接表没有太大区别，但是好写多了（与真正的邻接表对比，不是 OI 中的阉割版）。**\n\n```cpp\n#define maxn 11000\n#define maxm 21000\n#define NOE -1\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n\tint weight;\n};\n\nedgeNode edges[maxm];\nint heads[maxn];\nint numEdges = 0;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\nvoid addEdge(int vertex1, int vertex2, int weight) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = weight;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n} // 加边\nvoid addDuplexEdge(int vertex1, int vertex2, int weight) {\n\taddEdge(vertex1, vertex2, weight);\n\taddEdge(vertex2, vertex1, weight);\n} // 加双向边\n\nvoid travel(int x) {\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext) {\n\t\tint y = edges[i].vertexTo;\n\t\tint z = edges[i].weight;\n\t\t// 找到一条有向边 (x, y) 边权为 z\n\t\t// do something here\n\t} // 遍历从 x 出发的边\n}\n\n```\n\n多写写就会熟悉了。\n\n### 图的遍历\n\n#### 深度优先遍历 DFS\n\n深度优先搜索法是树的先序遍历的推广，它的基本思想是：从图 $G$ 的某个顶点 $v_0$ 出发，访问 $v_0$，然后选择一个与 $v_0$ 相邻且没被访问过的顶点 $v_i$ 访问，再从 $v_i$ 出发选择一个与 $v_i$ 相邻且未被访问的顶点 $v_j$ 进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点 $w$，从 $w$ 出发按同样的方法向前遍历，直到图中所有顶点都被访问。具体实现如下：\n\n```cpp\nbool visited[maxn];\nvoid initDFS() { memset(visited, false, sizeof(visited)); }\nvoid rDFS(int x) {\n\tvisited[x] = true;\n\tvisit(); // 根据具体情况定义 visit()\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext)\n\t\tif (!visited[edges[i].vertexTo])\n\t\t\trDFS(edges[i].vertexTo);\n\treturn; // 最好加上 return\n} // 因为这是递归实现的，故命名为 rDfS\n\n```\n\n$DFS$ 全称为 $Depth$ $First$ $Search$，其实是一个搜索算法，有关搜索的算法，未来会开个专题详细讲解，通俗的语言概括就是不顾一切向前冲，撞墙了再回头。\n\n对于下面这么一张图：\n\n<div style=\"align: center\"> <img src=\"pic1.jpg\"/> </div>\n\n它的遍历方式如下：\n\n<div style=\"align: center\"> <img src=\"pic2.jpg\"/> </div>\n\n遍历顺序：\n$$v_1 \\rightarrow v_2 \\rightarrow v_4 \\rightarrow v_8 \\rightarrow v_5 \\rightarrow v_3 \\rightarrow v_6 \\rightarrow v_7$$\n\n$DFS$ 还是很常用的，属于必备知识。\n\n#### 广度优先遍历 BFS\n\n图的广度优先搜索是树的按层次遍历的推广，它的基本思想是：首先访问初始点 $v_i$，并将其标记为已访问过，接着访问 $v_i$ 的所有未被访问过的邻接点 $v_{i1},v_{i2},...,v_{it}$，并均标记已访问过，然后再按照 $v_{i1},v_{i2},...,v_{it}$的次序，访问每一个顶点的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和初始点 $v_i$ 有路径相通的顶点都被访问过为止。非递归实现如下：\n\n```cpp\nqueue<int> Q;\nint dep[maxn];\n\nvoid initBFS() {\n\tmemset(dep, 0, sizeof(dep));\n\twhile (!Q.empty()) Q.pop();\n}\n\nvoid BFS() {\n\tQ.push(1);\n\tdep[1] = 1;\n\t// dep[i] 表示节点 i 的深度，即从 1 到 i 需要走过的最少点数\n\twhile (!Q.empty()) {\n\t\tint x = Q.front();\n\t\tQ.pop();\n\t\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext) {\n\t\t\tint y = edges[i].vertexTo;\n\t\t\tif (dep[y]) continue;\n\t\t\t// 这里直接使用 dep[] 来替代 visited[]，顺便求出点的深度\n\t\t\tdep[y] = dep[x] + 1;\n\t\t\tQ.push(y);\n\t\t}\n\t}\n}\n\n```\n\n对于下面这么一张图：\n\n<div style=\"align: center\"> <img src=\"pic3.jpg\"/> </div>\n\n它的遍历方式如下：\n\n<div style=\"align: center\"> <img src=\"pic4.jpg\"/> </div>\n\n遍历顺序：\n$$v_1\\rightarrow v_2\\rightarrow v_3\\rightarrow v_4\\rightarrow v_5\\rightarrow v_6\\rightarrow v_7\\rightarrow v_8$$\n\n\n### 最短路径算法\n\n#### Floyd 求多源最短路\n\nFloyd 的本质是动态规划，我们令 $D[i,j,k]$ 表示经过若干个编号不超过 $k$ 的节点，从 $i$ 到 $j$ 的最短路径的长度。该问题可以划分成两个子问题，经过编号不超过 $k-1$ 的节点从 $i$ 到 $j$，或者从 $i$ 先到 $k$ 再到 $j$，于是我们写出动态规划方程：\n\n$$D[i,j,k]=min\\lbrace D[k-1,i,j],D[k-1,i,k]+D[k-1,k,j]\\rbrace$$\n\n**注意，$k$ 是阶段，所以必须置于外层循环中，$i$ 和 $j$ 是附加状态，所以置于内层循环。**\n\n与背包问题类似，我们可以忽略 $k$ 这一维，于是我们有：\n\n$$D[i,j]=min\\lbrace D[i,j],D[i,k]+D[k,j]\\rbrace$$\n\n$D[i,j]$ 保存了从 $i$ 到 $j$ 的最短路的长度\n\n实现代码如下：\n\n```cpp\n#define maxn 310\n#define INF 0x3f\n\nint d[maxn][maxn], n, m;\nint x, y, x;\n\nint main() {\n\tcin >> n >> m;\n\tmemset(d, INF, sizeof(d));\n\tfor (int i = 1; i <= n; ++i) d[i][i] = 0;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tcin >> x >> y >> z;\n\t\td[x][y] = min(d[x][y], z);\n\t}\n\t// 初始化 & 输入\n\tfor (int k = 1; k <= n; ++k)\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tfor (int j = 1; j <= n; ++j)\n\t\t\t\td[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n\t// Floyd 求最短路\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tcout << d[i][j] << \" \";\n\t// 输出\n}\n\n```\n\n一般来说，在数据小的时候可以使用 Floyd 算法，数据大的时候尽量去思考别的方法。\n\n#### Dijkstra 求单源最短路\n\nDijkstra 算法流程如下：\n\n1. 初始化 $dist[1] = 0$，其余节点初始化为一个极大值。\n2. 找出一个未被标记的，$dist[x]$ 最小的节点 $x$，然后标记节点 $x$。\n3. 扫描节点 $x$ 的所有出边 $(u, v, w)$，若 $dist[v] > dist[u] + w$，则使用 $dist[u] + w$ 更新 $dist[v]$\n4. 重复 $2 \\thicksim 3$ 两个步骤，直到节点全部被标记。\n\nDijkstra 算法基于贪心，只适用于边权非负的图。\n优化：使用二叉堆对 $dist$ 进行维护，$O(\\log n)$ 的时间获取最小值并删除，$O(\\log n)$ 的时间执行一条边的扩展和更新，最终在 $O((m+n) \\log n)$ 的时间内完成 Dijkstra。\n\n实现代码如下：\n\n```cpp\n// 关于图的定义部分这里省略\nstruct heapNode {\n\tint u, d;\n\tbool operator<(const heapNode& b) const { return d > b.d; }\n}\n// 注意，为了建立小根堆，此处重载的运算符有一点不同。\n// 可以通俗地理解为：如果到 b 的距离比到 u 的距离小，那么 b 的优先级比 u 高。\npriority_queue<heapNode> Q; // 使用优先队列建立小根堆。\nint dist[maxn]; // 记录从 x 到 各点的最短距离\n\nvoid Dijkstra(int x) {\n\twhile (!Q.empty()) Q.pop();\n\tfor (int i = 1; i <= n; ++i) dist[i] = INF;\n\tdist[x] = 0; // 到自己的距离为 0\n\tQ.push((heapNode){ x, 0 });\n\twhile (!Q.empty()) {\n\t\theapNode f = Q.top();\n\t\tQ.pop();\n\t\tint u = f.u;\n\t\tint d = f.d;\n\t\tif (d != dist[u]) continue;\n\t\tfor (int i = heads[u]; i != NOE; i = edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] > dist[u] + w) {\n\t\t\t\tdist[j] = dist[u] + w;\n\t\t\t\tQ.push()((heapNode){ j, dist[j] });\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n#### Bellman-Ford 及 SPFA 算法\n\n给定一张有向图，若对于图中的某一条边 $(x,y,z)$，有 $dist[y] \\leqslant dist[x]+z$ 成立，则称该边满足**三角形不等式**。若所有的边都满足三角形不等式，则 $dist$ 数组就是所求的最短路。\n\n首先介绍基于迭代思想的 Bellman-Ford 算法。它的流程如下：\n\n1. 扫描所有的边 $(x,y,z)$，若 $dist[y] > dist[x]+z$，则用后者更新它。\n2. 重复上述步骤，直到没有操作发生。\n\nBellman-Ford 的时间复杂度为 $O(nm)$。\n\n而 SPFA 实际上是队列优化的 Bellman-Ford 算法，这是国际上的通称。SPFA 的算法流程大致如下：\n\n1. 建立一个队列，最初队列中只含有起点 $1$。\n2. 取出队头结点 $x$，扫描它的所有出边 $(x, y, x)$，若 $dist[y] > dist[x]+z$，则用后者更新前者，同时若 $y$ 不在队列中，则把 $y$ 入队。\n3. 重复上述步骤，直到队列为空。\n\nSPFA 中的队列避免了 Bellman-Ford 中对不需要扩展的节点的冗余扫描，在稀疏图上的运行效率较高，为 $O(km)$ 级别，$k$ 是一个较小的常数，而在稠密图或特殊构造的网格图上，算法仍可能退化为 $O(nm)$，这也是很多人说 SPFA 算法玄学的原因。但是在遇到负边权的时候，只能够使用 SPFA。\n\nSPFA 的实现：\n\n```cpp\nint dist[maxn];\nbitset<maxn> inq; // 记录是否在队列中\nqueue<int> Q;\n\nvoid SPFA(int x) {\n\tmemset(dist, INF, sizeof(dist));\n\tdist[x] = 0;\n\tQ.push(x);\n\tinq[x] = true;\n\tint k;\n\twhile (!Q.empty()) {\n\t\tk = Q.front();\n\t\tQ.pop();\n\t\tinq[k] = false;\n\t\tif (dist[k] == INF) continue;\n\t\tfor (int i = heads[k]; i != NOE; i = edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] > dist[k] + w) {\n\t\t\t\tdist[j] = dist[k] + w;\n\t\t\t\tif (!inq[j]) {\n\t\t\t\t\tQ.push(j);\n\t\t\t\t\tinq[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n如果不是处理负边权的图的话， SPFA 尽量不要用，原因嘛......它太玄了。\n\n---","slug":"图论-图论基础知识","published":1,"updated":"2018-09-16T04:14:28.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbsr0036rgc8qdzqrsrd","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>因为自己的图论其实掌握得不怎么样，所以开一篇博客，来加深一下自己图论的基础。注意，本文只是基础，主要普及图的存储，最短路和遍历（$DFS$ 和 $BFS$）。</p>\n<a id=\"more\"></a>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>在图论中，我们定义一张图为由顶点集（Vertices）和边集（Edges）组成的二元组，即 $G = (V, E)$。此处 $V$ 和 $E$ 也可写为 $V(G)$ 和 $E(G)$。</p>\n<h3 id=\"基本术语\"><a href=\"#基本术语\" class=\"headerlink\" title=\"基本术语\"></a>基本术语</h3><p><strong>阶（Order）</strong>：图 $G$ 中顶集 $V$ 的大小称作图 $G$ 的阶。</p>\n<p><strong>子图（Sub-Graph）</strong>：图 $G’$ 称作图 $G$ 的子图如果 $V(G’)\\subseteq V(G)$ 以及 $E(G’)\\subseteq E(G)$。</p>\n<p><strong>生成子图（Spanning Sub-Graph）</strong>：指满足条件 $V(G’)=V(G)$ 的 $G$ 的子图 $G’$。</p>\n<p><strong>度（Degree）</strong>是一个顶点的度是指与该顶点相关联的总边数，顶点 $v$ 的度记作 $d(v)$。度和边有如下关系：$\\sum_{v\\in V} d(v)=2\\left|E\\right|$。</p>\n<p><strong>出度（Out-degree）和入度（In-degree）</strong>：对有向图而言，顶点的度还可分为出度和入度。一个顶点的出度为 $d_o$ ，是指有 $d_o$ 条边以该顶点为起点，或说与该点关联的出边共有 $d_o$ 条。入度的概念也类似。</p>\n<p><strong>自环（Loop）</strong>：若一条边的两个顶点相同，则此边称作自环。</p>\n<p><strong>路径（Path）</strong>：从顶点u到顶点v的一条路径是指一个序列 $v_0,e_1,v_1,e_2,v_2,…e_k,v_k$，$e_i$ 的起点终点为 $v_{i-1}$ 及 $v_i$； $k$ 称作路径的长度； $v_0=u$，称为路径的起点；$v_k=v$，称为路径的终点。如果 $u=v$，称该路径是闭的，反之则称为开的；如果 $v_1,…,v_k$ 两两不等，则称之为简单路径（Simple path，注意， $u=v$ 是允许的）。</p>\n<p><strong>行迹（Trace）</strong>：如果路径 $P(u,v)$ 中边各不相同，则该路径称为 $u$ 到 $v$ 的一条行迹。</p>\n<p><strong>轨道（Track）</strong>：即简单路径。</p>\n<p>闭的行迹称作<strong>回路（Circuit）</strong>，闭的轨道称作圈（Cycle）。（现存文献中的命名法并无统一标准。比如在另一种定义中，walk 对应上述的 path，path 对应上述的 track，trail对应上述的 trace。）</p>\n<p><strong>距离（Distance）</strong>：从顶点 $u$ 出发到顶点 $v$ 的最短路径若存在，则此路径的长度称作从 $u$ 到 $v$ 的距离。若从 $u$ 到 $v$ 根本不存在路径，则记该距离为无穷（$\\infty$）。</p>\n<p><strong>桥（Bridge）</strong>：若去掉一条边，便会使得整个图不连通，该边称为桥。</p>\n<h3 id=\"编程实现图的存储\"><a href=\"#编程实现图的存储\" class=\"headerlink\" title=\"编程实现图的存储\"></a>编程实现图的存储</h3><h4 id=\"邻接矩阵存图\"><a href=\"#邻接矩阵存图\" class=\"headerlink\" title=\"邻接矩阵存图\"></a>邻接矩阵存图</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> g[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(g, INF, <span class=\"keyword\">sizeof</span>(g)); &#125; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> wieght)</span> </span>&#123;</span><br><span class=\"line\">\tg[vertex1][vertex2] = weight;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 添加一条单向边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 添加一条双向边 / 无向边</span></span><br></pre></td></tr></table></figure>\n<p>其中 $g[i][j]$ 表示从 $i$ 到 $j$ 的边的权。<br>注意邻接矩阵方便使用，但空间复杂度为 $O(n^2)$，在点比较多的时候不太实用，极有可能会爆。</p>\n<h4 id=\"邻接表存图\"><a href=\"#邻接表存图\" class=\"headerlink\" title=\"邻接表存图\"></a>邻接表存图</h4><p>先上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 11000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 21000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxm], e[maxm], heads[maxn], nxt[maxm]</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\ttot++;</span><br><span class=\"line\">\tv[tot] = vertex2;</span><br><span class=\"line\">\te[tot] = weight;</span><br><span class=\"line\">\tnxt[tot] = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = tot;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加双向边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = nxt[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = v[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = e[i];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到一条有向边 (x, y) 边权为 z</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t&#125; <span class=\"comment\">// 遍历从 x 出发的边</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$v[]$ 和 $e[]$ 记录了每条边的终点和边权，$nxt[]$模拟指针，表示从想同节点出发的下一条边在 $v[]$ 和 $e[]$ 中的存储位置，$heads[i]$ 表示从 $i$ 出发的第一条边。信息奥赛中使用数组模拟指针足够了，如果想知道具体的邻接表的相关知识看这里：<a href=\"https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E8%A1%A8\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></p>\n<h4 id=\"链式前向星\"><a href=\"#链式前向星\" class=\"headerlink\" title=\"链式前向星\"></a>链式前向星</h4><p><strong>个人认为最好的存图方式，虽然与邻接表没有太大区别，但是好写多了（与真正的邻接表对比，不是 OI 中的阉割版）。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 11000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 21000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = weight;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加双向边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = edges[i].vertexTo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> z = edges[i].weight;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到一条有向边 (x, y) 边权为 z</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t&#125; <span class=\"comment\">// 遍历从 x 出发的边</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多写写就会熟悉了。</p>\n<h3 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h3><h4 id=\"深度优先遍历-DFS\"><a href=\"#深度优先遍历-DFS\" class=\"headerlink\" title=\"深度优先遍历 DFS\"></a>深度优先遍历 DFS</h4><p>深度优先搜索法是树的先序遍历的推广，它的基本思想是：从图 $G$ 的某个顶点 $v_0$ 出发，访问 $v_0$，然后选择一个与 $v_0$ 相邻且没被访问过的顶点 $v_i$ 访问，再从 $v_i$ 出发选择一个与 $v_i$ 相邻且未被访问的顶点 $v_j$ 进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点 $w$，从 $w$ 出发按同样的方法向前遍历，直到图中所有顶点都被访问。具体实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> visited[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDFS</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(visited, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(visited)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rDFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\tvisited[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tvisit(); <span class=\"comment\">// 根据具体情况定义 visit()</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!visited[edges[i].vertexTo])</span><br><span class=\"line\">\t\t\trDFS(edges[i].vertexTo);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>; <span class=\"comment\">// 最好加上 return</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 因为这是递归实现的，故命名为 rDfS</span></span><br></pre></td></tr></table></figure>\n<p>$DFS$ 全称为 $Depth$ $First$ $Search$，其实是一个搜索算法，有关搜索的算法，未来会开个专题详细讲解，通俗的语言概括就是不顾一切向前冲，撞墙了再回头。</p>\n<p>对于下面这么一张图：</p>\n<div style=\"align: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>它的遍历方式如下：</p>\n<div style=\"align: center\"> <img src=\"pic2.jpg\"> </div>\n\n<p>遍历顺序：<br>$$v_1 \\rightarrow v_2 \\rightarrow v_4 \\rightarrow v_8 \\rightarrow v_5 \\rightarrow v_3 \\rightarrow v_6 \\rightarrow v_7$$</p>\n<p>$DFS$ 还是很常用的，属于必备知识。</p>\n<h4 id=\"广度优先遍历-BFS\"><a href=\"#广度优先遍历-BFS\" class=\"headerlink\" title=\"广度优先遍历 BFS\"></a>广度优先遍历 BFS</h4><p>图的广度优先搜索是树的按层次遍历的推广，它的基本思想是：首先访问初始点 $v_i$，并将其标记为已访问过，接着访问 $v_i$ 的所有未被访问过的邻接点 $v_{i1},v_{i2},…,v_{it}$，并均标记已访问过，然后再按照 $v_{i1},v_{i2},…,v_{it}$的次序，访问每一个顶点的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和初始点 $v_i$ 有路径相通的顶点都被访问过为止。非递归实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initBFS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dep, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dep));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tQ.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tdep[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// dep[i] 表示节点 i 的深度，即从 1 到 i 需要走过的最少点数</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = Q.front();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dep[y]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里直接使用 dep[] 来替代 visited[]，顺便求出点的深度</span></span><br><span class=\"line\">\t\t\tdep[y] = dep[x] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tQ.push(y);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于下面这么一张图：</p>\n<div style=\"align: center\"> <img src=\"pic3.jpg\"> </div>\n\n<p>它的遍历方式如下：</p>\n<div style=\"align: center\"> <img src=\"pic4.jpg\"> </div>\n\n<p>遍历顺序：<br>$$v_1\\rightarrow v_2\\rightarrow v_3\\rightarrow v_4\\rightarrow v_5\\rightarrow v_6\\rightarrow v_7\\rightarrow v_8$$</p>\n<h3 id=\"最短路径算法\"><a href=\"#最短路径算法\" class=\"headerlink\" title=\"最短路径算法\"></a>最短路径算法</h3><h4 id=\"Floyd-求多源最短路\"><a href=\"#Floyd-求多源最短路\" class=\"headerlink\" title=\"Floyd 求多源最短路\"></a>Floyd 求多源最短路</h4><p>Floyd 的本质是动态规划，我们令 $D[i,j,k]$ 表示经过若干个编号不超过 $k$ 的节点，从 $i$ 到 $j$ 的最短路径的长度。该问题可以划分成两个子问题，经过编号不超过 $k-1$ 的节点从 $i$ 到 $j$，或者从 $i$ 先到 $k$ 再到 $j$，于是我们写出动态规划方程：</p>\n<p>$$D[i,j,k]=min\\lbrace D[k-1,i,j],D[k-1,i,k]+D[k-1,k,j]\\rbrace$$</p>\n<p><strong>注意，$k$ 是阶段，所以必须置于外层循环中，$i$ 和 $j$ 是附加状态，所以置于内层循环。</strong></p>\n<p>与背包问题类似，我们可以忽略 $k$ 这一维，于是我们有：</p>\n<p>$$D[i,j]=min\\lbrace D[i,j],D[i,k]+D[k,j]\\rbrace$$</p>\n<p>$D[i,j]$ 保存了从 $i$ 到 $j$ 的最短路的长度</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 310</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn], n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x, y, x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(d, INF, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) d[i][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">\t\td[x][y] = min(d[x][y], z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 &amp; 输入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\t\td[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class=\"line\">\t<span class=\"comment\">// Floyd 求最短路</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; d[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般来说，在数据小的时候可以使用 Floyd 算法，数据大的时候尽量去思考别的方法。</p>\n<h4 id=\"Dijkstra-求单源最短路\"><a href=\"#Dijkstra-求单源最短路\" class=\"headerlink\" title=\"Dijkstra 求单源最短路\"></a>Dijkstra 求单源最短路</h4><p>Dijkstra 算法流程如下：</p>\n<ol>\n<li>初始化 $dist[1] = 0$，其余节点初始化为一个极大值。</li>\n<li>找出一个未被标记的，$dist[x]$ 最小的节点 $x$，然后标记节点 $x$。</li>\n<li>扫描节点 $x$ 的所有出边 $(u, v, w)$，若 $dist[v] &gt; dist[u] + w$，则使用 $dist[u] + w$ 更新 $dist[v]$</li>\n<li>重复 $2 \\thicksim 3$ 两个步骤，直到节点全部被标记。</li>\n</ol>\n<p>Dijkstra 算法基于贪心，只适用于边权非负的图。<br>优化：使用二叉堆对 $dist$ 进行维护，$O(\\log n)$ 的时间获取最小值并删除，$O(\\log n)$ 的时间执行一条边的扩展和更新，最终在 $O((m+n) \\log n)$ 的时间内完成 Dijkstra。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关于图的定义部分这里省略</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u, d;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> heapNode&amp; b) <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> d &gt; b.d; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意，为了建立小根堆，此处重载的运算符有一点不同。</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通俗地理解为：如果到 b 的距离比到 u 的距离小，那么 b 的优先级比 u 高。</span></span><br><span class=\"line\">priority_queue&lt;heapNode&gt; Q; <span class=\"comment\">// 使用优先队列建立小根堆。</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn]; <span class=\"comment\">// 记录从 x 到 各点的最短距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) dist[i] = INF;</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>; <span class=\"comment\">// 到自己的距离为 0</span></span><br><span class=\"line\">\tQ.push((heapNode)&#123; x, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\theapNode f = Q.top();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u = f.u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> d = f.d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d != dist[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[u]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\tQ.push()((heapNode)&#123; j, dist[j] &#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Bellman-Ford-及-SPFA-算法\"><a href=\"#Bellman-Ford-及-SPFA-算法\" class=\"headerlink\" title=\"Bellman-Ford 及 SPFA 算法\"></a>Bellman-Ford 及 SPFA 算法</h4><p>给定一张有向图，若对于图中的某一条边 $(x,y,z)$，有 $dist[y] \\leqslant dist[x]+z$ 成立，则称该边满足<strong>三角形不等式</strong>。若所有的边都满足三角形不等式，则 $dist$ 数组就是所求的最短路。</p>\n<p>首先介绍基于迭代思想的 Bellman-Ford 算法。它的流程如下：</p>\n<ol>\n<li>扫描所有的边 $(x,y,z)$，若 $dist[y] &gt; dist[x]+z$，则用后者更新它。</li>\n<li>重复上述步骤，直到没有操作发生。</li>\n</ol>\n<p>Bellman-Ford 的时间复杂度为 $O(nm)$。</p>\n<p>而 SPFA 实际上是队列优化的 Bellman-Ford 算法，这是国际上的通称。SPFA 的算法流程大致如下：</p>\n<ol>\n<li>建立一个队列，最初队列中只含有起点 $1$。</li>\n<li>取出队头结点 $x$，扫描它的所有出边 $(x, y, x)$，若 $dist[y] &gt; dist[x]+z$，则用后者更新前者，同时若 $y$ 不在队列中，则把 $y$ 入队。</li>\n<li>重复上述步骤，直到队列为空。</li>\n</ol>\n<p>SPFA 中的队列避免了 Bellman-Ford 中对不需要扩展的节点的冗余扫描，在稀疏图上的运行效率较高，为 $O(km)$ 级别，$k$ 是一个较小的常数，而在稠密图或特殊构造的网格图上，算法仍可能退化为 $O(nm)$，这也是很多人说 SPFA 算法玄学的原因。但是在遇到负边权的时候，只能够使用 SPFA。</p>\n<p>SPFA 的实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; inq; <span class=\"comment\">// 记录是否在队列中</span></span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dist, INF, <span class=\"keyword\">sizeof</span>(dist));</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.push(x);</span><br><span class=\"line\">\tinq[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\tk = Q.front();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\tinq[k] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dist[k] == INF) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[k]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] &gt; dist[k] + w) &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[k] + w;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!inq[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tQ.push(j);</span><br><span class=\"line\">\t\t\t\t\tinq[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不是处理负边权的图的话， SPFA 尽量不要用，原因嘛……它太玄了。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>因为自己的图论其实掌握得不怎么样，所以开一篇博客，来加深一下自己图论的基础。注意，本文只是基础，主要普及图的存储，最短路和遍历（$DFS$ 和 $BFS$）。</p>","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>在图论中，我们定义一张图为由顶点集（Vertices）和边集（Edges）组成的二元组，即 $G = (V, E)$。此处 $V$ 和 $E$ 也可写为 $V(G)$ 和 $E(G)$。</p>\n<h3 id=\"基本术语\"><a href=\"#基本术语\" class=\"headerlink\" title=\"基本术语\"></a>基本术语</h3><p><strong>阶（Order）</strong>：图 $G$ 中顶集 $V$ 的大小称作图 $G$ 的阶。</p>\n<p><strong>子图（Sub-Graph）</strong>：图 $G’$ 称作图 $G$ 的子图如果 $V(G’)\\subseteq V(G)$ 以及 $E(G’)\\subseteq E(G)$。</p>\n<p><strong>生成子图（Spanning Sub-Graph）</strong>：指满足条件 $V(G’)=V(G)$ 的 $G$ 的子图 $G’$。</p>\n<p><strong>度（Degree）</strong>是一个顶点的度是指与该顶点相关联的总边数，顶点 $v$ 的度记作 $d(v)$。度和边有如下关系：$\\sum_{v\\in V} d(v)=2\\left|E\\right|$。</p>\n<p><strong>出度（Out-degree）和入度（In-degree）</strong>：对有向图而言，顶点的度还可分为出度和入度。一个顶点的出度为 $d_o$ ，是指有 $d_o$ 条边以该顶点为起点，或说与该点关联的出边共有 $d_o$ 条。入度的概念也类似。</p>\n<p><strong>自环（Loop）</strong>：若一条边的两个顶点相同，则此边称作自环。</p>\n<p><strong>路径（Path）</strong>：从顶点u到顶点v的一条路径是指一个序列 $v_0,e_1,v_1,e_2,v_2,…e_k,v_k$，$e_i$ 的起点终点为 $v_{i-1}$ 及 $v_i$； $k$ 称作路径的长度； $v_0=u$，称为路径的起点；$v_k=v$，称为路径的终点。如果 $u=v$，称该路径是闭的，反之则称为开的；如果 $v_1,…,v_k$ 两两不等，则称之为简单路径（Simple path，注意， $u=v$ 是允许的）。</p>\n<p><strong>行迹（Trace）</strong>：如果路径 $P(u,v)$ 中边各不相同，则该路径称为 $u$ 到 $v$ 的一条行迹。</p>\n<p><strong>轨道（Track）</strong>：即简单路径。</p>\n<p>闭的行迹称作<strong>回路（Circuit）</strong>，闭的轨道称作圈（Cycle）。（现存文献中的命名法并无统一标准。比如在另一种定义中，walk 对应上述的 path，path 对应上述的 track，trail对应上述的 trace。）</p>\n<p><strong>距离（Distance）</strong>：从顶点 $u$ 出发到顶点 $v$ 的最短路径若存在，则此路径的长度称作从 $u$ 到 $v$ 的距离。若从 $u$ 到 $v$ 根本不存在路径，则记该距离为无穷（$\\infty$）。</p>\n<p><strong>桥（Bridge）</strong>：若去掉一条边，便会使得整个图不连通，该边称为桥。</p>\n<h3 id=\"编程实现图的存储\"><a href=\"#编程实现图的存储\" class=\"headerlink\" title=\"编程实现图的存储\"></a>编程实现图的存储</h3><h4 id=\"邻接矩阵存图\"><a href=\"#邻接矩阵存图\" class=\"headerlink\" title=\"邻接矩阵存图\"></a>邻接矩阵存图</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> g[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(g, INF, <span class=\"keyword\">sizeof</span>(g)); &#125; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> wieght)</span> </span>&#123;</span><br><span class=\"line\">\tg[vertex1][vertex2] = weight;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 添加一条单向边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 添加一条双向边 / 无向边</span></span><br></pre></td></tr></table></figure>\n<p>其中 $g[i][j]$ 表示从 $i$ 到 $j$ 的边的权。<br>注意邻接矩阵方便使用，但空间复杂度为 $O(n^2)$，在点比较多的时候不太实用，极有可能会爆。</p>\n<h4 id=\"邻接表存图\"><a href=\"#邻接表存图\" class=\"headerlink\" title=\"邻接表存图\"></a>邻接表存图</h4><p>先上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 11000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 21000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxm], e[maxm], heads[maxn], nxt[maxm]</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\ttot++;</span><br><span class=\"line\">\tv[tot] = vertex2;</span><br><span class=\"line\">\te[tot] = weight;</span><br><span class=\"line\">\tnxt[tot] = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = tot;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加双向边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = nxt[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = v[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = e[i];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到一条有向边 (x, y) 边权为 z</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t&#125; <span class=\"comment\">// 遍历从 x 出发的边</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$v[]$ 和 $e[]$ 记录了每条边的终点和边权，$nxt[]$模拟指针，表示从想同节点出发的下一条边在 $v[]$ 和 $e[]$ 中的存储位置，$heads[i]$ 表示从 $i$ 出发的第一条边。信息奥赛中使用数组模拟指针足够了，如果想知道具体的邻接表的相关知识看这里：<a href=\"https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E8%A1%A8\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></p>\n<h4 id=\"链式前向星\"><a href=\"#链式前向星\" class=\"headerlink\" title=\"链式前向星\"></a>链式前向星</h4><p><strong>个人认为最好的存图方式，虽然与邻接表没有太大区别，但是好写多了（与真正的邻接表对比，不是 OI 中的阉割版）。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 11000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 21000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = weight;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加边</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2, weight);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1, weight);</span><br><span class=\"line\">&#125; <span class=\"comment\">// 加双向边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">travel</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = edges[i].vertexTo;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> z = edges[i].weight;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 找到一条有向边 (x, y) 边权为 z</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\t&#125; <span class=\"comment\">// 遍历从 x 出发的边</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多写写就会熟悉了。</p>\n<h3 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h3><h4 id=\"深度优先遍历-DFS\"><a href=\"#深度优先遍历-DFS\" class=\"headerlink\" title=\"深度优先遍历 DFS\"></a>深度优先遍历 DFS</h4><p>深度优先搜索法是树的先序遍历的推广，它的基本思想是：从图 $G$ 的某个顶点 $v_0$ 出发，访问 $v_0$，然后选择一个与 $v_0$ 相邻且没被访问过的顶点 $v_i$ 访问，再从 $v_i$ 出发选择一个与 $v_i$ 相邻且未被访问的顶点 $v_j$ 进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点 $w$，从 $w$ 出发按同样的方法向前遍历，直到图中所有顶点都被访问。具体实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> visited[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDFS</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(visited, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(visited)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rDFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\tvisited[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tvisit(); <span class=\"comment\">// 根据具体情况定义 visit()</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!visited[edges[i].vertexTo])</span><br><span class=\"line\">\t\t\trDFS(edges[i].vertexTo);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>; <span class=\"comment\">// 最好加上 return</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 因为这是递归实现的，故命名为 rDfS</span></span><br></pre></td></tr></table></figure>\n<p>$DFS$ 全称为 $Depth$ $First$ $Search$，其实是一个搜索算法，有关搜索的算法，未来会开个专题详细讲解，通俗的语言概括就是不顾一切向前冲，撞墙了再回头。</p>\n<p>对于下面这么一张图：</p>\n<div style=\"align: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>它的遍历方式如下：</p>\n<div style=\"align: center\"> <img src=\"pic2.jpg\"> </div>\n\n<p>遍历顺序：<br>$$v_1 \\rightarrow v_2 \\rightarrow v_4 \\rightarrow v_8 \\rightarrow v_5 \\rightarrow v_3 \\rightarrow v_6 \\rightarrow v_7$$</p>\n<p>$DFS$ 还是很常用的，属于必备知识。</p>\n<h4 id=\"广度优先遍历-BFS\"><a href=\"#广度优先遍历-BFS\" class=\"headerlink\" title=\"广度优先遍历 BFS\"></a>广度优先遍历 BFS</h4><p>图的广度优先搜索是树的按层次遍历的推广，它的基本思想是：首先访问初始点 $v_i$，并将其标记为已访问过，接着访问 $v_i$ 的所有未被访问过的邻接点 $v_{i1},v_{i2},…,v_{it}$，并均标记已访问过，然后再按照 $v_{i1},v_{i2},…,v_{it}$的次序，访问每一个顶点的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和初始点 $v_i$ 有路径相通的顶点都被访问过为止。非递归实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initBFS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dep, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(dep));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tQ.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tdep[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// dep[i] 表示节点 i 的深度，即从 1 到 i 需要走过的最少点数</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = Q.front();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dep[y]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里直接使用 dep[] 来替代 visited[]，顺便求出点的深度</span></span><br><span class=\"line\">\t\t\tdep[y] = dep[x] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tQ.push(y);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于下面这么一张图：</p>\n<div style=\"align: center\"> <img src=\"pic3.jpg\"> </div>\n\n<p>它的遍历方式如下：</p>\n<div style=\"align: center\"> <img src=\"pic4.jpg\"> </div>\n\n<p>遍历顺序：<br>$$v_1\\rightarrow v_2\\rightarrow v_3\\rightarrow v_4\\rightarrow v_5\\rightarrow v_6\\rightarrow v_7\\rightarrow v_8$$</p>\n<h3 id=\"最短路径算法\"><a href=\"#最短路径算法\" class=\"headerlink\" title=\"最短路径算法\"></a>最短路径算法</h3><h4 id=\"Floyd-求多源最短路\"><a href=\"#Floyd-求多源最短路\" class=\"headerlink\" title=\"Floyd 求多源最短路\"></a>Floyd 求多源最短路</h4><p>Floyd 的本质是动态规划，我们令 $D[i,j,k]$ 表示经过若干个编号不超过 $k$ 的节点，从 $i$ 到 $j$ 的最短路径的长度。该问题可以划分成两个子问题，经过编号不超过 $k-1$ 的节点从 $i$ 到 $j$，或者从 $i$ 先到 $k$ 再到 $j$，于是我们写出动态规划方程：</p>\n<p>$$D[i,j,k]=min\\lbrace D[k-1,i,j],D[k-1,i,k]+D[k-1,k,j]\\rbrace$$</p>\n<p><strong>注意，$k$ 是阶段，所以必须置于外层循环中，$i$ 和 $j$ 是附加状态，所以置于内层循环。</strong></p>\n<p>与背包问题类似，我们可以忽略 $k$ 这一维，于是我们有：</p>\n<p>$$D[i,j]=min\\lbrace D[i,j],D[i,k]+D[k,j]\\rbrace$$</p>\n<p>$D[i,j]$ 保存了从 $i$ 到 $j$ 的最短路的长度</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 310</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxn], n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x, y, x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(d, INF, <span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) d[i][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">\t\td[x][y] = min(d[x][y], z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 &amp; 输入</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; ++k)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\t\td[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class=\"line\">\t<span class=\"comment\">// Floyd 求最短路</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; d[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般来说，在数据小的时候可以使用 Floyd 算法，数据大的时候尽量去思考别的方法。</p>\n<h4 id=\"Dijkstra-求单源最短路\"><a href=\"#Dijkstra-求单源最短路\" class=\"headerlink\" title=\"Dijkstra 求单源最短路\"></a>Dijkstra 求单源最短路</h4><p>Dijkstra 算法流程如下：</p>\n<ol>\n<li>初始化 $dist[1] = 0$，其余节点初始化为一个极大值。</li>\n<li>找出一个未被标记的，$dist[x]$ 最小的节点 $x$，然后标记节点 $x$。</li>\n<li>扫描节点 $x$ 的所有出边 $(u, v, w)$，若 $dist[v] &gt; dist[u] + w$，则使用 $dist[u] + w$ 更新 $dist[v]$</li>\n<li>重复 $2 \\thicksim 3$ 两个步骤，直到节点全部被标记。</li>\n</ol>\n<p>Dijkstra 算法基于贪心，只适用于边权非负的图。<br>优化：使用二叉堆对 $dist$ 进行维护，$O(\\log n)$ 的时间获取最小值并删除，$O(\\log n)$ 的时间执行一条边的扩展和更新，最终在 $O((m+n) \\log n)$ 的时间内完成 Dijkstra。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关于图的定义部分这里省略</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u, d;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> heapNode&amp; b) <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> d &gt; b.d; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意，为了建立小根堆，此处重载的运算符有一点不同。</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通俗地理解为：如果到 b 的距离比到 u 的距离小，那么 b 的优先级比 u 高。</span></span><br><span class=\"line\">priority_queue&lt;heapNode&gt; Q; <span class=\"comment\">// 使用优先队列建立小根堆。</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn]; <span class=\"comment\">// 记录从 x 到 各点的最短距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) dist[i] = INF;</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>; <span class=\"comment\">// 到自己的距离为 0</span></span><br><span class=\"line\">\tQ.push((heapNode)&#123; x, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\theapNode f = Q.top();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u = f.u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> d = f.d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d != dist[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[u]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\tQ.push()((heapNode)&#123; j, dist[j] &#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Bellman-Ford-及-SPFA-算法\"><a href=\"#Bellman-Ford-及-SPFA-算法\" class=\"headerlink\" title=\"Bellman-Ford 及 SPFA 算法\"></a>Bellman-Ford 及 SPFA 算法</h4><p>给定一张有向图，若对于图中的某一条边 $(x,y,z)$，有 $dist[y] \\leqslant dist[x]+z$ 成立，则称该边满足<strong>三角形不等式</strong>。若所有的边都满足三角形不等式，则 $dist$ 数组就是所求的最短路。</p>\n<p>首先介绍基于迭代思想的 Bellman-Ford 算法。它的流程如下：</p>\n<ol>\n<li>扫描所有的边 $(x,y,z)$，若 $dist[y] &gt; dist[x]+z$，则用后者更新它。</li>\n<li>重复上述步骤，直到没有操作发生。</li>\n</ol>\n<p>Bellman-Ford 的时间复杂度为 $O(nm)$。</p>\n<p>而 SPFA 实际上是队列优化的 Bellman-Ford 算法，这是国际上的通称。SPFA 的算法流程大致如下：</p>\n<ol>\n<li>建立一个队列，最初队列中只含有起点 $1$。</li>\n<li>取出队头结点 $x$，扫描它的所有出边 $(x, y, x)$，若 $dist[y] &gt; dist[x]+z$，则用后者更新前者，同时若 $y$ 不在队列中，则把 $y$ 入队。</li>\n<li>重复上述步骤，直到队列为空。</li>\n</ol>\n<p>SPFA 中的队列避免了 Bellman-Ford 中对不需要扩展的节点的冗余扫描，在稀疏图上的运行效率较高，为 $O(km)$ 级别，$k$ 是一个较小的常数，而在稠密图或特殊构造的网格图上，算法仍可能退化为 $O(nm)$，这也是很多人说 SPFA 算法玄学的原因。但是在遇到负边权的时候，只能够使用 SPFA。</p>\n<p>SPFA 的实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; inq; <span class=\"comment\">// 记录是否在队列中</span></span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; Q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dist, INF, <span class=\"keyword\">sizeof</span>(dist));</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.push(x);</span><br><span class=\"line\">\tinq[x] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\tk = Q.front();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\tinq[k] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dist[k] == INF) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[k]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] &gt; dist[k] + w) &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[k] + w;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!inq[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tQ.push(j);</span><br><span class=\"line\">\t\t\t\t\tinq[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不是处理负边权的图的话， SPFA 尽量不要用，原因嘛……它太玄了。</p>\n<hr>"},{"title":"[NOIP 模拟] 一次出卷老师把题目出反的模拟赛","mathjax":true,"copyright":true,"comment":true,"date":"2018-10-01T07:35:03.000Z","_content":"\n{% note success %}\n\n**在这里先祝祖国母亲生日快乐，以及成为世界上存在时间最长的社会主义国家！😊😊**。\n\n{% endnote %}\n\n{% note default %}\n\n好了，说今天这套题目，隶属于国庆七连测😭，第一道题最恶心，第二题最难想，第三道题最简单。\n\n{% endnote %}\n\n<!-- more -->\n\n### T1 bread\n\n#### 题目\n\n    N 个数，M 次操作，给出两个参数 p, q，第i次染色将区间 (i * p + q) % N + 1 和 (i * q + p) % N + 1 之间的数变为 i（后面的操作将前面的覆盖）\n\n    输入 M, N, p, q\n\n    输出每个数的最终数字\n\n    100% 数据 n <= 1e6, m <= 1e7\n    m * p + q, m * q + p 在 int 范围内\n\n#### 题解\n\n一开始看到这道题是懵逼的，先打了一波暴力模拟，最大的数据跑一年都跑不出来，于是开始思考更好的算法，后来在某大佬的提示下，想到了并查集的做法。\n先打表，发现在 $M > N$ 时，区间是会有循环的，并且是 $N$ 次一循环，而这道题中最后某个点的颜色是以最后一次染色为准的，所以只要对 $\\max\\lbrace M - N + 1, 1\\rbrace$ 到 $M$ 这几次操作进行运算即可。但是发现这样还是会超时，因为区间是会有重复的，这会造成冗余的复杂度，所以需要考虑如何将这些运算去掉。考虑倒序进行处理，当我们对区间 $[l, r]$ 进行处理时，对于我们遇到的每一个点 $k$ 有两种情况：\n\n1. $k$ 未被更新过。\n2. $k$ 已经被更新过了，那么上次更新时它所在区间的所有的点也都被更新过了。\n\n从 $r$ 向前到 $l$ 进行更新，我们记录点 $k$ 上次更新时的左边界 $l'$，若 $k$ 被更新过，那么直接跳到 $l'-1$ 再继续向前更新。那为什么要用并查集呢？因为若 $l'-1$ 也被更新过了，就可以直接跳到更前面，进一步减少冗余运算，同时也防止数据卡我们。\n\n贴上代码：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\ninline void read(int &x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { putchar('-'); x = -x; }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) putchar(stk[top--] + '0');\n}\n\nstruct PAINT { int l, r; };\n\n#define maxm 10000010\n#define maxn 1000010\n\nint N, M, p, q, ans[maxn], fa[maxn];\nbool painted[maxn];\nPAINT paint[maxm];\n\ninline int get(int x) {\n  if (fa[x] == x) return x;\n  return fa[x] = get(fa[x]);\n  // 这里交的时候打成了 fa[x] == get(fa[x]) TAT\n  // 然而只 WA  了一个点 orz\n}\n\nint main() {\n  freopen(\"bread.in\", \"r\", stdin);\n  freopen(\"bread.out\", \"w\", stdout);\n  read(N); read(M); read(p); read(q);\n  memset(ans, 0, sizeof(ans));\n  for (int i = 1; i <= N; ++i) fa[i] = i;\n  int low = max(M - N + 1, 1);\n  for (int i = M; i >= low; --i) {\n    int l = min((i * p + q) % N + 1, (i * q + p) % N + 1);\n    int r = max((i * p + q) % N + 1, (i * q + p) % N + 1);\n    paint[i].l = l;\n    paint[i].r = r;\n  } // 防止区间出错，因为又可能出现 l > r 的情况。\n  for (int i = M; i >= low; --i) {\n    int l = paint[i].l;\n    int r = paint[i].r;\n    int j = r;\n    while (j >= l) {\n      if (ans[j] == 0) {\n        ans[j] = i;\n        fa[j] = get(l);\n        j--;\n      } else { j = fa[j] - 1; }\n    }\n  }\n  for (int i = 1; i <= N; ++i) { write(ans[i]); puts(\"\"); }\n  return 0;\n}\n```\n\n### T2 divide\n\n#### 题目\n\n    你有 n1 个 1，n2 个 2, n3 个 3, n4 个 4, n5 个 5, n6 个 6，问能否将他们分成两部分使得两部分的和相等\n\n    输入 第一行一个整数n，之后n行每行六个整数n1, n2, n3, n4, n5, n6\n\n    输出 如果可以输出 \"Can be divided.\"，不行输出 \"Can't be divided.\"\n\n#### 题解\n\n这道题老师来说了下 $n$ 最大有 $5000$，于是坚信了这道题是数论题 TAT。所以思考的角度完全错误，直接爆零。\n比赛结束后知道了应该用背包做，但是裸的多重背包会 TLE，更何况有 $5000$ 的数据，所以去阅读了标程，发现了原来正解是一个很神奇的 dp。\n\n首先我们令 $f[i][j]$ 表示当总和为 $j$ 时，$i$ 这个数还可以使用的个数，$a[i]$ 表示 $i$ 这个数可以使用的总个数，于是我们有动态规划方程如下：\n\n$$\nf[i][j] = \n\\begin{cases}\na[i], & \\text{when $f[i - 1][j]\\geqslant 0$} \\\\\nf[i][j - i] - 1, & \\text{when $j\\geqslant i$ and $f[i - 1][j]\\leqslant 0$} \\\\\n-1, & \\text{otherwise}\n\\end{cases}\\\\\n\\text{There is a solution only when $f[6][\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}] \\geqslant 0$}\n$$\n\n然后发现数组 `f` 其实只需要一维就够了，而且 $j$ 也只需要枚举到 $\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}$ 就行了，所以实现的时候只要这样子就行了：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\ninline void read(int &x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { putchar('-'); x = -x; }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) putchar(stk[top--] + '0');\n}\n\n#define maxn 20010\n// 这个 maxn 不能省\nint n, a[10], sum, f[maxn];\n\nint main() {\n  read(n);\n  while (n--) {\n    sum = 0;\n    for (int i = 1; i <= 6; ++i) { read(a[i]); sum += a[i] * i; }\n    if (sum & 1) { puts(\"Can't be divided.\"); continue; }\n    sum >>= 1;\n    memset(f, -1, sizeof(f));\n    f[0] = 0;\n    for (int i = 1; i <= 6; ++i) {\n      for (int j = 0; j <= sum; ++j) {\n        if (f[j] >= 0) f[j] = a[i];\n        else if (i <= j) f[j] = f[j - i] - 1;\n        else f[j] = -1; \n      }\n    }\n    if (f[sum] >= 0) puts(\"Can be divided.\");\n    else puts(\"Can't be divided.\");\n  }\n  return 0;\n}\n```\n\n### T3 cmi\n\n#### 题目\n\n    有一全排列，每次移动一个数，求使其变为升序的最少移动次数\n\n    输入 两行，第一行为排列中数字的数量，第二行为排列\n\n    输出 一行，最少移动的次数\n\n#### 题解\n\n就是最长上升子序列（LIS），中间再加一点优化（可以二分，也可以直接用 `lower_bound()` 函数）\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline void read(int &x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = getchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = getchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { putchar('-'); x = -x; }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) putchar(stk[top--] + '0');\n}\n\n#define maxn 200010\n\nint n, a[maxn], f[maxn], ans;\n\nint main() {\n  freopen(\"cmi.in\", \"r\", stdin);\n  freopen(\"cmi.out\", \"w\", stdout);\n  read(n); read(a[1]);\n  ans = 1;\n  f[1] = a[1];\n  for (int i = 2; i <= n; ++i) {\n    read(a[i]);\n    if (a[i] > f[ans]) {\n      ans++;\n      f[ans] = a[i];\n    } else {\n      int pos = lower_bound(f + 1, f + ans + 1, a[i]) - f;\n      f[pos] = a[i];\n    }\n  }\n  write(n - ans);\n  return 0;\n}\n```\n\n### 总结\n\n今天的题目做完后真的是感觉出卷老师出反了，以后还是得先浏览一遍题目 orz。\n\n---\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\"\n     style=\"display:block; text-align:center;\"\n     data-ad-layout=\"in-article\"\n     data-ad-format=\"fluid\"\n     data-ad-client=\"ca-pub-7465666912424994\"\n     data-ad-slot=\"3198608984\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>","source":"_posts/NOIP-模拟-一次出卷老师把题目出反的模拟赛.md","raw":"---\ntitle: '[NOIP 模拟] 一次出卷老师把题目出反的模拟赛'\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2018-10-01 15:35:03\ntags:\n  - NOIP 模拟\ncategories: NOIP\nphoto: /2018/10/01/NOIP-模拟-一次出卷老师把题目出反的模拟赛/photo1.png\n---\n\n{% note success %}\n\n**在这里先祝祖国母亲生日快乐，以及成为世界上存在时间最长的社会主义国家！😊😊**。\n\n{% endnote %}\n\n{% note default %}\n\n好了，说今天这套题目，隶属于国庆七连测😭，第一道题最恶心，第二题最难想，第三道题最简单。\n\n{% endnote %}\n\n<!-- more -->\n\n### T1 bread\n\n#### 题目\n\n    N 个数，M 次操作，给出两个参数 p, q，第i次染色将区间 (i * p + q) % N + 1 和 (i * q + p) % N + 1 之间的数变为 i（后面的操作将前面的覆盖）\n\n    输入 M, N, p, q\n\n    输出每个数的最终数字\n\n    100% 数据 n <= 1e6, m <= 1e7\n    m * p + q, m * q + p 在 int 范围内\n\n#### 题解\n\n一开始看到这道题是懵逼的，先打了一波暴力模拟，最大的数据跑一年都跑不出来，于是开始思考更好的算法，后来在某大佬的提示下，想到了并查集的做法。\n先打表，发现在 $M > N$ 时，区间是会有循环的，并且是 $N$ 次一循环，而这道题中最后某个点的颜色是以最后一次染色为准的，所以只要对 $\\max\\lbrace M - N + 1, 1\\rbrace$ 到 $M$ 这几次操作进行运算即可。但是发现这样还是会超时，因为区间是会有重复的，这会造成冗余的复杂度，所以需要考虑如何将这些运算去掉。考虑倒序进行处理，当我们对区间 $[l, r]$ 进行处理时，对于我们遇到的每一个点 $k$ 有两种情况：\n\n1. $k$ 未被更新过。\n2. $k$ 已经被更新过了，那么上次更新时它所在区间的所有的点也都被更新过了。\n\n从 $r$ 向前到 $l$ 进行更新，我们记录点 $k$ 上次更新时的左边界 $l'$，若 $k$ 被更新过，那么直接跳到 $l'-1$ 再继续向前更新。那为什么要用并查集呢？因为若 $l'-1$ 也被更新过了，就可以直接跳到更前面，进一步减少冗余运算，同时也防止数据卡我们。\n\n贴上代码：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\ninline void read(int &x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { putchar('-'); x = -x; }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) putchar(stk[top--] + '0');\n}\n\nstruct PAINT { int l, r; };\n\n#define maxm 10000010\n#define maxn 1000010\n\nint N, M, p, q, ans[maxn], fa[maxn];\nbool painted[maxn];\nPAINT paint[maxm];\n\ninline int get(int x) {\n  if (fa[x] == x) return x;\n  return fa[x] = get(fa[x]);\n  // 这里交的时候打成了 fa[x] == get(fa[x]) TAT\n  // 然而只 WA  了一个点 orz\n}\n\nint main() {\n  freopen(\"bread.in\", \"r\", stdin);\n  freopen(\"bread.out\", \"w\", stdout);\n  read(N); read(M); read(p); read(q);\n  memset(ans, 0, sizeof(ans));\n  for (int i = 1; i <= N; ++i) fa[i] = i;\n  int low = max(M - N + 1, 1);\n  for (int i = M; i >= low; --i) {\n    int l = min((i * p + q) % N + 1, (i * q + p) % N + 1);\n    int r = max((i * p + q) % N + 1, (i * q + p) % N + 1);\n    paint[i].l = l;\n    paint[i].r = r;\n  } // 防止区间出错，因为又可能出现 l > r 的情况。\n  for (int i = M; i >= low; --i) {\n    int l = paint[i].l;\n    int r = paint[i].r;\n    int j = r;\n    while (j >= l) {\n      if (ans[j] == 0) {\n        ans[j] = i;\n        fa[j] = get(l);\n        j--;\n      } else { j = fa[j] - 1; }\n    }\n  }\n  for (int i = 1; i <= N; ++i) { write(ans[i]); puts(\"\"); }\n  return 0;\n}\n```\n\n### T2 divide\n\n#### 题目\n\n    你有 n1 个 1，n2 个 2, n3 个 3, n4 个 4, n5 个 5, n6 个 6，问能否将他们分成两部分使得两部分的和相等\n\n    输入 第一行一个整数n，之后n行每行六个整数n1, n2, n3, n4, n5, n6\n\n    输出 如果可以输出 \"Can be divided.\"，不行输出 \"Can't be divided.\"\n\n#### 题解\n\n这道题老师来说了下 $n$ 最大有 $5000$，于是坚信了这道题是数论题 TAT。所以思考的角度完全错误，直接爆零。\n比赛结束后知道了应该用背包做，但是裸的多重背包会 TLE，更何况有 $5000$ 的数据，所以去阅读了标程，发现了原来正解是一个很神奇的 dp。\n\n首先我们令 $f[i][j]$ 表示当总和为 $j$ 时，$i$ 这个数还可以使用的个数，$a[i]$ 表示 $i$ 这个数可以使用的总个数，于是我们有动态规划方程如下：\n\n$$\nf[i][j] = \n\\begin{cases}\na[i], & \\text{when $f[i - 1][j]\\geqslant 0$} \\\\\nf[i][j - i] - 1, & \\text{when $j\\geqslant i$ and $f[i - 1][j]\\leqslant 0$} \\\\\n-1, & \\text{otherwise}\n\\end{cases}\\\\\n\\text{There is a solution only when $f[6][\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}] \\geqslant 0$}\n$$\n\n然后发现数组 `f` 其实只需要一维就够了，而且 $j$ 也只需要枚举到 $\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}$ 就行了，所以实现的时候只要这样子就行了：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline char nextchar() {\n  static char buf[100000], *p1 = buf, *p2 = buf;\n  return (p1 == p2) &&\n    (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\ninline void read(int &x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = nextchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = nextchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { putchar('-'); x = -x; }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) putchar(stk[top--] + '0');\n}\n\n#define maxn 20010\n// 这个 maxn 不能省\nint n, a[10], sum, f[maxn];\n\nint main() {\n  read(n);\n  while (n--) {\n    sum = 0;\n    for (int i = 1; i <= 6; ++i) { read(a[i]); sum += a[i] * i; }\n    if (sum & 1) { puts(\"Can't be divided.\"); continue; }\n    sum >>= 1;\n    memset(f, -1, sizeof(f));\n    f[0] = 0;\n    for (int i = 1; i <= 6; ++i) {\n      for (int j = 0; j <= sum; ++j) {\n        if (f[j] >= 0) f[j] = a[i];\n        else if (i <= j) f[j] = f[j - i] - 1;\n        else f[j] = -1; \n      }\n    }\n    if (f[sum] >= 0) puts(\"Can be divided.\");\n    else puts(\"Can't be divided.\");\n  }\n  return 0;\n}\n```\n\n### T3 cmi\n\n#### 题目\n\n    有一全排列，每次移动一个数，求使其变为升序的最少移动次数\n\n    输入 两行，第一行为排列中数字的数量，第二行为排列\n\n    输出 一行，最少移动的次数\n\n#### 题解\n\n就是最长上升子序列（LIS），中间再加一点优化（可以二分，也可以直接用 `lower_bound()` 函数）\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline void read(int &x) {\n  x = 0;\n  static char ch = 0;\n  static bool sign = false;\n  while (!isdigit(ch)) { sign |= (ch == '-'); ch = getchar(); }\n  while (isdigit(ch)) { x = x * 10 + (ch ^ 48); ch = getchar(); }\n  x = sign ? -x : x;\n}\n\ninline void write(int x) {\n  static int stk[100], top = 0;\n  if (x == 0) { putchar('0'); return; }\n  if (x < 0) { putchar('-'); x = -x; }\n  while (x) { stk[++top] = x % 10; x /= 10; }\n  while (top) putchar(stk[top--] + '0');\n}\n\n#define maxn 200010\n\nint n, a[maxn], f[maxn], ans;\n\nint main() {\n  freopen(\"cmi.in\", \"r\", stdin);\n  freopen(\"cmi.out\", \"w\", stdout);\n  read(n); read(a[1]);\n  ans = 1;\n  f[1] = a[1];\n  for (int i = 2; i <= n; ++i) {\n    read(a[i]);\n    if (a[i] > f[ans]) {\n      ans++;\n      f[ans] = a[i];\n    } else {\n      int pos = lower_bound(f + 1, f + ans + 1, a[i]) - f;\n      f[pos] = a[i];\n    }\n  }\n  write(n - ans);\n  return 0;\n}\n```\n\n### 总结\n\n今天的题目做完后真的是感觉出卷老师出反了，以后还是得先浏览一遍题目 orz。\n\n---\n\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\"\n     style=\"display:block; text-align:center;\"\n     data-ad-layout=\"in-article\"\n     data-ad-format=\"fluid\"\n     data-ad-client=\"ca-pub-7465666912424994\"\n     data-ad-slot=\"3198608984\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>","slug":"NOIP-模拟-一次出卷老师把题目出反的模拟赛","published":1,"updated":"2018-10-02T08:23:22.602Z","photos":["/2018/10/01/NOIP-模拟-一次出卷老师把题目出反的模拟赛/photo1.png"],"comments":1,"layout":"post","link":"","_id":"cjmssgbsu0038rgc87yo8uqqu","content":"<div class=\"note success\"><p><strong>在这里先祝祖国母亲生日快乐，以及成为世界上存在时间最长的社会主义国家！😊😊</strong>。</p></div>\n<div class=\"note default\"><p>好了，说今天这套题目，隶属于国庆七连测😭，第一道题最恶心，第二题最难想，第三道题最简单。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"T1-bread\"><a href=\"#T1-bread\" class=\"headerlink\" title=\"T1 bread\"></a>T1 bread</h3><h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><pre><code>N 个数，M 次操作，给出两个参数 p, q，第i次染色将区间 (i * p + q) % N + 1 和 (i * q + p) % N + 1 之间的数变为 i（后面的操作将前面的覆盖）\n\n输入 M, N, p, q\n\n输出每个数的最终数字\n\n100% 数据 n &lt;= 1e6, m &lt;= 1e7\nm * p + q, m * q + p 在 int 范围内\n</code></pre><h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>一开始看到这道题是懵逼的，先打了一波暴力模拟，最大的数据跑一年都跑不出来，于是开始思考更好的算法，后来在某大佬的提示下，想到了并查集的做法。<br>先打表，发现在 $M &gt; N$ 时，区间是会有循环的，并且是 $N$ 次一循环，而这道题中最后某个点的颜色是以最后一次染色为准的，所以只要对 $\\max\\lbrace M - N + 1, 1\\rbrace$ 到 $M$ 这几次操作进行运算即可。但是发现这样还是会超时，因为区间是会有重复的，这会造成冗余的复杂度，所以需要考虑如何将这些运算去掉。考虑倒序进行处理，当我们对区间 $[l, r]$ 进行处理时，对于我们遇到的每一个点 $k$ 有两种情况：</p>\n<ol>\n<li>$k$ 未被更新过。</li>\n<li>$k$ 已经被更新过了，那么上次更新时它所在区间的所有的点也都被更新过了。</li>\n</ol>\n<p>从 $r$ 向前到 $l$ 进行更新，我们记录点 $k$ 上次更新时的左边界 $l’$，若 $k$ 被更新过，那么直接跳到 $l’-1$ 再继续向前更新。那为什么要用并查集呢？因为若 $l’-1$ 也被更新过了，就可以直接跳到更前面，进一步减少冗余运算，同时也防止数据卡我们。</p>\n<p>贴上代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PAINT</span> &#123;</span> <span class=\"keyword\">int</span> l, r; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 10000010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> N, M, p, q, ans[maxn], fa[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> painted[maxn];</span><br><span class=\"line\">PAINT paint[maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fa[x] == x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fa[x] = get(fa[x]);</span><br><span class=\"line\">  <span class=\"comment\">// 这里交的时候打成了 fa[x] == get(fa[x]) TAT</span></span><br><span class=\"line\">  <span class=\"comment\">// 然而只 WA  了一个点 orz</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"bread.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"bread.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(N); read(M); read(p); read(q);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; ++i) fa[i] = i;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> low = max(M - N + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = M; i &gt;= low; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = min((i * p + q) % N + <span class=\"number\">1</span>, (i * q + p) % N + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = max((i * p + q) % N + <span class=\"number\">1</span>, (i * q + p) % N + <span class=\"number\">1</span>);</span><br><span class=\"line\">    paint[i].l = l;</span><br><span class=\"line\">    paint[i].r = r;</span><br><span class=\"line\">  &#125; <span class=\"comment\">// 防止区间出错，因为又可能出现 l &gt; r 的情况。</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = M; i &gt;= low; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = paint[i].l;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = paint[i].r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt;= l) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ans[j] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ans[j] = i;</span><br><span class=\"line\">        fa[j] = get(l);</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123; j = fa[j] - <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; ++i) &#123; write(ans[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"T2-divide\"><a href=\"#T2-divide\" class=\"headerlink\" title=\"T2 divide\"></a>T2 divide</h3><h4 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h4><pre><code>你有 n1 个 1，n2 个 2, n3 个 3, n4 个 4, n5 个 5, n6 个 6，问能否将他们分成两部分使得两部分的和相等\n\n输入 第一行一个整数n，之后n行每行六个整数n1, n2, n3, n4, n5, n6\n\n输出 如果可以输出 &quot;Can be divided.&quot;，不行输出 &quot;Can&apos;t be divided.&quot;\n</code></pre><h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>这道题老师来说了下 $n$ 最大有 $5000$，于是坚信了这道题是数论题 TAT。所以思考的角度完全错误，直接爆零。<br>比赛结束后知道了应该用背包做，但是裸的多重背包会 TLE，更何况有 $5000$ 的数据，所以去阅读了标程，发现了原来正解是一个很神奇的 dp。</p>\n<p>首先我们令 $f[i][j]$ 表示当总和为 $j$ 时，$i$ 这个数还可以使用的个数，$a[i]$ 表示 $i$ 这个数可以使用的总个数，于是我们有动态规划方程如下：</p>\n<p>$$<br>f[i][j] =<br>\\begin{cases}<br>a[i], &amp; \\text{when $f[i - 1][j]\\geqslant 0$} \\\\<br>f[i][j - i] - 1, &amp; \\text{when $j\\geqslant i$ and $f[i - 1][j]\\leqslant 0$} \\\\<br>-1, &amp; \\text{otherwise}<br>\\end{cases}\\\\<br>\\text{There is a solution only when $f[6][\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}] \\geqslant 0$}<br>$$</p>\n<p>然后发现数组 <code>f</code> 其实只需要一维就够了，而且 $j$ 也只需要枚举到 $\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}$ 就行了，所以实现的时候只要这样子就行了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 20010</span></span><br><span class=\"line\"><span class=\"comment\">// 这个 maxn 不能省</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[<span class=\"number\">10</span>], sum, f[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  read(n);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; ++i) &#123; read(a[i]); sum += a[i] * i; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &amp; <span class=\"number\">1</span>) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">\"Can't be divided.\"</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">    sum &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(f));</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= sum; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[j] &gt;= <span class=\"number\">0</span>) f[j] = a[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt;= j) f[j] = f[j - i] - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> f[j] = <span class=\"number\">-1</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[sum] &gt;= <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Can be divided.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Can't be divided.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"T3-cmi\"><a href=\"#T3-cmi\" class=\"headerlink\" title=\"T3 cmi\"></a>T3 cmi</h3><h4 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h4><pre><code>有一全排列，每次移动一个数，求使其变为升序的最少移动次数\n\n输入 两行，第一行为排列中数字的数量，第二行为排列\n\n输出 一行，最少移动的次数\n</code></pre><h4 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>就是最长上升子序列（LIS），中间再加一点优化（可以二分，也可以直接用 <code>lower_bound()</code> 函数）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 200010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[maxn], f[maxn], ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"cmi.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"cmi.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(n); read(a[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    read(a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[i] &gt; f[ans]) &#123;</span><br><span class=\"line\">      ans++;</span><br><span class=\"line\">      f[ans] = a[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> pos = lower_bound(f + <span class=\"number\">1</span>, f + ans + <span class=\"number\">1</span>, a[i]) - f;</span><br><span class=\"line\">      f[pos] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  write(n - ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天的题目做完后真的是感觉出卷老师出反了，以后还是得先浏览一遍题目 orz。</p>\n<hr>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-7465666912424994\" data-ad-slot=\"3198608984\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>","site":{"data":{}},"excerpt":"<div class=\"note success\"><p><strong>在这里先祝祖国母亲生日快乐，以及成为世界上存在时间最长的社会主义国家！😊😊</strong>。</p></div>\n<div class=\"note default\"><p>好了，说今天这套题目，隶属于国庆七连测😭，第一道题最恶心，第二题最难想，第三道题最简单。</p></div>","more":"<h3 id=\"T1-bread\"><a href=\"#T1-bread\" class=\"headerlink\" title=\"T1 bread\"></a>T1 bread</h3><h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h4><pre><code>N 个数，M 次操作，给出两个参数 p, q，第i次染色将区间 (i * p + q) % N + 1 和 (i * q + p) % N + 1 之间的数变为 i（后面的操作将前面的覆盖）\n\n输入 M, N, p, q\n\n输出每个数的最终数字\n\n100% 数据 n &lt;= 1e6, m &lt;= 1e7\nm * p + q, m * q + p 在 int 范围内\n</code></pre><h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>一开始看到这道题是懵逼的，先打了一波暴力模拟，最大的数据跑一年都跑不出来，于是开始思考更好的算法，后来在某大佬的提示下，想到了并查集的做法。<br>先打表，发现在 $M &gt; N$ 时，区间是会有循环的，并且是 $N$ 次一循环，而这道题中最后某个点的颜色是以最后一次染色为准的，所以只要对 $\\max\\lbrace M - N + 1, 1\\rbrace$ 到 $M$ 这几次操作进行运算即可。但是发现这样还是会超时，因为区间是会有重复的，这会造成冗余的复杂度，所以需要考虑如何将这些运算去掉。考虑倒序进行处理，当我们对区间 $[l, r]$ 进行处理时，对于我们遇到的每一个点 $k$ 有两种情况：</p>\n<ol>\n<li>$k$ 未被更新过。</li>\n<li>$k$ 已经被更新过了，那么上次更新时它所在区间的所有的点也都被更新过了。</li>\n</ol>\n<p>从 $r$ 向前到 $l$ 进行更新，我们记录点 $k$ 上次更新时的左边界 $l’$，若 $k$ 被更新过，那么直接跳到 $l’-1$ 再继续向前更新。那为什么要用并查集呢？因为若 $l’-1$ 也被更新过了，就可以直接跳到更前面，进一步减少冗余运算，同时也防止数据卡我们。</p>\n<p>贴上代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PAINT</span> &#123;</span> <span class=\"keyword\">int</span> l, r; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxm 10000010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> N, M, p, q, ans[maxn], fa[maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> painted[maxn];</span><br><span class=\"line\">PAINT paint[maxm];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fa[x] == x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fa[x] = get(fa[x]);</span><br><span class=\"line\">  <span class=\"comment\">// 这里交的时候打成了 fa[x] == get(fa[x]) TAT</span></span><br><span class=\"line\">  <span class=\"comment\">// 然而只 WA  了一个点 orz</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"bread.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"bread.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(N); read(M); read(p); read(q);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; ++i) fa[i] = i;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> low = max(M - N + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = M; i &gt;= low; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = min((i * p + q) % N + <span class=\"number\">1</span>, (i * q + p) % N + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = max((i * p + q) % N + <span class=\"number\">1</span>, (i * q + p) % N + <span class=\"number\">1</span>);</span><br><span class=\"line\">    paint[i].l = l;</span><br><span class=\"line\">    paint[i].r = r;</span><br><span class=\"line\">  &#125; <span class=\"comment\">// 防止区间出错，因为又可能出现 l &gt; r 的情况。</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = M; i &gt;= low; --i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = paint[i].l;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = paint[i].r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt;= l) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ans[j] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ans[j] = i;</span><br><span class=\"line\">        fa[j] = get(l);</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123; j = fa[j] - <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; ++i) &#123; write(ans[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"T2-divide\"><a href=\"#T2-divide\" class=\"headerlink\" title=\"T2 divide\"></a>T2 divide</h3><h4 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h4><pre><code>你有 n1 个 1，n2 个 2, n3 个 3, n4 个 4, n5 个 5, n6 个 6，问能否将他们分成两部分使得两部分的和相等\n\n输入 第一行一个整数n，之后n行每行六个整数n1, n2, n3, n4, n5, n6\n\n输出 如果可以输出 &quot;Can be divided.&quot;，不行输出 &quot;Can&apos;t be divided.&quot;\n</code></pre><h4 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>这道题老师来说了下 $n$ 最大有 $5000$，于是坚信了这道题是数论题 TAT。所以思考的角度完全错误，直接爆零。<br>比赛结束后知道了应该用背包做，但是裸的多重背包会 TLE，更何况有 $5000$ 的数据，所以去阅读了标程，发现了原来正解是一个很神奇的 dp。</p>\n<p>首先我们令 $f[i][j]$ 表示当总和为 $j$ 时，$i$ 这个数还可以使用的个数，$a[i]$ 表示 $i$ 这个数可以使用的总个数，于是我们有动态规划方程如下：</p>\n<p>$$<br>f[i][j] =<br>\\begin{cases}<br>a[i], &amp; \\text{when $f[i - 1][j]\\geqslant 0$} \\\\<br>f[i][j - i] - 1, &amp; \\text{when $j\\geqslant i$ and $f[i - 1][j]\\leqslant 0$} \\\\<br>-1, &amp; \\text{otherwise}<br>\\end{cases}\\\\<br>\\text{There is a solution only when $f[6][\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}] \\geqslant 0$}<br>$$</p>\n<p>然后发现数组 <code>f</code> 其实只需要一维就够了，而且 $j$ 也只需要枚举到 $\\frac{\\sum_{i = 1}^6 a[i]\\times i}{2}$ 就行了，所以实现的时候只要这样子就行了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">nextchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (p1 == p2) &amp;&amp;</span><br><span class=\"line\">    (p2 = (p1 = buf) + fread(buf, <span class=\"number\">1</span>, <span class=\"number\">100000</span>, <span class=\"built_in\">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = nextchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 20010</span></span><br><span class=\"line\"><span class=\"comment\">// 这个 maxn 不能省</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[<span class=\"number\">10</span>], sum, f[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  read(n);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; ++i) &#123; read(a[i]); sum += a[i] * i; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &amp; <span class=\"number\">1</span>) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">\"Can't be divided.\"</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">    sum &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(f));</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= sum; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[j] &gt;= <span class=\"number\">0</span>) f[j] = a[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt;= j) f[j] = f[j - i] - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> f[j] = <span class=\"number\">-1</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[sum] &gt;= <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Can be divided.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Can't be divided.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"T3-cmi\"><a href=\"#T3-cmi\" class=\"headerlink\" title=\"T3 cmi\"></a>T3 cmi</h3><h4 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h4><pre><code>有一全排列，每次移动一个数，求使其变为升序的最少移动次数\n\n输入 两行，第一行为排列中数字的数量，第二行为排列\n\n输出 一行，最少移动的次数\n</code></pre><h4 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h4><p>就是最长上升子序列（LIS），中间再加一点优化（可以二分，也可以直接用 <code>lower_bound()</code> 函数）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x)</span> </span>&#123;</span><br><span class=\"line\">  x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> sign = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch)) &#123; sign |= (ch == <span class=\"string\">'-'</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch)) &#123; x = x * <span class=\"number\">10</span> + (ch ^ <span class=\"number\">48</span>); ch = getchar(); &#125;</span><br><span class=\"line\">  x = sign ? -x : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stk[<span class=\"number\">100</span>], top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>); x = -x; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x) &#123; stk[++top] = x % <span class=\"number\">10</span>; x /= <span class=\"number\">10</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[top--] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 200010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[maxn], f[maxn], ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  freopen(<span class=\"string\">\"cmi.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  freopen(<span class=\"string\">\"cmi.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">  read(n); read(a[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">  f[<span class=\"number\">1</span>] = a[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">    read(a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[i] &gt; f[ans]) &#123;</span><br><span class=\"line\">      ans++;</span><br><span class=\"line\">      f[ans] = a[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> pos = lower_bound(f + <span class=\"number\">1</span>, f + ans + <span class=\"number\">1</span>, a[i]) - f;</span><br><span class=\"line\">      f[pos] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  write(n - ans);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>今天的题目做完后真的是感觉出卷老师出反了，以后还是得先浏览一遍题目 orz。</p>\n<hr>\n<script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-7465666912424994\" data-ad-slot=\"3198608984\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>"},{"title":"[数论] OI 中素数有关的算法整理","date":"2018-08-22T10:26:19.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。\n\n<!-- more -->\n\n### 素数的判定\n\n#### Brute-Force 朴素算法\n\n额，这个就不多说了吧，最无脑的，$2\\thicksim n$ 枚举所有小于 $n$ 的数来进行判定。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool isPrime(int n) {\n\tif (n == 2) return true;\n\tfor (int i = 2; i < n; ++i)\n\t\tif (n % i == 0) return false;\n\treturn true;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\tcout << (isPrime(n) ? \"Yes\" : \"No\") << endl;\n\treturn 0;\n}\n```\n\n#### Optimized-Brute-Force 优化过的朴素算法\n\n如果一个数不是素数是合数， 那么一定可以由两个大于 $1$ 自然数相乘得到， 其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现。所以可以优化朴素算法\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool isPrime(int n) {\n\tif (n == 2) return true;\n\tfor (int i = 2; i * i < n; ++i)\n\t\tif (n % i == 0) return false;\n\treturn true;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\tcout << (isPrime(n) ? \"Yes\" : \"No\") << endl;\n\treturn 0;\n}\n```\n\n#### 筛法求素数\n\n上面两个菜鸡方法只能针对数很小的情况，这些情况在 OI 中出现的话出卷老师会~~死得很惨~~变成广大 OIer 的恩人，然而这种情况是不可能的。于是又有了更高效的方法——筛法。它的思想就是将一个范围内的素数全部筛出来，预处理之后方便查找和判定。最朴素的筛法莫过于 Eratosthenes 筛法了~~（不要纠结这个名字怎么读，因为我也不会）~~，它是将所有素数的倍数都给筛掉，剩下的就是素数了。时间复杂度为 $O(N\\log\\log N)$ 接近线性\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 1000010\nbool prime[maxn];\nvoid Eratosthenes() {\n\tmemset(prime, true, sizeof(prime));\n\tprime[1] = false;\n\tfor (int i = 2; i <= maxn; ++i) {\n\t\tif (!prime[i]) continue;\n\t\tfor (int j = i; j <= maxn / i; ++j) {\n\t\t\t// 这里是一个小优化，因为小于 i^2 的数在前面肯定已经筛过了\n\t\t\t// 所以 j 从 i 开始取\n\t\t\tprime[j * i] = false;\n\t\t}\n\t}\n}\nint main() {\n\tint n;\n\tEratosthenes();\n\tcin >> n;\n\tcout << (prime[n] ? \"Yes\" : \"No\") << endl;\n\treturn 0;\n}\n```\n然而，Eratosthenes 筛会重复标记素数，造成时间复杂度冗余，如果对于每个数有唯一的方法确定它，那么就可以解决这个问题。由此引出了线性筛这个方法，它通过从大到小累计质因子的方法标记每一个合数，即让 $12$ 只有 $2\\times 2\\times 3$ 这种产生方式。设数组 $fac$ 记录每个数的最小质因子，我们按照下面的步骤来维护 $fac$：\n\n1. 依次考虑 $1\\thicksim n$ 之见的每一个数 $i$\n2. 若 $fac[i]=i$ 说明 $i$ 是质数，将它保存下来\n3. 扫描不大于 $fac[i]$ 的每个质数 $p$，令 $fac[i\\times p]=p$，即在 $i$ 的基础上累积一个质因子 $p$，因为 $p\\leqslant fac[i]$，所以 $p$ 为合数 $i\\times p$ 的最小质因子。\n\n这样子，每个合数只会被它的最小质因子 $p$ 筛一次，时间复杂度为线性。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 1000010\nint fac[maxn], prime[maxn];\nvoid LinearSieve(int n) {\n\tmemset(fac, 0, sizeof(fac));\n\tint m = 0;\n\tfor (int i = 2; i <= n; ++i) {\n\t\tif (fac[i] == 0) { fac[i] = i; prime[++m] = i; }\n\t\tfor (int j = 1; j <= m; ++j) {\n\t\t\t// 跳出循环的条件\n\t\t\tif (prime[j] > fac[i] || prime[j] > n / i) break;\n\t\t\tfac[i * prime[j]] = prime[j];\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; ++i) cout << prime[i] << \" \";\n}\nint main() {\n\tint n;\n\tLinearSieve(100000);\n\treturn 0;\n}\n```\n线性筛又名**欧拉筛**。\n\n#### 伪素数测试\n\n在开始 Miller-Rabin 算法之前我们先来看一下伪素数测试，首先要了解费马小定理： $a^{p-1}\\equiv1(\\bmod p)$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。费马小定理的逆命题虽然不是真命题，但是几乎成立，而不成立的时候，即如果 $n$ 是一个合数且 $a^{n-1}\\equiv 1(\\bmod n)$，那么称 $n$ 为基为 $a$ 的**伪素数**。\n如果我们找到一个 $a$ 使得 $n$ 不满足上述等式，那么 $n$ 必定为合数，那如果满足呢？$n$ 不一定是素数，这样的数被称作 Carmicheal 数，但是这种数十分稀少，前 $10000$ 个 $n$ 中只有 $22​$ 个数为 Carmicheal 数，所以这种方法还是比较可靠的。附上算法导论中的伪代码：\n\n<div style=\"align: center\"> <img src=\"pic1.png\"/> </div>\n\n因为 Carmicheal 数的存在，人们寻求更好的，更准确的素数判定方法，于是就有了 Miller-Rabin 算法\n\n#### Miller-Rabin 算法\n\n通过费马小定理我们可以得出一个推论，若 $p$ 为一个奇素数，那么有：\n$$\na^p\\equiv a\\pmod p,1\\leqslant a\\leqslant p\n$$\n\n我们记\n$$\np-1=2^kq,2\\nmid q\n$$\n设 $a$ 是不被 $p$ 整除的数，那么下面两个条件之一必然成立：\n\n-   $a^q \\equiv 1 \\pmod p$\n-   $a^q, a^{2q}, a^{2^2q}, \\dots, a^{2^{k-1}q} \\equiv -1 \\pmod p$ 之中有一个等式成立\n\n根据如下命题：\n$$\na^2 \\equiv 1 \\pmod p \\Rightarrow a \\equiv \\pm 1 \\pmod p\n$$\n又因为上面第二个条件中的数，每一个都是前一个的平方，且最后一个数的平方是 $1$，所以如果表中一个数它模 $p$ 不余 $1$，但是它的平方模 $p$ 余 $1$，那么那个数一定是 $-1$，所以在这种情况下表中包含 $ -1$，又或者表中全是 $1$，那么第一个条件就会成立。\n\n所以我们得到了 Miller-Rabin 素性测试的方法，也就是说，如果一个数不满足上面的性质，那么它就是和数，这个 $a$ 就成为证据。而 Miller-Rabin 的证据和上面提到的方法的证据不同，它能够保证每一个奇合数 $p$ 都会有不少于 $\\frac{(p−1)}{2}$个证据（具体证明详见算法导论）。\n\n我们只要随机 $50$ 个数来测试，那么测试失败的概率一定小于 $2^{−50}$，大约是 $8.9⋅10^{−16}$，如果你觉得不够，还可以找更多的数来测试。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long  int64;\n\ninline int64 rand64() { return abs((int64)rand() << 32 | rand()); }\ninline int64 random(int64 x, int64 y) { return x + rand64() % (y - x + 1); }\n// 随机数生成函数\nint64 montgomery(int64 a, int64 b, int64 c) {\n\tint64 result = 1;\n\tint64 temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n\nbool witness(int64 a, int64 p) {\n\tint k = 0;\n\tint64 q = p - 1;\n\twhile ((q & 1) == 0) { k++; q >>=1; }\n\tint64 v = montgomery(a, q, p); // 判断一\n\tif (v == 1 || v == p - 1) return false;\n\twhile (k--) {\n\t\tv = v * v % p;\n\t\tif (v == p - 1) return false; // 判断二\n\t}\n\treturn true;\n}\n\nbool MillerRabin(int64 p) {\n\tif (p == 1) return false;\n\tif (p == 2) return true;\n\tif (p % 2 == 0) return false;\n\t// 这里其实可以加更多的特判来节约时间\n\tfor (int i = 1; i <= 50; ++i)\n\t\tif (witness(random(1, p - 1), p)) return false;\n\treturn true;\n}\nint main() {\n\tint n;\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (MillerRabin(i)) cout << i << \" \";\n\t// 输出 1 ~ n 之间的所有素数\n\treturn 0;\n}\n```\n\n对于大的素数，为了节约判定的时间，我们只能退而求其次选择非完美算法来进行验证，不过不得不说，Miller-Rabin 其实已经很完备了。\n\n#### 总结\n\n事实上，对于素数的判定还有很多算法，例如 [Solovay-Strassen 算法](https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test)和 [AKS 算法](https://en.wikipedia.org/wiki/AKS_primality_test)，然而这两个似乎都超出了 OI 的范围，一般不会用得到，这里也就不再赘述。\n\n### 质因数分解\n\n#### 试除法\n\n结合素数判定的“试除法”和“Eratosthenes 筛法”，我们可以扫描 $2\\thicksim\\lfloor\\sqrt{n}\\rfloor$ 中的每个数 $d$，若 $d$ 能整除 $n$，则从 $n$ 中除掉所有的因子 $d$，同时累计个数。\n\n```cpp\nint p[maxn], c[maxn];\nvoid divide(int n) {\n\tint m = 0;\n\tfor (int i = 2; i * i <= n; ++i) {\n\t\tif (n % i == 0) {\n\t\t\tp[++m] = i;\n\t\t\tc[m] = 0;\n\t\t\twhile (n % i == 0) { n /= i; c[m]++; }\n\t\t}\n\t}\n\tif (n > 1) { p[++m] = n; c[m] = 1 }\n\tfor (int i = 1; i <= m; ++i) cout << p[i] << '^' << c[i] << endl;\n}\n```\n#### Pollard-Rho 算法\n\nPollard-Rho 也是一个不完美算法，不完美之处在时间复杂度上体现。Pollard-Rho算法分解一个数 $n$ 的过程大体上是这样子的：\n\n1. 找到一个数 $p$，使得 $p|n$，将 $n$ 分解为 $p$ 与 $\\frac{n}{p}$\n2. 如果 $p$ 或 $\\frac{n}{p}$ 不为质数，将其带入递归上述过程\n3. 如果其是质数，将其记录并退出\n\n那有人就会问了：这跟暴力分解有什么区别？好像时间复杂度比暴力还高啊！！？？所以，下面的优化才是关键。第一个优化，使用 Miller-Rabin 判定其是否为质数。第二个优化才是最关键的：对于一个大整数n，我们要找到一个 $p$ 满足 $p|n$，这如同大海捞针。但是如果我们要找出 $p_1$、$p_2$，使得 $(|p_1−p_2|)|n$，这看起来似乎要容易一些。实际上我们只需要找出 $\\gcd((|p1−p2|),n)>1$的 $p_1$、$p_2$，则其 $\\gcd$ 值肯定为n的约数。这看起来又容易了一些。实际上，这让整个算法容易许多。根据[生日悖论](https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C)，这种两两比较的方式，在加入比较的数越来越多的时候，其效率会大大提升，比找一个数的效率快很多。于是，找 $p$ 的过程变成了这个样子：\n\n1. 找到一个数 $p_1$\n2. 通过某种玄学推导手段找出一个与 $p_1$ 对应的 $p_2$\n3. 判断 $\\gcd((|p1−p2|),n)$ 是否大于 $1$，不大于则将 $p_2$作为新的 $p_1$，重复过程，否则就找到了\n\n为什么要用玄学手段？因为只有通过推导手段，才能保证不做重复判断。理论上的推导手段可以有很多，但实际使用中一般使用如下公式推导：\n$$\np_2=(p_1^2+c)\\bmod n\n$$\n其中 $c$ 为随机常数。\n这个公式的好处:\n\n  1. 推导出来的 $p_2-p_1$ 差值基本不会相等。\n  2. 可以证明，该推导结果会出现循环。也就是说，在出现循环之前，结果不会重复，少做了许多无用的判断。\n\n出现循环了怎么办？换一个随机常数再搞。这就是该算法“非完美”的地方，~~时间复杂度要看脸的~~。那么如何判环呢？这里介绍一个算法：[Floyd 判圈](https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95)。 需要注意的是，之所以不能一个标记定在原地，是因为循环节不一定在开头就产生，可能走着走着才遇到循环。这条路径就类似于 $\\rho$，Pollard-Rho 算法也是因此得名的。顺便附上算法导论中的一张玄学图：\n\n<div style=\"align: center\"> <img src=\"pic2.png\"/> </div>\n\n注意，在小数分解的时候就别用这个了，老老实实用试除法吧。\n\n### 未完待续......\n\n---\n\n\n\n","source":"_posts/数论-OI-中素数有关的算法整理.md","raw":"---\ntitle: '[数论] OI 中素数有关的算法整理'\ndate: 2018-08-22 18:26:19\ntags:\n\t- 数论\n\t- 素数\ncategories: 数论\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。\n\n<!-- more -->\n\n### 素数的判定\n\n#### Brute-Force 朴素算法\n\n额，这个就不多说了吧，最无脑的，$2\\thicksim n$ 枚举所有小于 $n$ 的数来进行判定。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool isPrime(int n) {\n\tif (n == 2) return true;\n\tfor (int i = 2; i < n; ++i)\n\t\tif (n % i == 0) return false;\n\treturn true;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\tcout << (isPrime(n) ? \"Yes\" : \"No\") << endl;\n\treturn 0;\n}\n```\n\n#### Optimized-Brute-Force 优化过的朴素算法\n\n如果一个数不是素数是合数， 那么一定可以由两个大于 $1$ 自然数相乘得到， 其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现。所以可以优化朴素算法\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool isPrime(int n) {\n\tif (n == 2) return true;\n\tfor (int i = 2; i * i < n; ++i)\n\t\tif (n % i == 0) return false;\n\treturn true;\n}\n\nint main() {\n\tint n;\n\tcin >> n;\n\tcout << (isPrime(n) ? \"Yes\" : \"No\") << endl;\n\treturn 0;\n}\n```\n\n#### 筛法求素数\n\n上面两个菜鸡方法只能针对数很小的情况，这些情况在 OI 中出现的话出卷老师会~~死得很惨~~变成广大 OIer 的恩人，然而这种情况是不可能的。于是又有了更高效的方法——筛法。它的思想就是将一个范围内的素数全部筛出来，预处理之后方便查找和判定。最朴素的筛法莫过于 Eratosthenes 筛法了~~（不要纠结这个名字怎么读，因为我也不会）~~，它是将所有素数的倍数都给筛掉，剩下的就是素数了。时间复杂度为 $O(N\\log\\log N)$ 接近线性\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 1000010\nbool prime[maxn];\nvoid Eratosthenes() {\n\tmemset(prime, true, sizeof(prime));\n\tprime[1] = false;\n\tfor (int i = 2; i <= maxn; ++i) {\n\t\tif (!prime[i]) continue;\n\t\tfor (int j = i; j <= maxn / i; ++j) {\n\t\t\t// 这里是一个小优化，因为小于 i^2 的数在前面肯定已经筛过了\n\t\t\t// 所以 j 从 i 开始取\n\t\t\tprime[j * i] = false;\n\t\t}\n\t}\n}\nint main() {\n\tint n;\n\tEratosthenes();\n\tcin >> n;\n\tcout << (prime[n] ? \"Yes\" : \"No\") << endl;\n\treturn 0;\n}\n```\n然而，Eratosthenes 筛会重复标记素数，造成时间复杂度冗余，如果对于每个数有唯一的方法确定它，那么就可以解决这个问题。由此引出了线性筛这个方法，它通过从大到小累计质因子的方法标记每一个合数，即让 $12$ 只有 $2\\times 2\\times 3$ 这种产生方式。设数组 $fac$ 记录每个数的最小质因子，我们按照下面的步骤来维护 $fac$：\n\n1. 依次考虑 $1\\thicksim n$ 之见的每一个数 $i$\n2. 若 $fac[i]=i$ 说明 $i$ 是质数，将它保存下来\n3. 扫描不大于 $fac[i]$ 的每个质数 $p$，令 $fac[i\\times p]=p$，即在 $i$ 的基础上累积一个质因子 $p$，因为 $p\\leqslant fac[i]$，所以 $p$ 为合数 $i\\times p$ 的最小质因子。\n\n这样子，每个合数只会被它的最小质因子 $p$ 筛一次，时间复杂度为线性。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 1000010\nint fac[maxn], prime[maxn];\nvoid LinearSieve(int n) {\n\tmemset(fac, 0, sizeof(fac));\n\tint m = 0;\n\tfor (int i = 2; i <= n; ++i) {\n\t\tif (fac[i] == 0) { fac[i] = i; prime[++m] = i; }\n\t\tfor (int j = 1; j <= m; ++j) {\n\t\t\t// 跳出循环的条件\n\t\t\tif (prime[j] > fac[i] || prime[j] > n / i) break;\n\t\t\tfac[i * prime[j]] = prime[j];\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; ++i) cout << prime[i] << \" \";\n}\nint main() {\n\tint n;\n\tLinearSieve(100000);\n\treturn 0;\n}\n```\n线性筛又名**欧拉筛**。\n\n#### 伪素数测试\n\n在开始 Miller-Rabin 算法之前我们先来看一下伪素数测试，首先要了解费马小定理： $a^{p-1}\\equiv1(\\bmod p)$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。费马小定理的逆命题虽然不是真命题，但是几乎成立，而不成立的时候，即如果 $n$ 是一个合数且 $a^{n-1}\\equiv 1(\\bmod n)$，那么称 $n$ 为基为 $a$ 的**伪素数**。\n如果我们找到一个 $a$ 使得 $n$ 不满足上述等式，那么 $n$ 必定为合数，那如果满足呢？$n$ 不一定是素数，这样的数被称作 Carmicheal 数，但是这种数十分稀少，前 $10000$ 个 $n$ 中只有 $22​$ 个数为 Carmicheal 数，所以这种方法还是比较可靠的。附上算法导论中的伪代码：\n\n<div style=\"align: center\"> <img src=\"pic1.png\"/> </div>\n\n因为 Carmicheal 数的存在，人们寻求更好的，更准确的素数判定方法，于是就有了 Miller-Rabin 算法\n\n#### Miller-Rabin 算法\n\n通过费马小定理我们可以得出一个推论，若 $p$ 为一个奇素数，那么有：\n$$\na^p\\equiv a\\pmod p,1\\leqslant a\\leqslant p\n$$\n\n我们记\n$$\np-1=2^kq,2\\nmid q\n$$\n设 $a$ 是不被 $p$ 整除的数，那么下面两个条件之一必然成立：\n\n-   $a^q \\equiv 1 \\pmod p$\n-   $a^q, a^{2q}, a^{2^2q}, \\dots, a^{2^{k-1}q} \\equiv -1 \\pmod p$ 之中有一个等式成立\n\n根据如下命题：\n$$\na^2 \\equiv 1 \\pmod p \\Rightarrow a \\equiv \\pm 1 \\pmod p\n$$\n又因为上面第二个条件中的数，每一个都是前一个的平方，且最后一个数的平方是 $1$，所以如果表中一个数它模 $p$ 不余 $1$，但是它的平方模 $p$ 余 $1$，那么那个数一定是 $-1$，所以在这种情况下表中包含 $ -1$，又或者表中全是 $1$，那么第一个条件就会成立。\n\n所以我们得到了 Miller-Rabin 素性测试的方法，也就是说，如果一个数不满足上面的性质，那么它就是和数，这个 $a$ 就成为证据。而 Miller-Rabin 的证据和上面提到的方法的证据不同，它能够保证每一个奇合数 $p$ 都会有不少于 $\\frac{(p−1)}{2}$个证据（具体证明详见算法导论）。\n\n我们只要随机 $50$ 个数来测试，那么测试失败的概率一定小于 $2^{−50}$，大约是 $8.9⋅10^{−16}$，如果你觉得不够，还可以找更多的数来测试。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long  int64;\n\ninline int64 rand64() { return abs((int64)rand() << 32 | rand()); }\ninline int64 random(int64 x, int64 y) { return x + rand64() % (y - x + 1); }\n// 随机数生成函数\nint64 montgomery(int64 a, int64 b, int64 c) {\n\tint64 result = 1;\n\tint64 temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n\nbool witness(int64 a, int64 p) {\n\tint k = 0;\n\tint64 q = p - 1;\n\twhile ((q & 1) == 0) { k++; q >>=1; }\n\tint64 v = montgomery(a, q, p); // 判断一\n\tif (v == 1 || v == p - 1) return false;\n\twhile (k--) {\n\t\tv = v * v % p;\n\t\tif (v == p - 1) return false; // 判断二\n\t}\n\treturn true;\n}\n\nbool MillerRabin(int64 p) {\n\tif (p == 1) return false;\n\tif (p == 2) return true;\n\tif (p % 2 == 0) return false;\n\t// 这里其实可以加更多的特判来节约时间\n\tfor (int i = 1; i <= 50; ++i)\n\t\tif (witness(random(1, p - 1), p)) return false;\n\treturn true;\n}\nint main() {\n\tint n;\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (MillerRabin(i)) cout << i << \" \";\n\t// 输出 1 ~ n 之间的所有素数\n\treturn 0;\n}\n```\n\n对于大的素数，为了节约判定的时间，我们只能退而求其次选择非完美算法来进行验证，不过不得不说，Miller-Rabin 其实已经很完备了。\n\n#### 总结\n\n事实上，对于素数的判定还有很多算法，例如 [Solovay-Strassen 算法](https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test)和 [AKS 算法](https://en.wikipedia.org/wiki/AKS_primality_test)，然而这两个似乎都超出了 OI 的范围，一般不会用得到，这里也就不再赘述。\n\n### 质因数分解\n\n#### 试除法\n\n结合素数判定的“试除法”和“Eratosthenes 筛法”，我们可以扫描 $2\\thicksim\\lfloor\\sqrt{n}\\rfloor$ 中的每个数 $d$，若 $d$ 能整除 $n$，则从 $n$ 中除掉所有的因子 $d$，同时累计个数。\n\n```cpp\nint p[maxn], c[maxn];\nvoid divide(int n) {\n\tint m = 0;\n\tfor (int i = 2; i * i <= n; ++i) {\n\t\tif (n % i == 0) {\n\t\t\tp[++m] = i;\n\t\t\tc[m] = 0;\n\t\t\twhile (n % i == 0) { n /= i; c[m]++; }\n\t\t}\n\t}\n\tif (n > 1) { p[++m] = n; c[m] = 1 }\n\tfor (int i = 1; i <= m; ++i) cout << p[i] << '^' << c[i] << endl;\n}\n```\n#### Pollard-Rho 算法\n\nPollard-Rho 也是一个不完美算法，不完美之处在时间复杂度上体现。Pollard-Rho算法分解一个数 $n$ 的过程大体上是这样子的：\n\n1. 找到一个数 $p$，使得 $p|n$，将 $n$ 分解为 $p$ 与 $\\frac{n}{p}$\n2. 如果 $p$ 或 $\\frac{n}{p}$ 不为质数，将其带入递归上述过程\n3. 如果其是质数，将其记录并退出\n\n那有人就会问了：这跟暴力分解有什么区别？好像时间复杂度比暴力还高啊！！？？所以，下面的优化才是关键。第一个优化，使用 Miller-Rabin 判定其是否为质数。第二个优化才是最关键的：对于一个大整数n，我们要找到一个 $p$ 满足 $p|n$，这如同大海捞针。但是如果我们要找出 $p_1$、$p_2$，使得 $(|p_1−p_2|)|n$，这看起来似乎要容易一些。实际上我们只需要找出 $\\gcd((|p1−p2|),n)>1$的 $p_1$、$p_2$，则其 $\\gcd$ 值肯定为n的约数。这看起来又容易了一些。实际上，这让整个算法容易许多。根据[生日悖论](https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C)，这种两两比较的方式，在加入比较的数越来越多的时候，其效率会大大提升，比找一个数的效率快很多。于是，找 $p$ 的过程变成了这个样子：\n\n1. 找到一个数 $p_1$\n2. 通过某种玄学推导手段找出一个与 $p_1$ 对应的 $p_2$\n3. 判断 $\\gcd((|p1−p2|),n)$ 是否大于 $1$，不大于则将 $p_2$作为新的 $p_1$，重复过程，否则就找到了\n\n为什么要用玄学手段？因为只有通过推导手段，才能保证不做重复判断。理论上的推导手段可以有很多，但实际使用中一般使用如下公式推导：\n$$\np_2=(p_1^2+c)\\bmod n\n$$\n其中 $c$ 为随机常数。\n这个公式的好处:\n\n  1. 推导出来的 $p_2-p_1$ 差值基本不会相等。\n  2. 可以证明，该推导结果会出现循环。也就是说，在出现循环之前，结果不会重复，少做了许多无用的判断。\n\n出现循环了怎么办？换一个随机常数再搞。这就是该算法“非完美”的地方，~~时间复杂度要看脸的~~。那么如何判环呢？这里介绍一个算法：[Floyd 判圈](https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95)。 需要注意的是，之所以不能一个标记定在原地，是因为循环节不一定在开头就产生，可能走着走着才遇到循环。这条路径就类似于 $\\rho$，Pollard-Rho 算法也是因此得名的。顺便附上算法导论中的一张玄学图：\n\n<div style=\"align: center\"> <img src=\"pic2.png\"/> </div>\n\n注意，在小数分解的时候就别用这个了，老老实实用试除法吧。\n\n### 未完待续......\n\n---\n\n\n\n","slug":"数论-OI-中素数有关的算法整理","published":1,"updated":"2018-09-16T04:14:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbsx003brgc8pbuhcrmx","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。</p>\n<a id=\"more\"></a>\n<h3 id=\"素数的判定\"><a href=\"#素数的判定\" class=\"headerlink\" title=\"素数的判定\"></a>素数的判定</h3><h4 id=\"Brute-Force-朴素算法\"><a href=\"#Brute-Force-朴素算法\" class=\"headerlink\" title=\"Brute-Force 朴素算法\"></a>Brute-Force 朴素算法</h4><p>额，这个就不多说了吧，最无脑的，$2\\thicksim n$ 枚举所有小于 $n$ 的数来进行判定。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (isPrime(n) ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Optimized-Brute-Force-优化过的朴素算法\"><a href=\"#Optimized-Brute-Force-优化过的朴素算法\" class=\"headerlink\" title=\"Optimized-Brute-Force 优化过的朴素算法\"></a>Optimized-Brute-Force 优化过的朴素算法</h4><p>如果一个数不是素数是合数， 那么一定可以由两个大于 $1$ 自然数相乘得到， 其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现。所以可以优化朴素算法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i * i &lt; n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (isPrime(n) ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"筛法求素数\"><a href=\"#筛法求素数\" class=\"headerlink\" title=\"筛法求素数\"></a>筛法求素数</h4><p>上面两个菜鸡方法只能针对数很小的情况，这些情况在 OI 中出现的话出卷老师会<del>死得很惨</del>变成广大 OIer 的恩人，然而这种情况是不可能的。于是又有了更高效的方法——筛法。它的思想就是将一个范围内的素数全部筛出来，预处理之后方便查找和判定。最朴素的筛法莫过于 Eratosthenes 筛法了<del>（不要纠结这个名字怎么读，因为我也不会）</del>，它是将所有素数的倍数都给筛掉，剩下的就是素数了。时间复杂度为 $O(N\\log\\log N)$ 接近线性</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> prime[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Eratosthenes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(prime, <span class=\"literal\">true</span>, <span class=\"keyword\">sizeof</span>(prime));</span><br><span class=\"line\">\tprime[<span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!prime[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= maxn / i; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里是一个小优化，因为小于 i^2 的数在前面肯定已经筛过了</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 所以 j 从 i 开始取</span></span><br><span class=\"line\">\t\t\tprime[j * i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tEratosthenes();</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (prime[n] ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，Eratosthenes 筛会重复标记素数，造成时间复杂度冗余，如果对于每个数有唯一的方法确定它，那么就可以解决这个问题。由此引出了线性筛这个方法，它通过从大到小累计质因子的方法标记每一个合数，即让 $12$ 只有 $2\\times 2\\times 3$ 这种产生方式。设数组 $fac$ 记录每个数的最小质因子，我们按照下面的步骤来维护 $fac$：</p>\n<ol>\n<li>依次考虑 $1\\thicksim n$ 之见的每一个数 $i$</li>\n<li>若 $fac[i]=i$ 说明 $i$ 是质数，将它保存下来</li>\n<li>扫描不大于 $fac[i]$ 的每个质数 $p$，令 $fac[i\\times p]=p$，即在 $i$ 的基础上累积一个质因子 $p$，因为 $p\\leqslant fac[i]$，所以 $p$ 为合数 $i\\times p$ 的最小质因子。</li>\n</ol>\n<p>这样子，每个合数只会被它的最小质因子 $p$ 筛一次，时间复杂度为线性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> fac[maxn], prime[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LinearSieve</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(fac, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(fac));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fac[i] == <span class=\"number\">0</span>) &#123; fac[i] = i; prime[++m] = i; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳出循环的条件</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (prime[j] &gt; fac[i] || prime[j] &gt; n / i) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\tfac[i * prime[j]] = prime[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) <span class=\"built_in\">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tLinearSieve(<span class=\"number\">100000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线性筛又名<strong>欧拉筛</strong>。</p>\n<h4 id=\"伪素数测试\"><a href=\"#伪素数测试\" class=\"headerlink\" title=\"伪素数测试\"></a>伪素数测试</h4><p>在开始 Miller-Rabin 算法之前我们先来看一下伪素数测试，首先要了解费马小定理： $a^{p-1}\\equiv1(\\bmod p)$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。费马小定理的逆命题虽然不是真命题，但是几乎成立，而不成立的时候，即如果 $n$ 是一个合数且 $a^{n-1}\\equiv 1(\\bmod n)$，那么称 $n$ 为基为 $a$ 的<strong>伪素数</strong>。<br>如果我们找到一个 $a$ 使得 $n$ 不满足上述等式，那么 $n$ 必定为合数，那如果满足呢？$n$ 不一定是素数，这样的数被称作 Carmicheal 数，但是这种数十分稀少，前 $10000$ 个 $n$ 中只有 $22​$ 个数为 Carmicheal 数，所以这种方法还是比较可靠的。附上算法导论中的伪代码：</p>\n<div style=\"align: center\"> <img src=\"pic1.png\"> </div>\n\n<p>因为 Carmicheal 数的存在，人们寻求更好的，更准确的素数判定方法，于是就有了 Miller-Rabin 算法</p>\n<h4 id=\"Miller-Rabin-算法\"><a href=\"#Miller-Rabin-算法\" class=\"headerlink\" title=\"Miller-Rabin 算法\"></a>Miller-Rabin 算法</h4><p>通过费马小定理我们可以得出一个推论，若 $p$ 为一个奇素数，那么有：<br>$$<br>a^p\\equiv a\\pmod p,1\\leqslant a\\leqslant p<br>$$</p>\n<p>我们记<br>$$<br>p-1=2^kq,2\\nmid q<br>$$<br>设 $a$ 是不被 $p$ 整除的数，那么下面两个条件之一必然成立：</p>\n<ul>\n<li>$a^q \\equiv 1 \\pmod p$</li>\n<li>$a^q, a^{2q}, a^{2^2q}, \\dots, a^{2^{k-1}q} \\equiv -1 \\pmod p$ 之中有一个等式成立</li>\n</ul>\n<p>根据如下命题：<br>$$<br>a^2 \\equiv 1 \\pmod p \\Rightarrow a \\equiv \\pm 1 \\pmod p<br>$$<br>又因为上面第二个条件中的数，每一个都是前一个的平方，且最后一个数的平方是 $1$，所以如果表中一个数它模 $p$ 不余 $1$，但是它的平方模 $p$ 余 $1$，那么那个数一定是 $-1$，所以在这种情况下表中包含 $ -1$，又或者表中全是 $1$，那么第一个条件就会成立。</p>\n<p>所以我们得到了 Miller-Rabin 素性测试的方法，也就是说，如果一个数不满足上面的性质，那么它就是和数，这个 $a$ 就成为证据。而 Miller-Rabin 的证据和上面提到的方法的证据不同，它能够保证每一个奇合数 $p$ 都会有不少于 $\\frac{(p−1)}{2}$个证据（具体证明详见算法导论）。</p>\n<p>我们只要随机 $50$ 个数来测试，那么测试失败的概率一定小于 $2^{−50}$，大约是 $8.9⋅10^{−16}$，如果你觉得不够，还可以找更多的数来测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  int64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">rand64</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>((int64)rand() &lt;&lt; <span class=\"number\">32</span> | rand()); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">random</span><span class=\"params\">(int64 x, int64 y)</span> </span>&#123; <span class=\"keyword\">return</span> x + rand64() % (y - x + <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"><span class=\"comment\">// 随机数生成函数</span></span><br><span class=\"line\"><span class=\"function\">int64 <span class=\"title\">montgomery</span><span class=\"params\">(int64 a, int64 b, int64 c)</span> </span>&#123;</span><br><span class=\"line\">\tint64 result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tint64 temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">witness</span><span class=\"params\">(int64 a, int64 p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tint64 q = p - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((q &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123; k++; q &gt;&gt;=<span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">\tint64 v = montgomery(a, q, p); <span class=\"comment\">// 判断一</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (v == <span class=\"number\">1</span> || v == p - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\tv = v * v % p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (v == p - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 判断二</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">MillerRabin</span><span class=\"params\">(int64 p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里其实可以加更多的特判来节约时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">50</span>; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (witness(random(<span class=\"number\">1</span>, p - <span class=\"number\">1</span>), p)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (MillerRabin(i)) <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 输出 1 ~ n 之间的所有素数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于大的素数，为了节约判定的时间，我们只能退而求其次选择非完美算法来进行验证，不过不得不说，Miller-Rabin 其实已经很完备了。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>事实上，对于素数的判定还有很多算法，例如 <a href=\"https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test\" target=\"_blank\" rel=\"noopener\">Solovay-Strassen 算法</a>和 <a href=\"https://en.wikipedia.org/wiki/AKS_primality_test\" target=\"_blank\" rel=\"noopener\">AKS 算法</a>，然而这两个似乎都超出了 OI 的范围，一般不会用得到，这里也就不再赘述。</p>\n<h3 id=\"质因数分解\"><a href=\"#质因数分解\" class=\"headerlink\" title=\"质因数分解\"></a>质因数分解</h3><h4 id=\"试除法\"><a href=\"#试除法\" class=\"headerlink\" title=\"试除法\"></a>试除法</h4><p>结合素数判定的“试除法”和“Eratosthenes 筛法”，我们可以扫描 $2\\thicksim\\lfloor\\sqrt{n}\\rfloor$ 中的每个数 $d$，若 $d$ 能整除 $n$，则从 $n$ 中除掉所有的因子 $d$，同时累计个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> p[maxn], c[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tp[++m] = i;</span><br><span class=\"line\">\t\t\tc[m] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (n % i == <span class=\"number\">0</span>) &#123; n /= i; c[m]++; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>) &#123; p[++m] = n; c[m] = <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) <span class=\"built_in\">cout</span> &lt;&lt; p[i] &lt;&lt; <span class=\"string\">'^'</span> &lt;&lt; c[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pollard-Rho-算法\"><a href=\"#Pollard-Rho-算法\" class=\"headerlink\" title=\"Pollard-Rho 算法\"></a>Pollard-Rho 算法</h4><p>Pollard-Rho 也是一个不完美算法，不完美之处在时间复杂度上体现。Pollard-Rho算法分解一个数 $n$ 的过程大体上是这样子的：</p>\n<ol>\n<li>找到一个数 $p$，使得 $p|n$，将 $n$ 分解为 $p$ 与 $\\frac{n}{p}$</li>\n<li>如果 $p$ 或 $\\frac{n}{p}$ 不为质数，将其带入递归上述过程</li>\n<li>如果其是质数，将其记录并退出</li>\n</ol>\n<p>那有人就会问了：这跟暴力分解有什么区别？好像时间复杂度比暴力还高啊！！？？所以，下面的优化才是关键。第一个优化，使用 Miller-Rabin 判定其是否为质数。第二个优化才是最关键的：对于一个大整数n，我们要找到一个 $p$ 满足 $p|n$，这如同大海捞针。但是如果我们要找出 $p_1$、$p_2$，使得 $(|p_1−p_2|)|n$，这看起来似乎要容易一些。实际上我们只需要找出 $\\gcd((|p1−p2|),n)&gt;1$的 $p_1$、$p_2$，则其 $\\gcd$ 值肯定为n的约数。这看起来又容易了一些。实际上，这让整个算法容易许多。根据<a href=\"https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C\" target=\"_blank\" rel=\"noopener\">生日悖论</a>，这种两两比较的方式，在加入比较的数越来越多的时候，其效率会大大提升，比找一个数的效率快很多。于是，找 $p$ 的过程变成了这个样子：</p>\n<ol>\n<li>找到一个数 $p_1$</li>\n<li>通过某种玄学推导手段找出一个与 $p_1$ 对应的 $p_2$</li>\n<li>判断 $\\gcd((|p1−p2|),n)$ 是否大于 $1$，不大于则将 $p_2$作为新的 $p_1$，重复过程，否则就找到了</li>\n</ol>\n<p>为什么要用玄学手段？因为只有通过推导手段，才能保证不做重复判断。理论上的推导手段可以有很多，但实际使用中一般使用如下公式推导：<br>$$<br>p_2=(p_1^2+c)\\bmod n<br>$$<br>其中 $c$ 为随机常数。<br>这个公式的好处:</p>\n<ol>\n<li>推导出来的 $p_2-p_1$ 差值基本不会相等。</li>\n<li>可以证明，该推导结果会出现循环。也就是说，在出现循环之前，结果不会重复，少做了许多无用的判断。</li>\n</ol>\n<p>出现循环了怎么办？换一个随机常数再搞。这就是该算法“非完美”的地方，<del>时间复杂度要看脸的</del>。那么如何判环呢？这里介绍一个算法：<a href=\"https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">Floyd 判圈</a>。 需要注意的是，之所以不能一个标记定在原地，是因为循环节不一定在开头就产生，可能走着走着才遇到循环。这条路径就类似于 $\\rho$，Pollard-Rho 算法也是因此得名的。顺便附上算法导论中的一张玄学图：</p>\n<div style=\"align: center\"> <img src=\"pic2.png\"> </div>\n\n<p>注意，在小数分解的时候就别用这个了，老老实实用试除法吧。</p>\n<h3 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h3><hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。</p>","more":"<h3 id=\"素数的判定\"><a href=\"#素数的判定\" class=\"headerlink\" title=\"素数的判定\"></a>素数的判定</h3><h4 id=\"Brute-Force-朴素算法\"><a href=\"#Brute-Force-朴素算法\" class=\"headerlink\" title=\"Brute-Force 朴素算法\"></a>Brute-Force 朴素算法</h4><p>额，这个就不多说了吧，最无脑的，$2\\thicksim n$ 枚举所有小于 $n$ 的数来进行判定。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (isPrime(n) ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Optimized-Brute-Force-优化过的朴素算法\"><a href=\"#Optimized-Brute-Force-优化过的朴素算法\" class=\"headerlink\" title=\"Optimized-Brute-Force 优化过的朴素算法\"></a>Optimized-Brute-Force 优化过的朴素算法</h4><p>如果一个数不是素数是合数， 那么一定可以由两个大于 $1$ 自然数相乘得到， 其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现。所以可以优化朴素算法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPrime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i * i &lt; n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (isPrime(n) ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"筛法求素数\"><a href=\"#筛法求素数\" class=\"headerlink\" title=\"筛法求素数\"></a>筛法求素数</h4><p>上面两个菜鸡方法只能针对数很小的情况，这些情况在 OI 中出现的话出卷老师会<del>死得很惨</del>变成广大 OIer 的恩人，然而这种情况是不可能的。于是又有了更高效的方法——筛法。它的思想就是将一个范围内的素数全部筛出来，预处理之后方便查找和判定。最朴素的筛法莫过于 Eratosthenes 筛法了<del>（不要纠结这个名字怎么读，因为我也不会）</del>，它是将所有素数的倍数都给筛掉，剩下的就是素数了。时间复杂度为 $O(N\\log\\log N)$ 接近线性</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> prime[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Eratosthenes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(prime, <span class=\"literal\">true</span>, <span class=\"keyword\">sizeof</span>(prime));</span><br><span class=\"line\">\tprime[<span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!prime[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;= maxn / i; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这里是一个小优化，因为小于 i^2 的数在前面肯定已经筛过了</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 所以 j 从 i 开始取</span></span><br><span class=\"line\">\t\t\tprime[j * i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tEratosthenes();</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (prime[n] ? <span class=\"string\">\"Yes\"</span> : <span class=\"string\">\"No\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然而，Eratosthenes 筛会重复标记素数，造成时间复杂度冗余，如果对于每个数有唯一的方法确定它，那么就可以解决这个问题。由此引出了线性筛这个方法，它通过从大到小累计质因子的方法标记每一个合数，即让 $12$ 只有 $2\\times 2\\times 3$ 这种产生方式。设数组 $fac$ 记录每个数的最小质因子，我们按照下面的步骤来维护 $fac$：</p>\n<ol>\n<li>依次考虑 $1\\thicksim n$ 之见的每一个数 $i$</li>\n<li>若 $fac[i]=i$ 说明 $i$ 是质数，将它保存下来</li>\n<li>扫描不大于 $fac[i]$ 的每个质数 $p$，令 $fac[i\\times p]=p$，即在 $i$ 的基础上累积一个质因子 $p$，因为 $p\\leqslant fac[i]$，所以 $p$ 为合数 $i\\times p$ 的最小质因子。</li>\n</ol>\n<p>这样子，每个合数只会被它的最小质因子 $p$ 筛一次，时间复杂度为线性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 1000010</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> fac[maxn], prime[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LinearSieve</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(fac, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(fac));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fac[i] == <span class=\"number\">0</span>) &#123; fac[i] = i; prime[++m] = i; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳出循环的条件</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (prime[j] &gt; fac[i] || prime[j] &gt; n / i) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\tfac[i * prime[j]] = prime[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) <span class=\"built_in\">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tLinearSieve(<span class=\"number\">100000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线性筛又名<strong>欧拉筛</strong>。</p>\n<h4 id=\"伪素数测试\"><a href=\"#伪素数测试\" class=\"headerlink\" title=\"伪素数测试\"></a>伪素数测试</h4><p>在开始 Miller-Rabin 算法之前我们先来看一下伪素数测试，首先要了解费马小定理： $a^{p-1}\\equiv1(\\bmod p)$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。费马小定理的逆命题虽然不是真命题，但是几乎成立，而不成立的时候，即如果 $n$ 是一个合数且 $a^{n-1}\\equiv 1(\\bmod n)$，那么称 $n$ 为基为 $a$ 的<strong>伪素数</strong>。<br>如果我们找到一个 $a$ 使得 $n$ 不满足上述等式，那么 $n$ 必定为合数，那如果满足呢？$n$ 不一定是素数，这样的数被称作 Carmicheal 数，但是这种数十分稀少，前 $10000$ 个 $n$ 中只有 $22​$ 个数为 Carmicheal 数，所以这种方法还是比较可靠的。附上算法导论中的伪代码：</p>\n<div style=\"align: center\"> <img src=\"pic1.png\"> </div>\n\n<p>因为 Carmicheal 数的存在，人们寻求更好的，更准确的素数判定方法，于是就有了 Miller-Rabin 算法</p>\n<h4 id=\"Miller-Rabin-算法\"><a href=\"#Miller-Rabin-算法\" class=\"headerlink\" title=\"Miller-Rabin 算法\"></a>Miller-Rabin 算法</h4><p>通过费马小定理我们可以得出一个推论，若 $p$ 为一个奇素数，那么有：<br>$$<br>a^p\\equiv a\\pmod p,1\\leqslant a\\leqslant p<br>$$</p>\n<p>我们记<br>$$<br>p-1=2^kq,2\\nmid q<br>$$<br>设 $a$ 是不被 $p$ 整除的数，那么下面两个条件之一必然成立：</p>\n<ul>\n<li>$a^q \\equiv 1 \\pmod p$</li>\n<li>$a^q, a^{2q}, a^{2^2q}, \\dots, a^{2^{k-1}q} \\equiv -1 \\pmod p$ 之中有一个等式成立</li>\n</ul>\n<p>根据如下命题：<br>$$<br>a^2 \\equiv 1 \\pmod p \\Rightarrow a \\equiv \\pm 1 \\pmod p<br>$$<br>又因为上面第二个条件中的数，每一个都是前一个的平方，且最后一个数的平方是 $1$，所以如果表中一个数它模 $p$ 不余 $1$，但是它的平方模 $p$ 余 $1$，那么那个数一定是 $-1$，所以在这种情况下表中包含 $ -1$，又或者表中全是 $1$，那么第一个条件就会成立。</p>\n<p>所以我们得到了 Miller-Rabin 素性测试的方法，也就是说，如果一个数不满足上面的性质，那么它就是和数，这个 $a$ 就成为证据。而 Miller-Rabin 的证据和上面提到的方法的证据不同，它能够保证每一个奇合数 $p$ 都会有不少于 $\\frac{(p−1)}{2}$个证据（具体证明详见算法导论）。</p>\n<p>我们只要随机 $50$ 个数来测试，那么测试失败的概率一定小于 $2^{−50}$，大约是 $8.9⋅10^{−16}$，如果你觉得不够，还可以找更多的数来测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  int64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">rand64</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>((int64)rand() &lt;&lt; <span class=\"number\">32</span> | rand()); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">random</span><span class=\"params\">(int64 x, int64 y)</span> </span>&#123; <span class=\"keyword\">return</span> x + rand64() % (y - x + <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"><span class=\"comment\">// 随机数生成函数</span></span><br><span class=\"line\"><span class=\"function\">int64 <span class=\"title\">montgomery</span><span class=\"params\">(int64 a, int64 b, int64 c)</span> </span>&#123;</span><br><span class=\"line\">\tint64 result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tint64 temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">witness</span><span class=\"params\">(int64 a, int64 p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tint64 q = p - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((q &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123; k++; q &gt;&gt;=<span class=\"number\">1</span>; &#125;</span><br><span class=\"line\">\tint64 v = montgomery(a, q, p); <span class=\"comment\">// 判断一</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (v == <span class=\"number\">1</span> || v == p - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\tv = v * v % p;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (v == p - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 判断二</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">MillerRabin</span><span class=\"params\">(int64 p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里其实可以加更多的特判来节约时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">50</span>; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (witness(random(<span class=\"number\">1</span>, p - <span class=\"number\">1</span>), p)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (MillerRabin(i)) <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 输出 1 ~ n 之间的所有素数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于大的素数，为了节约判定的时间，我们只能退而求其次选择非完美算法来进行验证，不过不得不说，Miller-Rabin 其实已经很完备了。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>事实上，对于素数的判定还有很多算法，例如 <a href=\"https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test\" target=\"_blank\" rel=\"noopener\">Solovay-Strassen 算法</a>和 <a href=\"https://en.wikipedia.org/wiki/AKS_primality_test\" target=\"_blank\" rel=\"noopener\">AKS 算法</a>，然而这两个似乎都超出了 OI 的范围，一般不会用得到，这里也就不再赘述。</p>\n<h3 id=\"质因数分解\"><a href=\"#质因数分解\" class=\"headerlink\" title=\"质因数分解\"></a>质因数分解</h3><h4 id=\"试除法\"><a href=\"#试除法\" class=\"headerlink\" title=\"试除法\"></a>试除法</h4><p>结合素数判定的“试除法”和“Eratosthenes 筛法”，我们可以扫描 $2\\thicksim\\lfloor\\sqrt{n}\\rfloor$ 中的每个数 $d$，若 $d$ 能整除 $n$，则从 $n$ 中除掉所有的因子 $d$，同时累计个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> p[maxn], c[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tp[++m] = i;</span><br><span class=\"line\">\t\t\tc[m] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (n % i == <span class=\"number\">0</span>) &#123; n /= i; c[m]++; &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>) &#123; p[++m] = n; c[m] = <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) <span class=\"built_in\">cout</span> &lt;&lt; p[i] &lt;&lt; <span class=\"string\">'^'</span> &lt;&lt; c[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pollard-Rho-算法\"><a href=\"#Pollard-Rho-算法\" class=\"headerlink\" title=\"Pollard-Rho 算法\"></a>Pollard-Rho 算法</h4><p>Pollard-Rho 也是一个不完美算法，不完美之处在时间复杂度上体现。Pollard-Rho算法分解一个数 $n$ 的过程大体上是这样子的：</p>\n<ol>\n<li>找到一个数 $p$，使得 $p|n$，将 $n$ 分解为 $p$ 与 $\\frac{n}{p}$</li>\n<li>如果 $p$ 或 $\\frac{n}{p}$ 不为质数，将其带入递归上述过程</li>\n<li>如果其是质数，将其记录并退出</li>\n</ol>\n<p>那有人就会问了：这跟暴力分解有什么区别？好像时间复杂度比暴力还高啊！！？？所以，下面的优化才是关键。第一个优化，使用 Miller-Rabin 判定其是否为质数。第二个优化才是最关键的：对于一个大整数n，我们要找到一个 $p$ 满足 $p|n$，这如同大海捞针。但是如果我们要找出 $p_1$、$p_2$，使得 $(|p_1−p_2|)|n$，这看起来似乎要容易一些。实际上我们只需要找出 $\\gcd((|p1−p2|),n)&gt;1$的 $p_1$、$p_2$，则其 $\\gcd$ 值肯定为n的约数。这看起来又容易了一些。实际上，这让整个算法容易许多。根据<a href=\"https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C\" target=\"_blank\" rel=\"noopener\">生日悖论</a>，这种两两比较的方式，在加入比较的数越来越多的时候，其效率会大大提升，比找一个数的效率快很多。于是，找 $p$ 的过程变成了这个样子：</p>\n<ol>\n<li>找到一个数 $p_1$</li>\n<li>通过某种玄学推导手段找出一个与 $p_1$ 对应的 $p_2$</li>\n<li>判断 $\\gcd((|p1−p2|),n)$ 是否大于 $1$，不大于则将 $p_2$作为新的 $p_1$，重复过程，否则就找到了</li>\n</ol>\n<p>为什么要用玄学手段？因为只有通过推导手段，才能保证不做重复判断。理论上的推导手段可以有很多，但实际使用中一般使用如下公式推导：<br>$$<br>p_2=(p_1^2+c)\\bmod n<br>$$<br>其中 $c$ 为随机常数。<br>这个公式的好处:</p>\n<ol>\n<li>推导出来的 $p_2-p_1$ 差值基本不会相等。</li>\n<li>可以证明，该推导结果会出现循环。也就是说，在出现循环之前，结果不会重复，少做了许多无用的判断。</li>\n</ol>\n<p>出现循环了怎么办？换一个随机常数再搞。这就是该算法“非完美”的地方，<del>时间复杂度要看脸的</del>。那么如何判环呢？这里介绍一个算法：<a href=\"https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">Floyd 判圈</a>。 需要注意的是，之所以不能一个标记定在原地，是因为循环节不一定在开头就产生，可能走着走着才遇到循环。这条路径就类似于 $\\rho$，Pollard-Rho 算法也是因此得名的。顺便附上算法导论中的一张玄学图：</p>\n<div style=\"align: center\"> <img src=\"pic2.png\"> </div>\n\n<p>注意，在小数分解的时候就别用这个了，老老实实用试除法吧。</p>\n<h3 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h3><hr>"},{"title":"[数论] OI 中的模运算计算方法","date":"2018-08-19T03:01:03.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。\n\n<!-- more -->\n\n### 预备知识\n\n- 恒等式：\n\t- $(a\\bmod n)\\bmod n=a\\bmod n$\n\t- 对于所有的正数 $x$ 有：$n^x\\bmod n = 0$\n\t- 如果 p 是一个质数，且不为 b 的因数，此时由费马小定理有：$ab^{p−1}\\bmod p=a\\bmod p$\n- 分配律\n\t- $(a-b)\\bmod n=(a\\bmod n-b\\bmod n)\\bmod n$\n\t- $(a+b)\\bmod n=(a\\bmod n+b\\bmod n)\\bmod n$\n\t- $ab\\bmod n=(a\\bmod n)(b\\bmod n)\\bmod n$\n\n### 高次幂函数的取模\n\n#### 暴力取模法\n由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有`int`、`float`、`double`、`long long`这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。\n所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：\n```cpp\nlong long pow(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\twhile (b--) result = result * a % c;\n\treturn result;\n}\n// 计算 a^b % c\n```\n这种算法的正确性毋庸置疑，但是如果幂指数太大的话，需要耗费的时间就更非常多，直接导致运算效率低下，所以只适用于指数不大的情况下使用。\n\n#### 二分幂\n\n要求 $a^n$，如果知道了 $a^{\\frac{n}{2}}$ 那么再平方就行了。\n令 $A=a^{\\lfloor\\frac{n}{2}\\rfloor}$\n若 $n$ 为偶数，那么 $Result=A^2$\n若 $n$ 为奇数，那么 $Result=a\\times A^2$\n这样子复杂度从 $O(n)$ 降到了 $O(\\log n)$\n\n```cpp\nlong long pow(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tif (b == 0) return 1;\n\tlong long x = pow(a, b / 2, c);\n\tlong long ans = (long long)x * x % m;\n\tif (b % 2 == 1) ans = ans * a % m;\n\treturn (long long)ans;\n}\n```\n\n#### 蒙哥马利算法\n\n具体详细介绍见[维基百科](https://en.wikipedia.org/wiki/Montgomery_modular_multiplication)，这里直接上代码：\n\n```cpp\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n```\n### 组合数取模\n\n#### 方法一：杨辉三角递推\n\n使用递推公式：$C_n^m=C_{n-1}^m+C_{n-1}^{m-1}$\n写成数组：$C[n][m]=C[n-1][m]+C[n-1][m-1]$\n这也是杨辉三角的递推公式，所以边界为 $C[0][0]=1$。下面给出求一个组合数的方法：\n```cpp\n#include <iostream>\nusing namespace std;\nint n, m;\nlong long c[10010];\n\nint main() {\n\tcin >> n >> m;\n\tm = min(m, n - m);\n\t// 因为 c[n][m] == c[n][n - m]\n\t// 所以取最小值减少运算。\n\tc[0] = 1;\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = m; j >= 1; --j)\n\t\t\tc[j] = c[j] + c[j - 1];\n\tcout << c[m];\n\treturn 0;\n}\n// 因为只求一个组合数，所以使用了滚动数组的方式\n```\n由于递推时间复杂度为 $O(n^2)$，所以只适用于小数据的情况。\n\n#### 方法二：乘法逆元\n\n在数据很大的时候，我们对组合数取模就会比较麻烦，因为数据不一定能存下，而且通过观察组合数的公式：\n$$\nC_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times...\\times(n-m+1)}{m!}\n$$\n我们发现组合数是带有除法的，不能走一步取一次模，为了解决除法取模的问题，人们发明了逆元这个[东西](https://en.wikipedia.org/wiki/Inverse_element)。\n若 $a\\times b\\equiv1\\pmod p$ 则称 $b$ 为 $a$ 在模 $p$ 下的乘法逆元，一般认为，$b < p$，$b$ 记为 $a^{-1}$。**注意，此处 $a$ 与 $p$ 必须互质，否则乘法逆元不存在。**那么逆元该怎么用呢？当然是借助它将除法转为乘法，再用分配律来计算了。\n我们来看一个式子：\n$$\n\\frac{a}{b}\\equiv\\frac{a}{b}\\times b\\times b^{-1}\\equiv a\\times b^{-1}\\pmod p\n$$\n这样就可以把问题转化为求一个数的逆元，再转化为乘法运算。\n\n##### 递推求逆元\n\n求 $i​$ 在模 $p​$ 下的乘法逆元，满足 $gcd(i, p)=1, i< p​$\n使用欧几里得除法的形式，令 $p=k\\times i+r​$，则 $k=\\lfloor\\frac{p}{i}\\rfloor,r=p\\bmod i​$\n显然，$k\\times i+r\\equiv 0(\\bmod p)​$\n两边同乘 $i^{-1}\\times r^{-1}​$，得 $k\\times r^{-1}+i^{-1}\\equiv 0\\pmod p​$\n移项，整理：$i^{-1}\\equiv -k\\times r^{-1}\\equiv (p-k)\\times r^{-1}\\pmod p​$\n将 $k​$ 和 $r​$ 用 $p​$ 来替换：$i^{-1}\\equiv (p-\\lfloor\\frac{p}{i}\\rfloor)\\times (p\\bmod i)^{-1}\\pmod p​$\n使用 `inv[i]` 来表示 `i` 的逆元，有 `inv[i] = (p - p / i) * inv[p % i]`\n时间复杂的为线性，代码如下：\n\n```cpp\nlong long inv[10000010];\nlong long getInverse(long long x, long long p) {\n\tif (inv[x] != 0) return inv[x];\n\tinv[x] = (p - p / i) * getInverse(p % x, p) % p;\n\treturn inv[x];\n}\n```\n\n##### 费马小定理求逆元\n\n费马小定理：~~如此可爱的定理名称~~ $a^{p-1}\\equiv1\\pmod p$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。\n所以求 $a$ 的逆元时，只要求出 $a^{p-2}$ 的值就可以了。\n\n```cpp\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\nlong long getinverse(long long x, long long p) {\n\treturn Montgomery(x, p - 2, p);\n}\n```\n\n##### 逆元求组合数\n\n从组合数原公式出发\n$$\nC_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times...\\times(n-m+1)}{m!}\n$$\n\n对于分子，我们可以用传统方法，边乘边模，对于分母，我们可以求逆元再乘分子。\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n\nlong long getInverse(long long x, long long p) {\n\treturn Montgomery(x, p - 2, p);\n}\n\nlong long c(long long n, long long m, long long p) {\n\tlong long x = 1, y = 1;\n\tfor (long long i = n; i >= n - m + 1; --i) x = x * i % p;\n\tfor (long long i = 1; i <= m; ++i) y = y * i % p;\n\treturn x * getInverse(y, p) % p;\n}\n\nint main() {\n\tlong long n, m, p;\n\tcin >> n >> m >> p;\n\tcout << c(n, m, p);\n\treturn 0;\n}\n\n```\n\n**注：$p$ 一定要是大质数，起码得大于 $m$。若要求 $a$ 在模 $p$ 下的乘法逆元，必须要保证 $a$ 与 $p$ 互质。在此题中，要求 $m!$ 的乘法逆元，那么 $p$ 必须与 $m!$ 互质，所以 $p$ 要大于 $m$，且是个质数。~~我一开始忘记了这点，导致调了一年~~**\n\n#### 方法三：卢卡斯定理\n\n**适用于对答案模一个质数的情况。**\n与逆元不同的是，这个方法不要求 $p$ 是个很大的素数，因此，适用范围更广（也许吧）。\n**[卢卡斯定理](https://zh.wikipedia.org/wiki/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86)**：\n对于非负整数 $m$ 和 $n$ 及素数 $p$，有同余式：\n$$\n\\binom{n}{m}\\equiv\\prod_{i=0}^k\\binom{n_i}{m_i} \\pmod p\n$$\n成立。其中：\n$$\nn=n_kp^k+n_{k-1}p^{k-1}+...+n_1p+n_0\n$$\n并且\n$$\nm=m_kp^k+m_{k-1}p^{k-1}+...+m_1p+m_0\n$$\n以上两个式子是 $n$ 和 $m$ 的 $p$ 进制展开。当 $m < n$ 时，二项式系数 $\\binom{n}{m}=0$。\n可以通过[一系列的推导](https://www.luogu.org/blog/user28007/lucas)得出下面这个结论：\n$$\n\\binom{n}{m}\\equiv\\binom{\\lfloor\\frac{n}{p}\\rfloor}{\\lfloor\\frac{m}{p}\\rfloor}\\times \\binom{n\\bmod p}{m\\bmod p} \\pmod p\n$$\n由这个公式我们可以得出结论：**在 $n$ 和 $m$ 都小于 $p$ 时，公式一点用都没有。（啥？你问我为什么？$\\binom{0}{0}=1$ 啊！）**所以这个公式是在 $n\\geqslant p$ 或 $m\\geqslant p$ 的情况下使用的。这样可以减小 $n$ 和 $m$，使之小于 $p$，再用乘法逆元去求组合数。 \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n\nlong long getInverse(long long a, long long b) {\n\treturn Montgomery(a, b - 2, b);\n}\n\nlong long c(int n, int m, int p) {\n\tif (m == 0) return 1 % p;\n\tif (n == 0) return 0;\n\tif (n >= p || m >= p) return c(n / p, m / p, p) * c(n % p, m % p, p) % p;\n\t// 核心语句\n\tlong long x = 1, y = 1;\n\tfor (int i = n; i >= n - m + 1; --i) x = x * i % p;\n\tfor (int i = 1; i <= m; ++i) y = y * i % p;\n\treturn x * getInverse(y, p) % p;\n}\n\nint main() {\n\tlong long n, m, p;\n\tcin >> n >> m >> p;\n\tcout << c(n, m, p);\n\treturn 0;\n}\n\n```\n\n### 未完待续......\n\n---","source":"_posts/数论-OI-中的模运算计算方法.md","raw":"---\ntitle: '[数论] OI 中的模运算计算方法'\ndate: 2018-08-19 11:01:03\ntags:\n\t- 数论\n\t- 模运算\ncategories: 数论\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。\n\n<!-- more -->\n\n### 预备知识\n\n- 恒等式：\n\t- $(a\\bmod n)\\bmod n=a\\bmod n$\n\t- 对于所有的正数 $x$ 有：$n^x\\bmod n = 0$\n\t- 如果 p 是一个质数，且不为 b 的因数，此时由费马小定理有：$ab^{p−1}\\bmod p=a\\bmod p$\n- 分配律\n\t- $(a-b)\\bmod n=(a\\bmod n-b\\bmod n)\\bmod n$\n\t- $(a+b)\\bmod n=(a\\bmod n+b\\bmod n)\\bmod n$\n\t- $ab\\bmod n=(a\\bmod n)(b\\bmod n)\\bmod n$\n\n### 高次幂函数的取模\n\n#### 暴力取模法\n由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有`int`、`float`、`double`、`long long`这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。\n所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：\n```cpp\nlong long pow(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\twhile (b--) result = result * a % c;\n\treturn result;\n}\n// 计算 a^b % c\n```\n这种算法的正确性毋庸置疑，但是如果幂指数太大的话，需要耗费的时间就更非常多，直接导致运算效率低下，所以只适用于指数不大的情况下使用。\n\n#### 二分幂\n\n要求 $a^n$，如果知道了 $a^{\\frac{n}{2}}$ 那么再平方就行了。\n令 $A=a^{\\lfloor\\frac{n}{2}\\rfloor}$\n若 $n$ 为偶数，那么 $Result=A^2$\n若 $n$ 为奇数，那么 $Result=a\\times A^2$\n这样子复杂度从 $O(n)$ 降到了 $O(\\log n)$\n\n```cpp\nlong long pow(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tif (b == 0) return 1;\n\tlong long x = pow(a, b / 2, c);\n\tlong long ans = (long long)x * x % m;\n\tif (b % 2 == 1) ans = ans * a % m;\n\treturn (long long)ans;\n}\n```\n\n#### 蒙哥马利算法\n\n具体详细介绍见[维基百科](https://en.wikipedia.org/wiki/Montgomery_modular_multiplication)，这里直接上代码：\n\n```cpp\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n```\n### 组合数取模\n\n#### 方法一：杨辉三角递推\n\n使用递推公式：$C_n^m=C_{n-1}^m+C_{n-1}^{m-1}$\n写成数组：$C[n][m]=C[n-1][m]+C[n-1][m-1]$\n这也是杨辉三角的递推公式，所以边界为 $C[0][0]=1$。下面给出求一个组合数的方法：\n```cpp\n#include <iostream>\nusing namespace std;\nint n, m;\nlong long c[10010];\n\nint main() {\n\tcin >> n >> m;\n\tm = min(m, n - m);\n\t// 因为 c[n][m] == c[n][n - m]\n\t// 所以取最小值减少运算。\n\tc[0] = 1;\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = m; j >= 1; --j)\n\t\t\tc[j] = c[j] + c[j - 1];\n\tcout << c[m];\n\treturn 0;\n}\n// 因为只求一个组合数，所以使用了滚动数组的方式\n```\n由于递推时间复杂度为 $O(n^2)$，所以只适用于小数据的情况。\n\n#### 方法二：乘法逆元\n\n在数据很大的时候，我们对组合数取模就会比较麻烦，因为数据不一定能存下，而且通过观察组合数的公式：\n$$\nC_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times...\\times(n-m+1)}{m!}\n$$\n我们发现组合数是带有除法的，不能走一步取一次模，为了解决除法取模的问题，人们发明了逆元这个[东西](https://en.wikipedia.org/wiki/Inverse_element)。\n若 $a\\times b\\equiv1\\pmod p$ 则称 $b$ 为 $a$ 在模 $p$ 下的乘法逆元，一般认为，$b < p$，$b$ 记为 $a^{-1}$。**注意，此处 $a$ 与 $p$ 必须互质，否则乘法逆元不存在。**那么逆元该怎么用呢？当然是借助它将除法转为乘法，再用分配律来计算了。\n我们来看一个式子：\n$$\n\\frac{a}{b}\\equiv\\frac{a}{b}\\times b\\times b^{-1}\\equiv a\\times b^{-1}\\pmod p\n$$\n这样就可以把问题转化为求一个数的逆元，再转化为乘法运算。\n\n##### 递推求逆元\n\n求 $i​$ 在模 $p​$ 下的乘法逆元，满足 $gcd(i, p)=1, i< p​$\n使用欧几里得除法的形式，令 $p=k\\times i+r​$，则 $k=\\lfloor\\frac{p}{i}\\rfloor,r=p\\bmod i​$\n显然，$k\\times i+r\\equiv 0(\\bmod p)​$\n两边同乘 $i^{-1}\\times r^{-1}​$，得 $k\\times r^{-1}+i^{-1}\\equiv 0\\pmod p​$\n移项，整理：$i^{-1}\\equiv -k\\times r^{-1}\\equiv (p-k)\\times r^{-1}\\pmod p​$\n将 $k​$ 和 $r​$ 用 $p​$ 来替换：$i^{-1}\\equiv (p-\\lfloor\\frac{p}{i}\\rfloor)\\times (p\\bmod i)^{-1}\\pmod p​$\n使用 `inv[i]` 来表示 `i` 的逆元，有 `inv[i] = (p - p / i) * inv[p % i]`\n时间复杂的为线性，代码如下：\n\n```cpp\nlong long inv[10000010];\nlong long getInverse(long long x, long long p) {\n\tif (inv[x] != 0) return inv[x];\n\tinv[x] = (p - p / i) * getInverse(p % x, p) % p;\n\treturn inv[x];\n}\n```\n\n##### 费马小定理求逆元\n\n费马小定理：~~如此可爱的定理名称~~ $a^{p-1}\\equiv1\\pmod p$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。\n所以求 $a$ 的逆元时，只要求出 $a^{p-2}$ 的值就可以了。\n\n```cpp\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\nlong long getinverse(long long x, long long p) {\n\treturn Montgomery(x, p - 2, p);\n}\n```\n\n##### 逆元求组合数\n\n从组合数原公式出发\n$$\nC_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times...\\times(n-m+1)}{m!}\n$$\n\n对于分子，我们可以用传统方法，边乘边模，对于分母，我们可以求逆元再乘分子。\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n\nlong long getInverse(long long x, long long p) {\n\treturn Montgomery(x, p - 2, p);\n}\n\nlong long c(long long n, long long m, long long p) {\n\tlong long x = 1, y = 1;\n\tfor (long long i = n; i >= n - m + 1; --i) x = x * i % p;\n\tfor (long long i = 1; i <= m; ++i) y = y * i % p;\n\treturn x * getInverse(y, p) % p;\n}\n\nint main() {\n\tlong long n, m, p;\n\tcin >> n >> m >> p;\n\tcout << c(n, m, p);\n\treturn 0;\n}\n\n```\n\n**注：$p$ 一定要是大质数，起码得大于 $m$。若要求 $a$ 在模 $p$ 下的乘法逆元，必须要保证 $a$ 与 $p$ 互质。在此题中，要求 $m!$ 的乘法逆元，那么 $p$ 必须与 $m!$ 互质，所以 $p$ 要大于 $m$，且是个质数。~~我一开始忘记了这点，导致调了一年~~**\n\n#### 方法三：卢卡斯定理\n\n**适用于对答案模一个质数的情况。**\n与逆元不同的是，这个方法不要求 $p$ 是个很大的素数，因此，适用范围更广（也许吧）。\n**[卢卡斯定理](https://zh.wikipedia.org/wiki/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86)**：\n对于非负整数 $m$ 和 $n$ 及素数 $p$，有同余式：\n$$\n\\binom{n}{m}\\equiv\\prod_{i=0}^k\\binom{n_i}{m_i} \\pmod p\n$$\n成立。其中：\n$$\nn=n_kp^k+n_{k-1}p^{k-1}+...+n_1p+n_0\n$$\n并且\n$$\nm=m_kp^k+m_{k-1}p^{k-1}+...+m_1p+m_0\n$$\n以上两个式子是 $n$ 和 $m$ 的 $p$ 进制展开。当 $m < n$ 时，二项式系数 $\\binom{n}{m}=0$。\n可以通过[一系列的推导](https://www.luogu.org/blog/user28007/lucas)得出下面这个结论：\n$$\n\\binom{n}{m}\\equiv\\binom{\\lfloor\\frac{n}{p}\\rfloor}{\\lfloor\\frac{m}{p}\\rfloor}\\times \\binom{n\\bmod p}{m\\bmod p} \\pmod p\n$$\n由这个公式我们可以得出结论：**在 $n$ 和 $m$ 都小于 $p$ 时，公式一点用都没有。（啥？你问我为什么？$\\binom{0}{0}=1$ 啊！）**所以这个公式是在 $n\\geqslant p$ 或 $m\\geqslant p$ 的情况下使用的。这样可以减小 $n$ 和 $m$，使之小于 $p$，再用乘法逆元去求组合数。 \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nlong long Montgomery(long long a, long long b, long long c) {\n\tif (b == 0) return 1 % c;\n\tlong long result = 1;\n\tlong long temp = a;\n\twhile (b > 0) {\n\t\tif (b & 1) result = (result * temp) % c;\n\t\ttemp = (temp * temp) % c;\n\t\tb >>= 1;\n\t}\n\treturn result;\n}\n\nlong long getInverse(long long a, long long b) {\n\treturn Montgomery(a, b - 2, b);\n}\n\nlong long c(int n, int m, int p) {\n\tif (m == 0) return 1 % p;\n\tif (n == 0) return 0;\n\tif (n >= p || m >= p) return c(n / p, m / p, p) * c(n % p, m % p, p) % p;\n\t// 核心语句\n\tlong long x = 1, y = 1;\n\tfor (int i = n; i >= n - m + 1; --i) x = x * i % p;\n\tfor (int i = 1; i <= m; ++i) y = y * i % p;\n\treturn x * getInverse(y, p) % p;\n}\n\nint main() {\n\tlong long n, m, p;\n\tcin >> n >> m >> p;\n\tcout << c(n, m, p);\n\treturn 0;\n}\n\n```\n\n### 未完待续......\n\n---","slug":"数论-OI-中的模运算计算方法","published":1,"updated":"2018-09-16T04:14:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbsz003ergc86uhfuico","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。</p>\n<a id=\"more\"></a>\n<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ul>\n<li>恒等式：<ul>\n<li>$(a\\bmod n)\\bmod n=a\\bmod n$</li>\n<li>对于所有的正数 $x$ 有：$n^x\\bmod n = 0$</li>\n<li>如果 p 是一个质数，且不为 b 的因数，此时由费马小定理有：$ab^{p−1}\\bmod p=a\\bmod p$</li>\n</ul>\n</li>\n<li>分配律<ul>\n<li>$(a-b)\\bmod n=(a\\bmod n-b\\bmod n)\\bmod n$</li>\n<li>$(a+b)\\bmod n=(a\\bmod n+b\\bmod n)\\bmod n$</li>\n<li>$ab\\bmod n=(a\\bmod n)(b\\bmod n)\\bmod n$</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高次幂函数的取模\"><a href=\"#高次幂函数的取模\" class=\"headerlink\" title=\"高次幂函数的取模\"></a>高次幂函数的取模</h3><h4 id=\"暴力取模法\"><a href=\"#暴力取模法\" class=\"headerlink\" title=\"暴力取模法\"></a>暴力取模法</h4><p>由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有<code>int</code>、<code>float</code>、<code>double</code>、<code>long long</code>这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。<br>所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b--) result = result * a % c;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 计算 a^b % c</span></span><br></pre></td></tr></table></figure></p>\n<p>这种算法的正确性毋庸置疑，但是如果幂指数太大的话，需要耗费的时间就更非常多，直接导致运算效率低下，所以只适用于指数不大的情况下使用。</p>\n<h4 id=\"二分幂\"><a href=\"#二分幂\" class=\"headerlink\" title=\"二分幂\"></a>二分幂</h4><p>要求 $a^n$，如果知道了 $a^{\\frac{n}{2}}$ 那么再平方就行了。<br>令 $A=a^{\\lfloor\\frac{n}{2}\\rfloor}$<br>若 $n$ 为偶数，那么 $Result=A^2$<br>若 $n$ 为奇数，那么 $Result=a\\times A^2$<br>这样子复杂度从 $O(n)$ 降到了 $O(\\log n)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"built_in\">pow</span>(a, b / <span class=\"number\">2</span>, c);</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)x * x % m;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b % <span class=\"number\">2</span> == <span class=\"number\">1</span>) ans = ans * a % m;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"蒙哥马利算法\"><a href=\"#蒙哥马利算法\" class=\"headerlink\" title=\"蒙哥马利算法\"></a>蒙哥马利算法</h4><p>具体详细介绍见<a href=\"https://en.wikipedia.org/wiki/Montgomery_modular_multiplication\" target=\"_blank\" rel=\"noopener\">维基百科</a>，这里直接上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合数取模\"><a href=\"#组合数取模\" class=\"headerlink\" title=\"组合数取模\"></a>组合数取模</h3><h4 id=\"方法一：杨辉三角递推\"><a href=\"#方法一：杨辉三角递推\" class=\"headerlink\" title=\"方法一：杨辉三角递推\"></a>方法一：杨辉三角递推</h4><p>使用递推公式：$C_n^m=C_{n-1}^m+C_{n-1}^{m-1}$<br>写成数组：$C[n][m]=C[n-1][m]+C[n-1][m-1]$<br>这也是杨辉三角的递推公式，所以边界为 $C[0][0]=1$。下面给出求一个组合数的方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c[<span class=\"number\">10010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tm = min(m, n - m);</span><br><span class=\"line\">\t<span class=\"comment\">// 因为 c[n][m] == c[n][n - m]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 所以取最小值减少运算。</span></span><br><span class=\"line\">\tc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = m; j &gt;= <span class=\"number\">1</span>; --j)</span><br><span class=\"line\">\t\t\tc[j] = c[j] + c[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c[m];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因为只求一个组合数，所以使用了滚动数组的方式</span></span><br></pre></td></tr></table></figure></p>\n<p>由于递推时间复杂度为 $O(n^2)$，所以只适用于小数据的情况。</p>\n<h4 id=\"方法二：乘法逆元\"><a href=\"#方法二：乘法逆元\" class=\"headerlink\" title=\"方法二：乘法逆元\"></a>方法二：乘法逆元</h4><p>在数据很大的时候，我们对组合数取模就会比较麻烦，因为数据不一定能存下，而且通过观察组合数的公式：<br>$$<br>C_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times…\\times(n-m+1)}{m!}<br>$$<br>我们发现组合数是带有除法的，不能走一步取一次模，为了解决除法取模的问题，人们发明了逆元这个<a href=\"https://en.wikipedia.org/wiki/Inverse_element\" target=\"_blank\" rel=\"noopener\">东西</a>。<br>若 $a\\times b\\equiv1\\pmod p$ 则称 $b$ 为 $a$ 在模 $p$ 下的乘法逆元，一般认为，$b &lt; p$，$b$ 记为 $a^{-1}$。<strong>注意，此处 $a$ 与 $p$ 必须互质，否则乘法逆元不存在。</strong>那么逆元该怎么用呢？当然是借助它将除法转为乘法，再用分配律来计算了。<br>我们来看一个式子：<br>$$<br>\\frac{a}{b}\\equiv\\frac{a}{b}\\times b\\times b^{-1}\\equiv a\\times b^{-1}\\pmod p<br>$$<br>这样就可以把问题转化为求一个数的逆元，再转化为乘法运算。</p>\n<h5 id=\"递推求逆元\"><a href=\"#递推求逆元\" class=\"headerlink\" title=\"递推求逆元\"></a>递推求逆元</h5><p>求 $i​$ 在模 $p​$ 下的乘法逆元，满足 $gcd(i, p)=1, i&lt; p​$<br>使用欧几里得除法的形式，令 $p=k\\times i+r​$，则 $k=\\lfloor\\frac{p}{i}\\rfloor,r=p\\bmod i​$<br>显然，$k\\times i+r\\equiv 0(\\bmod p)​$<br>两边同乘 $i^{-1}\\times r^{-1}​$，得 $k\\times r^{-1}+i^{-1}\\equiv 0\\pmod p​$<br>移项，整理：$i^{-1}\\equiv -k\\times r^{-1}\\equiv (p-k)\\times r^{-1}\\pmod p​$<br>将 $k​$ 和 $r​$ 用 $p​$ 来替换：$i^{-1}\\equiv (p-\\lfloor\\frac{p}{i}\\rfloor)\\times (p\\bmod i)^{-1}\\pmod p​$<br>使用 <code>inv[i]</code> 来表示 <code>i</code> 的逆元，有 <code>inv[i] = (p - p / i) * inv[p % i]</code><br>时间复杂的为线性，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inv[<span class=\"number\">10000010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getInverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (inv[x] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> inv[x];</span><br><span class=\"line\">\tinv[x] = (p - p / i) * getInverse(p % x, p) % p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inv[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"费马小定理求逆元\"><a href=\"#费马小定理求逆元\" class=\"headerlink\" title=\"费马小定理求逆元\"></a>费马小定理求逆元</h5><p>费马小定理：<del>如此可爱的定理名称</del> $a^{p-1}\\equiv1\\pmod p$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。<br>所以求 $a$ 的逆元时，只要求出 $a^{p-2}$ 的值就可以了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getinverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Montgomery(x, p - <span class=\"number\">2</span>, p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"逆元求组合数\"><a href=\"#逆元求组合数\" class=\"headerlink\" title=\"逆元求组合数\"></a>逆元求组合数</h5><p>从组合数原公式出发<br>$$<br>C_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times…\\times(n-m+1)}{m!}<br>$$</p>\n<p>对于分子，我们可以用传统方法，边乘边模，对于分母，我们可以求逆元再乘分子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getInverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Montgomery(x, p - <span class=\"number\">2</span>, p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = n; i &gt;= n - m + <span class=\"number\">1</span>; --i) x = x * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * getInverse(y, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, m, p;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c(n, m, p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：$p$ 一定要是大质数，起码得大于 $m$。若要求 $a$ 在模 $p$ 下的乘法逆元，必须要保证 $a$ 与 $p$ 互质。在此题中，要求 $m!$ 的乘法逆元，那么 $p$ 必须与 $m!$ 互质，所以 $p$ 要大于 $m$，且是个质数。<del>我一开始忘记了这点，导致调了一年</del></strong></p>\n<h4 id=\"方法三：卢卡斯定理\"><a href=\"#方法三：卢卡斯定理\" class=\"headerlink\" title=\"方法三：卢卡斯定理\"></a>方法三：卢卡斯定理</h4><p><strong>适用于对答案模一个质数的情况。</strong><br>与逆元不同的是，这个方法不要求 $p$ 是个很大的素数，因此，适用范围更广（也许吧）。<br><strong><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86\" target=\"_blank\" rel=\"noopener\">卢卡斯定理</a></strong>：<br>对于非负整数 $m$ 和 $n$ 及素数 $p$，有同余式：<br>$$<br>\\binom{n}{m}\\equiv\\prod_{i=0}^k\\binom{n_i}{m_i} \\pmod p<br>$$<br>成立。其中：<br>$$<br>n=n_kp^k+n_{k-1}p^{k-1}+…+n_1p+n_0<br>$$<br>并且<br>$$<br>m=m_kp^k+m_{k-1}p^{k-1}+…+m_1p+m_0<br>$$<br>以上两个式子是 $n$ 和 $m$ 的 $p$ 进制展开。当 $m &lt; n$ 时，二项式系数 $\\binom{n}{m}=0$。<br>可以通过<a href=\"https://www.luogu.org/blog/user28007/lucas\" target=\"_blank\" rel=\"noopener\">一系列的推导</a>得出下面这个结论：<br>$$<br>\\binom{n}{m}\\equiv\\binom{\\lfloor\\frac{n}{p}\\rfloor}{\\lfloor\\frac{m}{p}\\rfloor}\\times \\binom{n\\bmod p}{m\\bmod p} \\pmod p<br>$$<br>由这个公式我们可以得出结论：<strong>在 $n$ 和 $m$ 都小于 $p$ 时，公式一点用都没有。（啥？你问我为什么？$\\binom{0}{0}=1$ 啊！）</strong>所以这个公式是在 $n\\geqslant p$ 或 $m\\geqslant p$ 的情况下使用的。这样可以减小 $n$ 和 $m$，使之小于 $p$，再用乘法逆元去求组合数。 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getInverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Montgomery(a, b - <span class=\"number\">2</span>, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt;= p || m &gt;= p) <span class=\"keyword\">return</span> c(n / p, m / p, p) * c(n % p, m % p, p) % p;</span><br><span class=\"line\">\t<span class=\"comment\">// 核心语句</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= n - m + <span class=\"number\">1</span>; --i) x = x * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * getInverse(y, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, m, p;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c(n, m, p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h3><hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。</p>","more":"<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ul>\n<li>恒等式：<ul>\n<li>$(a\\bmod n)\\bmod n=a\\bmod n$</li>\n<li>对于所有的正数 $x$ 有：$n^x\\bmod n = 0$</li>\n<li>如果 p 是一个质数，且不为 b 的因数，此时由费马小定理有：$ab^{p−1}\\bmod p=a\\bmod p$</li>\n</ul>\n</li>\n<li>分配律<ul>\n<li>$(a-b)\\bmod n=(a\\bmod n-b\\bmod n)\\bmod n$</li>\n<li>$(a+b)\\bmod n=(a\\bmod n+b\\bmod n)\\bmod n$</li>\n<li>$ab\\bmod n=(a\\bmod n)(b\\bmod n)\\bmod n$</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高次幂函数的取模\"><a href=\"#高次幂函数的取模\" class=\"headerlink\" title=\"高次幂函数的取模\"></a>高次幂函数的取模</h3><h4 id=\"暴力取模法\"><a href=\"#暴力取模法\" class=\"headerlink\" title=\"暴力取模法\"></a>暴力取模法</h4><p>由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有<code>int</code>、<code>float</code>、<code>double</code>、<code>long long</code>这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。<br>所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b--) result = result * a % c;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 计算 a^b % c</span></span><br></pre></td></tr></table></figure></p>\n<p>这种算法的正确性毋庸置疑，但是如果幂指数太大的话，需要耗费的时间就更非常多，直接导致运算效率低下，所以只适用于指数不大的情况下使用。</p>\n<h4 id=\"二分幂\"><a href=\"#二分幂\" class=\"headerlink\" title=\"二分幂\"></a>二分幂</h4><p>要求 $a^n$，如果知道了 $a^{\\frac{n}{2}}$ 那么再平方就行了。<br>令 $A=a^{\\lfloor\\frac{n}{2}\\rfloor}$<br>若 $n$ 为偶数，那么 $Result=A^2$<br>若 $n$ 为奇数，那么 $Result=a\\times A^2$<br>这样子复杂度从 $O(n)$ 降到了 $O(\\log n)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"built_in\">pow</span>(a, b / <span class=\"number\">2</span>, c);</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)x * x % m;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b % <span class=\"number\">2</span> == <span class=\"number\">1</span>) ans = ans * a % m;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"蒙哥马利算法\"><a href=\"#蒙哥马利算法\" class=\"headerlink\" title=\"蒙哥马利算法\"></a>蒙哥马利算法</h4><p>具体详细介绍见<a href=\"https://en.wikipedia.org/wiki/Montgomery_modular_multiplication\" target=\"_blank\" rel=\"noopener\">维基百科</a>，这里直接上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合数取模\"><a href=\"#组合数取模\" class=\"headerlink\" title=\"组合数取模\"></a>组合数取模</h3><h4 id=\"方法一：杨辉三角递推\"><a href=\"#方法一：杨辉三角递推\" class=\"headerlink\" title=\"方法一：杨辉三角递推\"></a>方法一：杨辉三角递推</h4><p>使用递推公式：$C_n^m=C_{n-1}^m+C_{n-1}^{m-1}$<br>写成数组：$C[n][m]=C[n-1][m]+C[n-1][m-1]$<br>这也是杨辉三角的递推公式，所以边界为 $C[0][0]=1$。下面给出求一个组合数的方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c[<span class=\"number\">10010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\tm = min(m, n - m);</span><br><span class=\"line\">\t<span class=\"comment\">// 因为 c[n][m] == c[n][n - m]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 所以取最小值减少运算。</span></span><br><span class=\"line\">\tc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = m; j &gt;= <span class=\"number\">1</span>; --j)</span><br><span class=\"line\">\t\t\tc[j] = c[j] + c[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c[m];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因为只求一个组合数，所以使用了滚动数组的方式</span></span><br></pre></td></tr></table></figure></p>\n<p>由于递推时间复杂度为 $O(n^2)$，所以只适用于小数据的情况。</p>\n<h4 id=\"方法二：乘法逆元\"><a href=\"#方法二：乘法逆元\" class=\"headerlink\" title=\"方法二：乘法逆元\"></a>方法二：乘法逆元</h4><p>在数据很大的时候，我们对组合数取模就会比较麻烦，因为数据不一定能存下，而且通过观察组合数的公式：<br>$$<br>C_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times…\\times(n-m+1)}{m!}<br>$$<br>我们发现组合数是带有除法的，不能走一步取一次模，为了解决除法取模的问题，人们发明了逆元这个<a href=\"https://en.wikipedia.org/wiki/Inverse_element\" target=\"_blank\" rel=\"noopener\">东西</a>。<br>若 $a\\times b\\equiv1\\pmod p$ 则称 $b$ 为 $a$ 在模 $p$ 下的乘法逆元，一般认为，$b &lt; p$，$b$ 记为 $a^{-1}$。<strong>注意，此处 $a$ 与 $p$ 必须互质，否则乘法逆元不存在。</strong>那么逆元该怎么用呢？当然是借助它将除法转为乘法，再用分配律来计算了。<br>我们来看一个式子：<br>$$<br>\\frac{a}{b}\\equiv\\frac{a}{b}\\times b\\times b^{-1}\\equiv a\\times b^{-1}\\pmod p<br>$$<br>这样就可以把问题转化为求一个数的逆元，再转化为乘法运算。</p>\n<h5 id=\"递推求逆元\"><a href=\"#递推求逆元\" class=\"headerlink\" title=\"递推求逆元\"></a>递推求逆元</h5><p>求 $i​$ 在模 $p​$ 下的乘法逆元，满足 $gcd(i, p)=1, i&lt; p​$<br>使用欧几里得除法的形式，令 $p=k\\times i+r​$，则 $k=\\lfloor\\frac{p}{i}\\rfloor,r=p\\bmod i​$<br>显然，$k\\times i+r\\equiv 0(\\bmod p)​$<br>两边同乘 $i^{-1}\\times r^{-1}​$，得 $k\\times r^{-1}+i^{-1}\\equiv 0\\pmod p​$<br>移项，整理：$i^{-1}\\equiv -k\\times r^{-1}\\equiv (p-k)\\times r^{-1}\\pmod p​$<br>将 $k​$ 和 $r​$ 用 $p​$ 来替换：$i^{-1}\\equiv (p-\\lfloor\\frac{p}{i}\\rfloor)\\times (p\\bmod i)^{-1}\\pmod p​$<br>使用 <code>inv[i]</code> 来表示 <code>i</code> 的逆元，有 <code>inv[i] = (p - p / i) * inv[p % i]</code><br>时间复杂的为线性，代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inv[<span class=\"number\">10000010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getInverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (inv[x] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> inv[x];</span><br><span class=\"line\">\tinv[x] = (p - p / i) * getInverse(p % x, p) % p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inv[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"费马小定理求逆元\"><a href=\"#费马小定理求逆元\" class=\"headerlink\" title=\"费马小定理求逆元\"></a>费马小定理求逆元</h5><p>费马小定理：<del>如此可爱的定理名称</del> $a^{p-1}\\equiv1\\pmod p$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。<br>所以求 $a$ 的逆元时，只要求出 $a^{p-2}$ 的值就可以了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getinverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Montgomery(x, p - <span class=\"number\">2</span>, p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"逆元求组合数\"><a href=\"#逆元求组合数\" class=\"headerlink\" title=\"逆元求组合数\"></a>逆元求组合数</h5><p>从组合数原公式出发<br>$$<br>C_n^m=\\frac{n!}{m!(n-m)!}=\\frac{n\\times (n-1)\\times…\\times(n-m+1)}{m!}<br>$$</p>\n<p>对于分子，我们可以用传统方法，边乘边模，对于分母，我们可以求逆元再乘分子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getInverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Montgomery(x, p - <span class=\"number\">2</span>, p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = n; i &gt;= n - m + <span class=\"number\">1</span>; --i) x = x * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * getInverse(y, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, m, p;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c(n, m, p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：$p$ 一定要是大质数，起码得大于 $m$。若要求 $a$ 在模 $p$ 下的乘法逆元，必须要保证 $a$ 与 $p$ 互质。在此题中，要求 $m!$ 的乘法逆元，那么 $p$ 必须与 $m!$ 互质，所以 $p$ 要大于 $m$，且是个质数。<del>我一开始忘记了这点，导致调了一年</del></strong></p>\n<h4 id=\"方法三：卢卡斯定理\"><a href=\"#方法三：卢卡斯定理\" class=\"headerlink\" title=\"方法三：卢卡斯定理\"></a>方法三：卢卡斯定理</h4><p><strong>适用于对答案模一个质数的情况。</strong><br>与逆元不同的是，这个方法不要求 $p$ 是个很大的素数，因此，适用范围更广（也许吧）。<br><strong><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86\" target=\"_blank\" rel=\"noopener\">卢卡斯定理</a></strong>：<br>对于非负整数 $m$ 和 $n$ 及素数 $p$，有同余式：<br>$$<br>\\binom{n}{m}\\equiv\\prod_{i=0}^k\\binom{n_i}{m_i} \\pmod p<br>$$<br>成立。其中：<br>$$<br>n=n_kp^k+n_{k-1}p^{k-1}+…+n_1p+n_0<br>$$<br>并且<br>$$<br>m=m_kp^k+m_{k-1}p^{k-1}+…+m_1p+m_0<br>$$<br>以上两个式子是 $n$ 和 $m$ 的 $p$ 进制展开。当 $m &lt; n$ 时，二项式系数 $\\binom{n}{m}=0$。<br>可以通过<a href=\"https://www.luogu.org/blog/user28007/lucas\" target=\"_blank\" rel=\"noopener\">一系列的推导</a>得出下面这个结论：<br>$$<br>\\binom{n}{m}\\equiv\\binom{\\lfloor\\frac{n}{p}\\rfloor}{\\lfloor\\frac{m}{p}\\rfloor}\\times \\binom{n\\bmod p}{m\\bmod p} \\pmod p<br>$$<br>由这个公式我们可以得出结论：<strong>在 $n$ 和 $m$ 都小于 $p$ 时，公式一点用都没有。（啥？你问我为什么？$\\binom{0}{0}=1$ 啊！）</strong>所以这个公式是在 $n\\geqslant p$ 或 $m\\geqslant p$ 的情况下使用的。这样可以减小 $n$ 和 $m$，使之小于 $p$，再用乘法逆元去求组合数。 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Montgomery</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % c;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> temp = a;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>) result = (result * temp) % c;</span><br><span class=\"line\">\t\ttemp = (temp * temp) % c;</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getInverse</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Montgomery(a, b - <span class=\"number\">2</span>, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> % p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n &gt;= p || m &gt;= p) <span class=\"keyword\">return</span> c(n / p, m / p, p) * c(n % p, m % p, p) % p;</span><br><span class=\"line\">\t<span class=\"comment\">// 核心语句</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n; i &gt;= n - m + <span class=\"number\">1</span>; --i) x = x * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * getInverse(y, p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, m, p;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c(n, m, p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续……\"><a href=\"#未完待续……\" class=\"headerlink\" title=\"未完待续……\"></a>未完待续……</h3><hr>"},{"title":"[NOIP 模拟] 2018-8-8 题解: 爆零日，我该何去何从...","date":"2018-08-08T12:39:18.000Z","mathjax":true,"copyright":true,"_content":"\n### 写在前面\n\n今天的题似乎是 Day1 的题，然而却是压力山大，从第一题开始就崩，第二题考场上无脑 Dijkstra 求最短路，第三题更是懵逼（考后听说用 Dancing Link 做的时候彻底崩溃），总之，今天四十分，与爆零相差无几，所以这次在写题解的同时，还是会写一点考试技巧的，尤其是第一题和第二题（原谅我知识水平实在不够，对第三题仍然懵逼）。\n<!-- more -->\n### T1 动态仙人掌(dinosaur.cpp/c/pas)\n***——玩了这么多次小恐龙，没想到它还会报复我***\n\n**[题目描述]**\n\n由于 Beny 做的烧网线实验，Fife 家断网了。\nFife 照常打开了 Google Chrome，由于断网，他看到了以下内容：\n\n<div style=\"align: center\"> <img src=\"pic1.jpg\"/> </div>\n\n看 到 这 个 简 单 而 又 有 趣 的 游 戏 ， 他 玩 了 起 来 。 然 后 ：\n\n<div style=\"align: center\"> <img src=\"pic2.jpg\"/> </div>\n\nFife 永远没有 gameover，他觉得这个游戏太简单了，现在他想考考你。小恐龙在数轴上原点出发向右运动，速度为$1$个单位每秒。现在你知道每一个仙人掌的位置$p[i]$和高度$h[i]$，且没有怪鸟突袭，请你控制小恐龙跳跃，使它能跳过最后一个仙人掌且跳跃的最大高度最小。为了送温暖简化问题，跳跃满足以下规则：它的跳跃路线为严格的与地面夹角为$45$度的直线，它在平地上能随时起跳，它能在起点和落地时刻瞬间起跳。你能控制它起跳的时刻和下落的时刻，下落时它会沿与地面夹角为$45$度的直线下降。小恐龙能跳过一个仙人掌当且仅当它在这个仙人掌的位置时的高度大于等于仙人掌的高度。 \n\n**[输入]**\n\n\t第 1 行 1 个正整数 n\n\t接下来 n 行每行两个正整数 p[i]和 h[i],为第 i 个仙人掌的位置和高度，\n\t不保证 p[i]单调递增，\n\t可能会有两个仙人掌在同一位置。 \n\n**[输出]**\n\n\t你需要控制小恐龙跳跃，使它能跳过所有仙人掌，且跳跃的最大高度最小，\n\t输出这个高度，\n\t保留 1 位小数，如果无解，输出-1\n\n**[样例输入]**\n\n\t5\n\t5 2\n\t9 3\n\t13 2\n\t19 3\n\t20 1\n\n**[样例输出]**\n\n\t6.0\n\n**[数据规模]**\n\n\t对于 30%的数据：n<=200, p[i] <= 1000, h[i] <= 100\n\t对于 60%的数据：n<= 50000, p[i] <= 3000000, h[i] <= 500\n\t对于 100%的数据：n <= 300000, p[i] < 2^31, h[i] <=40000, 数据保证无需使用 longlong 或 int64\n\n**[题解]**\n\n看到这是第一道题，心想，这一定很简单，只要贪心就行了，一堆判断，然后信心满满地提交......最后只对了一个点......此处附上 **WA 代码**:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 310000\n#define max(a, b) (a > b ? a : b)\n#define INF 0x3f3f3f3f\n\nint n, p[maxn], h[maxn];\nbitset<maxn> goDown;\ndouble ans = -INF;\n\nvoid init() {\n\tgoDown.set();\n\tmemset(h, 0, sizeof(h));\n\tp[0] = 0;\n}\n\nvoid judgeDown(int i) {\n\tif (h[i] >= h[i + 1] + p[i + 1] - p[i]) goDown[i] = 1;\n\telse if (h[i] + h[i + 1] <= p[i + 1] - p[i]) goDown[i] = 1;\n\telse goDown[i] = 0;\n}\n\nbool judgeCan(int i) {\n\tif (p[i] - p[i - 1] + h[i - 1] < h[i]) return false;\n\telse return true;\n}\n\n// 以上两个 judge 函数是 WA 之精髓所在（雾）\n// 只考虑了相邻两个仙人掌的关系，如果在下降的时候撞到另外一个仙人掌\n// 那么小恐龙就 GG 了\n\ndouble calh(int x, int y) {\n\tif (h[x] > h[y] + p[y] - p[x] && x + 1 == y) return (double)h[x];\n\telse return (double)(p[y] - p[x] + h[x] + h[y]) / 2.0;\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"dinosaur.in\");\n\tofstream out(\"dinosaur.out\");\n\tin.tie(NULL);\n\t\n\tin >> n;\n\tinit();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tin >> p[i] >> h[i];\n\t\tif (!judgeCan(i)) {\n\t\t\tout << -1;\n\t\t\treturn 0;\n\t\t} else continue;\n\t}\n\tfor (int i = 1; i < n; ++i) judgeDown(i);\n\tint key = 1;\n\tdouble tmp;\n\tfor (int i = 1; i <= n && key <= n; ++i) {\n\t\tif (goDown[i]) {\n\t\t\tdouble tmp = calh(key, i);\n\t\t\tans = max(ans, tmp);\n\t\t\tkey = i + 1;\n\t\t\tif (p[i] + h[i] > p[i + 1]) key += 1;\n\t\t}\n\t}\n\tout << setprecision(1) << fixed << ans;\n\treturn 0;\n}\n\n// 这个实例告诉大家，贪心前先做好分析准备工作，否则就会像我这样......\n\n```\n\n那么到底该怎么做呢？\n\n由于这是一只理（bian）想（tai）化过的小恐龙，它只会与地面呈$45$度跳跃，而且可以无限升天，~~法力无边~~，所以我们可以从每一个仙人掌的跳跃边界来考虑：\n\n<div style=\"align: center\"> <img src=\"T1_1.jpg\"/> </div>\n\n考虑两种不同的仙人掌情况：\n\n<div style=\"align: center\"> <img src=\"T1_2.jpg\"/> </div>\n\n那么就有两种做法了，第一种，删去所有像绿色仙人掌那样的仙人掌，然后直接计算；第二种，也是标程的方法，逐个进行判断，维护 first 和 last 这两个值，分别表示一组跳跃（一次上和一次下）的左右边界，然后计算。\n\n**[参考代码]**\n\n```cpp\n// 注：本代码使用的是第二种方法\n// 使用第一种方法的同学可以使用类链表的方式来存储数据，加快效率\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 310000\n\nstruct segment { int l; int r; };\nint n, p, h;\ndouble ans = 0;\nsegment a[maxn];\nbool compare(segment a, segment b) {\n\treturn a.l < b.l || (a.l == b.l && a.r < b.r);\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"dinosaur.in\");\n\tofstream out(\"dinosaur.out\");\n\tin.tie(NULL);\n\n\tin >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tin >> p >> h;\n\t\ta[i].l = p - h;\n\t\ta[i].r = p + h;\n\t}\n\tsort(a + 1, a + n + 1, compare);\n\tif (a[1].l < 0) {\n\t\tcout << -1;\n\t\treturn 0;\n\t}\n\n\tint last = a[1].r;\n\tint first = a[1].l;\n\tfor (int i = 2; i <= n; ++i) {\n\t\tif (a[i].l < last) last = max(last, a[i].r);\n\t\telse {\n\t\t\tans = max(ans, (last - first) * 1.0 / 2.0);\n\t\t\tfirst = a[i].l;\n\t\t\tlast = a[i].r;\n\t\t}\n\t}\n\n\tans = max(ans, (last - first) * 1.0 / 2.0);\n\tout << fixed << setprecision(1) << ans;\n\n\treturn 0;\n}\n\n```\n\n**[评价]**\n\n其实思维难度并不大，主要是考验对算法是否掌握到位，譬如用贪心，这道题并不能从头贪到尾，那样会出问题，必须考虑所有可能情况，这也是本题样例的坑人之处所在，以后考试时，如果只有一个样例，那必须得小心出题老师出阴招，最好是自己~~脑滚键盘~~来出几个数据手算测试一下。\n\n### T2 相交(inter.cpp/c/pas)\n***——旧时 Dijkstra 堂前 O(mlog n)，飞入寻常 NOIER 家。***\n\n**[题目描述]**\n\n一棵大树下有$n$个巢穴，由$n-1$条双向道路连接，任意两个城市均可互相到达。\n大树附近有两群蚂蚁，每天早上，第一群蚂蚁会派一只蚂蚁到这棵树下，并在第$a$个巢穴到第$b$ 个巢穴间的最短路径上的每个巢穴留下气味。每天傍晚，第二群蚂蚁会派一只蚂蚁到这棵树下，并侦查第$c$个巢穴到第$d$个巢穴间的最短路径上是否有蚂蚁留下的气味。每天蚂蚁留下的气味会在当天深夜消失。 \n\n**[输入]**\n\n\t第一行一个正整数 n，含义如题所示。\n\t接下来 n-1 行，每行两个正整数 u,v，表示第 u 个巢穴和第 v 个巢穴间有一条双向道路。\n\t接下来一行一个正整数 q，表示天数。\n\t接下来 q 行，每行四个正整数 a,b,c,d，含义如题所示。 \n\n**[输出]**\n\n\tq 行，每行一个字符串。\n\t若第二群派出的蚂蚁侦查到蚂蚁留下的气味，则输出”YES”,否则输出”NO”\n\n**[样例输入]**\n\n\t样例输入 1\n\n\t8\n\t1 2\n\t1 3\n\t2 4\n\t2 5\n\t5 6\n\t5 7\n\t3 8\n\t4\n\t2 5 4 3\n\t5 3 8 8\n\t5 4 6 7\n\t4 8 6 7\n\n\t样例输入 2\n\n\t15\n\t2 1\n\t3 1\n\t4 2\n\t5 3\n\t6 2\n\t7 2\n\t8 5\n\t9 3\n\t10 6\n\t11 5\n\t12 7\n\t13 11\n\t14 1\n\t15 1\n\t5\n\t1 2 3 4\n\t4 7 1 9\n\t2 3 7 9\n\t2 6 7 8\n\t2 1 6 8\n\n**[样例输出]**\n\n\t样例输出 1\n\n\tYES\n\tNO\n\tYES\n\tNO\n\n\t样例输出 2\n\n\tYES\n\tNO\n\tYES\n\tYES\n\tYES\n\n**[数据规模]**\n\n\t对于 30%的数据 1<=n,q<=3000\n\t对于另外 20%的数据 第 i 条边连接第 i 个巢穴和第 i+个巢穴\n\t对于 100%的数据 1<=n,q<=100000\n\n**[题解]**\n\n首先讲一下我考试的时候是怎么想的，我想既然是最短路径，还是个图（当时没看出是树），那么 Dijkstra 无疑了，潇潇洒洒一百行打完，用了两个 bitset 再用了一个神奇的方法记录路径。好！就是这样，一定 **AC** 了！结果：**TLE**......附上 Dijkstra 暴力代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 110000\n#define maxq 110000\n#define NOE -1\n#define INF\t0x3f3f3f3f\n\nstruct edgeNode {\n\tint vertexFrom;\n\tint vertexTo;\n\tint edgeNext;\n\tbool weight;\n};\nstruct heapNode {\n\tint u, d;\n\tbool operator<(const heapNode& b) const {\n\t\treturn d > b.d;\n\t}\n};\n\nedgeNode edges[maxn];\nint heads[maxn];\nint numEdges = 0;\nint n, q, u, v, a, b, c, d;\nbool judge = true;\nbitset<maxn> smell1;\nbitset<maxn> smell2;\nint path[maxn];\nint dist[maxn];\npriority_queue<heapNode> Q;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\nvoid addEdge(int vertex1, int vertex2) {\n\tnumEdges++;\n\tedges[numEdges].vertexFrom = vertex1;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = true;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\nvoid addDuplexEdge(int vertex1, int vertex2) {\n\taddEdge(vertex1, vertex2);\n\taddEdge(vertex2, vertex1);\n}\nvoid Dijkstra(int x) {\n\twhile (!Q.empty()) Q.pop();\n\tfor (int i = 1; i <= n; ++i) dist[i] = INF;\n\tfor (int i = 1; i <= n; ++i) path[i] = i;\n\tdist[x] = 0;\n\tQ.push((heapNode){ x, 0 });\n\twhile (!Q.empty()) {\n\t\theapNode f = Q.top();\n\t\tQ.pop();\n\t\tint u = f.u;\n\t\tint dis = f.d;\n\t\tif (dis != dist[u]) continue;\n\t\tfor (int i = heads[u]; i != NOE; i= edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] > dist[u] + w) {\n\t\t\t\tdist[j] = dist[u] + w;\n\t\t\t\tpath[j] = u; // 记录路径\n\t\t\t\tQ.push((heapNode){ j, dist[j] });\n\t\t\t}\n\t\t}\n\t}\n}\nvoid updateSmell1(int a, int b) {\n\tint tmp = b;\n\twhile (tmp != a) {\n\t\tsmell1[tmp] = 1;\n\t\ttmp = path[tmp];\n\t}\n}\nvoid updateSmell2(int c, int d) {\n\tint tmp = d;\n\twhile (tmp != c) {\n\t\tsmell2[tmp] = 1;\n\t\ttmp = path[tmp];\n\t}\n}\n\nint main() {\n\tfreopen(\"inter.in\", \"r\", stdin);\n\tfreopen(\"inter.out\", \"w\", stdout);\n\t// fstream 不知怎么就不能取消 sync_with_stdio，为了加快速度只能使用 freopen\n\tinit();\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n - 1; ++i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\taddDuplexEdge(u, v);\n\t}\n\tscanf(\"%d\", &q);\n\tfor (int i = 1; i <= q; ++i) {\n\t\tsmell1.reset();\n\t\tsmell2.reset();\n\t\tscanf(\"%d%d%d%d\", &a, &b, &c, &d);\n\t\tif ((a == c && b == d) || (a == d && b == c)) {\n\t\t\tprintf(\"YES\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tsmell1[a] = 1;\n\t\tsmell2[c] = 1;\n\t\t// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE\n\t\tDijkstra(a);\n\t\tupdateSmell1(a, b);\n\t\tDijkstra(c);\n\t\tupdateSmell2(c, d);\n\t\t// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE\n\t\tjudge = (smell1 & smell2).any();\n\t\tif (judge) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n\n\n```\n\n其实如果看出了这是棵树的话，是可以用广搜的......可以快不少。\n\n好了，说正解：就像上面所说的，这是一棵树（啥？你问我怎么看出的？仔细读题！！），所以获取最短距离一定是求两个点的 $LCA$ 了。那如何标记呢？？这是个好问题，一般我们都会去想标记经过的点，然而，如果用倍增 $LCA$ 求，一定会跳过经过的点，如果用朴素算法求的话......那还不如 $BFS$，那么我们就必须使用另外的方法了。\n\n首先我们画一棵树：\n\n<div style=\"align: center\"> <img src=\"T2_1.jpg\"/> </div>\n\n通过观察和举例，我们发现，只有当\n\n1. $a$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；\n2. $b$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；\n3. $c$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；\n4. $d$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；\n\n以上四者满足其一时才能够是 YES，否则就是 NO。\n\n为什么是这样？如何实现呢？\n首先思考：到达$a$，$b$两点必定经过它们的 $LCA$，那么，只要它们两点与另外两点的 $LCA $在一条链上（这个不是很严谨，这里的链指的是将树看成 $DAG$ 时，即若 $LCA(u, v) = v$ 时，$u$，$v$在一条链上），且它们两个点的 $LCA$ 深度比另外两点的深度小时，两条路径必有重叠的部分（如图，$d$与 $LCA(a, b)$ 在一条链上，且 $LCA(a, b)$ 的深度比 $LCA(c, d)$ 的深度大，所以两者路径必有交集）\n\n如此分析，代码也就呼之欲出了。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 110000\n#define NOE -1\n\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n};\n\nedgeNode edges[maxn << 1];\n// 注意由于是无向边，而前向星只能按照双向边处理，所以要乘二\nint heads[maxn];\nint numEdges = 0;\nint f[maxn][20], dep[maxn];\nint n, q, u, v, a, b, c, d;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\n\nvoid addEdge(int vertex1, int vertex2) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\n\nvoid addDuplexEdge(int vertex1, int vertex2) {\n\taddEdge(vertex1, vertex2);\n\taddEdge(vertex2, vertex1);\n}\n\nvoid rDFS(int x, int fa) {\n\tf[x][0] = fa;\n\tdep[x] = dep[fa] + 1;\n\tfor (int i = 1; i <= 18; ++i) \n\t\tf[x][i] = f[f[x][i - 1]][i - 1];\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext)\n\t\tif (edges[i]. vertexTo != fa)\n\t\t\trDFS(edges[i].vertexTo, x);\n}\n\nint LCA(int u, int v) {\n\tfor (int i = 18; i >= 0; --i)\n\t\tif (dep[f[u][i]] >= dep[v])\n\t\t\tu = f[u][i];\n\tfor (int i = 18; i >= 0; --i)\n\t\tif (dep[f[v][i]] >= dep[u])\n\t\t\tv = f[v][i];\n\tif (u == v) return u;\n\tfor (int i = 18; i >= 0; --i)\n\t\tif (f[u][i] != f[v][i]) {\n\t\t\tu = f[u][i];\n\t\t\tv = f[v][i];\n\t\t}\n\n\treturn f[u][0];\n}\n// 找 LCA\n\nbool inOneChain(int u, int v, int w) {\n\treturn (LCA(u, w) == w) && (dep[w] >= dep[v]);\n\t// 判断链和深度关系\n}\n\nbool judge(int a0, int b0, int c0, int d0) {\n\tint lca1 = LCA(a0, b0);\n\tint lca2 = LCA(c0, d0);\n\treturn (inOneChain(a0, lca1, lca2) || inOneChain(b0, lca1, lca2)\n\t\t|| inOneChain(c0, lca2, lca1) || inOneChain(d0, lca2, lca1));\n\t// 四者只要满足其一就会有交集，所以取或就行\n}\n\n\nint main() {\n\tfreopen(\"inter.in\", \"r\", stdin);\n\tfreopen(\"inter.out\", \"w\", stdout);\n\t// 我也不知道为什么，fstream 一关掉同步就会崩，无奈只能用 freopen\n\tscanf(\"%d\", &n);\n\tinit();\n\t// 循环时 i 只能到 n - 1，还是提醒仔细读题\n\tfor (int i = 1; i < n; ++i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\taddDuplexEdge(u, v);\n\t}\n\tmemset(f, 0, sizeof(f)); // 别忘记初始化\n\trDFS(1, 0);\n\tscanf(\"%d\", &q);\n\tfor (int i = 1; i <= q; ++i) {\n\t\tscanf(\"%d%d%d%d\", &a, &b, &c, &d);\n\t\tif (judge(a, b, c, d)) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n\n```\n\n**[评价]**\n\n思维难度较大，想到求交集的方法后仍然要画很多图来总结规律，否则规律很有可能是错误的或者是片面的。再次提醒仔细读题，因为题目中包含了很多隐藏条件，这些隐藏条件也尤为重要，不管是对正解还是对~~暴力~~朴素算法来说，都可以提高效率。这是一道难题，还是一道坑题。\n\n\n### T3 聪明格(kenken.cpp/c/pas)\n\n**[题目描述]**\n聪明格是一种数字游戏，又堪称升级版的数独，诞生日本。它在数学上的要求比数独要高得多，它把数独规则与加减乘除四则运算相结合，使大脑在各种谜题中来回穿梭。\n\n它的规则是这样的：\n有一个 $n\\times n$ 的棋盘，每个格子里填一个在 1~n 范围内的数，使得每行每列没有重复的数字，(即 1~n 每个数在每行和每列各出现一次)，且满足下列条件:\n\n<div style=\"align: center\"> <img src=\"pic3.jpg\"/> </div>\n<div style=\"align: center\"> <img src=\"pic4.jpg\"/> </div>\n\n现在给你一个 $n\\times n$ 的棋盘，让你完成它，并输出解的个数和字典序最小的方案。数据保证一定有解。 \n\n**[输入]**\n\n\t第一行一个正整数 n，表示棋盘的行数和列数。\n\t接下来 n 行，每行 n 个正整数。表示：相同数字构成了许多个连通块，\n\t假设这个四连通块内每个数字都为 a,那么你在这些格子上填的数的乘积\n\t应该等于 a。（具体描述见样例）\n\n**[输出]**\n\n\t输出共 n+1 行，第一行输出解的个数\n\t接下来 n 行，每行 n 个正整数。表示 n*n 的矩阵里每个数字的值\n\t（字典序最小的方案）。 \n\n**[输入样例 1]**\n\n\t4\n\t6 6 1 144\n\t6 2 144 144\n\t4 2 144 4\n\t12 12 4 4\n\t注：此样例所对应 4*4 的棋盘即为上图。 \n\n**[输出样例 1]**\n\n\t1\n\t2 3 1 4\n\t1 2 4 3\n\t4 1 3 2\n\t3 4 2 1\n\n**[输入样例 2]**\n\n\t3\n\t12 12 18\n\t12 12 18\n\t18 18 18\n\n**[输出样例 2]**\n\n\t4\n\t1 2 3\n\t2 3 1\n\t3 1 2\n\n**[输入样例 3]**\n\n\t9\n\t32353542 4254 54 544\n\t322735576 10108108 1084\n\t927576576 1040 40 1008 1008\n\t9270576576 814 14 1008 1008\n\t142702705768105 3283\n\t14426882727 105 32810\n\t302688268880 6105 63 6310\n\t30 2688 12680 8024 3 639\n\t66126126 126 24 24 40 40\n\n**[输出样例 3]**\n\n\t1\n\t8 1 5 6 7 9 2 3 4\n\t4 3 7 8 5 6 9 2 1\n\t1 9 4 3 2 8 5 6 7\n\t9 5 3 1 8 2 7 4 6\n\t7 6 9 2 1 5 4 8 3\n\t2 4 6 9 3 7 8 1 5\n\t5 7 8 4 6 3 1 9 2\n\t6 8 2 5 4 1 3 7 9\n\t3 2 1 7 9 4 6 5 8\n\n**[数据规模]**\n\n| 测试点 | n= | 输入矩阵中不同种类数字个数 |\n|:-------:|:--:|:--------------------:|\n| 1-2  | 3 | >=3  |\n| 3-4  | 5 | >=10 |\n| 5-7  | 9 | >=30 |\n| 8-10 | 9 | >=20 |\n\n\t100% 的数据满足，矩阵中每个数字<=100,000，合法棋盘个数（解的个数）<=300\n\n**[题解]**\n\n这里先不多说了，关于舞蹈链我在后面的博客中会详细讲解，此处直接贴标程。\n\n**[参考代码]**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std; \nconst int N=11,M=510;\nconst int dx[4]={1,0,-1,0};\nconst int dy[4]={0,1,0,-1};\nstruct node2{ int c[N][N]; } ans[M];\nbool operator< (node2 x,node2 y){\n\tfor(int i = 1; i < N; i++)\n\t\tfor(int j = 1; j<N; j++)\n\t\t\tif(x.c[i][j] != y.c[i][j])\n\t\t\t\treturn x.c[i][j] < y.c[i][j];\n\treturn 0;\n}\nstruct node{ int x, y; };\n\nvector<node> b[N * N];\nvector<int> p[N * N]; \nint a[N][N], c[N][N], h[N][N], h1[N][N], h2[N][N];\nint n, cnt = 0, tot = 0;\n\nint read() {\n\tint x = 0, f = 1;\n\tchar c = 0;\n\tfor (; !isdigit(c); c=getchar()) if(c == '-') f = -1;\n\tfor (; isdigit(c); c=getchar()) x = x * 10 + c - 48;\n\treturn x * f;\n}\nint factor(int x) {\n\tint t = 0;\n\tfor (int i = 1; i * i <= x; i++)\n\t\tt += (int)(x % i == 0);\n\treturn t;\n}\nbool cmp(vector<node> x, vector<node> y) {\n\tif (x.size() == y.size())\n\t\treturn factor(x[0].x) <= factor(y[0].x);\n\treturn x.size() < y.size();\n}\nvoid divide(int t, int x){\n\tfor (int i = 1; i <= n; i++)\n\t\tif (x % i == 0) p[t].push_back(i);\n}\nvoid dfs(int x, int y) {\n\th[x][y] = 1;\n\tb[cnt].push_back((node){ x, y });\n\tfor (int i = 0; i < 4; i++) {\n\t\tint tx = x + dx[i];\n\t\tint ty = y + dy[i];\n\t\tif (tx > 0 && tx <= n && ty > 0 && \n\t\t\tty <= n && !h[tx][ty] &&\n\t\t\ta[tx][ty] == a[x][y])\n\t\t\tdfs(tx, ty);\n\t}\n}\nvoid work(int dep);\nvoid fillp(int t, int dep, int s, int tot) {\n\tif (dep > tot) work(t + 1);\n\telse {\n\t\tint x=b[t][dep].x, y = b[t][dep].y;\n\t\tfor (int i = 0; i < p[t].size(); i++) {\n\t\t\tint u=p[t][i];\n\t\t\tif ((s == u || dep < tot) && s % u == 0 &&\n\t\t\t\t!h1[x][u] && !h2[y][u]){\n\t\t\t\th1[x][u] = 1；\n\t\t\t\th2[y][u] = 1;\n\t\t\t\tc[x][y] = u;\n\t\t\t\tfillp(t, dep + 1, s / u, tot);\n\t\t\t\tc[x][y] = 0;\n\t\t\t\th1[x][u] = 0；\n\t\t\t\th2[y][u]=0;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid work(int dep) {\n\tif (dep > cnt) {\n\t\ttot++;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tans[tot].c[i][j] = c[i][j];\n\t} else {\n\t\tint num=b[dep][0].x；\n\t\tint tot=b[dep].size() - 1;\n\t\tfillp(dep, 1, num, tot);\n\t}\n}\nint main() {\n\tfreopen(\"kenken.in\", \"r\", stdin);\n\tfreopen(\"kenken.out\", \"w\", stdout); \n\tn = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\ta[i][j] = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tif (!h[i][j]) {\n\t\t\t\tcnt++;\n\t\t\t\tb[cnt].push_back((node){ a[i][j], 0 });\n\t\t\t\tdfs(i, j);\n\t\t\t}\n\tsort(b + 1, b + cnt + 1, cmp);\n\tfor (int i = 1; i <= cnt; i++)\n\t\tdivide(i, b[i][0].x);\n\twork(1);\n\tcout << tot << \"\\n\";\n\tnode2 t = ans[1];\n\tfor (int i = 2; i <= tot; i++)\n\t\tt = min(t, ans[i]);\n\tfor (int i = 1;i <= n; i++){\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tcout << t.c[i][j] << \" \";\n\t\tcout << t.c[i][n] << \"\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n\n### 本次考试总结\n\nToo young, too simple, sometimes naive......还是要提高知识水平和编程素养，防止考试时 GG。\n\n\n---\n\n","source":"_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从.md","raw":"---\ntitle: '[NOIP 模拟] 2018-8-8 题解: 爆零日，我该何去何从...'\ndate: 2018-08-08 20:39:18\ntags:\n\t- NOIP 模拟\n\t- 题解\n\t- 神题\n\t- 爆零日\ncategories: NOIP\nmathjax: true\ncopyright: true\n---\n\n### 写在前面\n\n今天的题似乎是 Day1 的题，然而却是压力山大，从第一题开始就崩，第二题考场上无脑 Dijkstra 求最短路，第三题更是懵逼（考后听说用 Dancing Link 做的时候彻底崩溃），总之，今天四十分，与爆零相差无几，所以这次在写题解的同时，还是会写一点考试技巧的，尤其是第一题和第二题（原谅我知识水平实在不够，对第三题仍然懵逼）。\n<!-- more -->\n### T1 动态仙人掌(dinosaur.cpp/c/pas)\n***——玩了这么多次小恐龙，没想到它还会报复我***\n\n**[题目描述]**\n\n由于 Beny 做的烧网线实验，Fife 家断网了。\nFife 照常打开了 Google Chrome，由于断网，他看到了以下内容：\n\n<div style=\"align: center\"> <img src=\"pic1.jpg\"/> </div>\n\n看 到 这 个 简 单 而 又 有 趣 的 游 戏 ， 他 玩 了 起 来 。 然 后 ：\n\n<div style=\"align: center\"> <img src=\"pic2.jpg\"/> </div>\n\nFife 永远没有 gameover，他觉得这个游戏太简单了，现在他想考考你。小恐龙在数轴上原点出发向右运动，速度为$1$个单位每秒。现在你知道每一个仙人掌的位置$p[i]$和高度$h[i]$，且没有怪鸟突袭，请你控制小恐龙跳跃，使它能跳过最后一个仙人掌且跳跃的最大高度最小。为了送温暖简化问题，跳跃满足以下规则：它的跳跃路线为严格的与地面夹角为$45$度的直线，它在平地上能随时起跳，它能在起点和落地时刻瞬间起跳。你能控制它起跳的时刻和下落的时刻，下落时它会沿与地面夹角为$45$度的直线下降。小恐龙能跳过一个仙人掌当且仅当它在这个仙人掌的位置时的高度大于等于仙人掌的高度。 \n\n**[输入]**\n\n\t第 1 行 1 个正整数 n\n\t接下来 n 行每行两个正整数 p[i]和 h[i],为第 i 个仙人掌的位置和高度，\n\t不保证 p[i]单调递增，\n\t可能会有两个仙人掌在同一位置。 \n\n**[输出]**\n\n\t你需要控制小恐龙跳跃，使它能跳过所有仙人掌，且跳跃的最大高度最小，\n\t输出这个高度，\n\t保留 1 位小数，如果无解，输出-1\n\n**[样例输入]**\n\n\t5\n\t5 2\n\t9 3\n\t13 2\n\t19 3\n\t20 1\n\n**[样例输出]**\n\n\t6.0\n\n**[数据规模]**\n\n\t对于 30%的数据：n<=200, p[i] <= 1000, h[i] <= 100\n\t对于 60%的数据：n<= 50000, p[i] <= 3000000, h[i] <= 500\n\t对于 100%的数据：n <= 300000, p[i] < 2^31, h[i] <=40000, 数据保证无需使用 longlong 或 int64\n\n**[题解]**\n\n看到这是第一道题，心想，这一定很简单，只要贪心就行了，一堆判断，然后信心满满地提交......最后只对了一个点......此处附上 **WA 代码**:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 310000\n#define max(a, b) (a > b ? a : b)\n#define INF 0x3f3f3f3f\n\nint n, p[maxn], h[maxn];\nbitset<maxn> goDown;\ndouble ans = -INF;\n\nvoid init() {\n\tgoDown.set();\n\tmemset(h, 0, sizeof(h));\n\tp[0] = 0;\n}\n\nvoid judgeDown(int i) {\n\tif (h[i] >= h[i + 1] + p[i + 1] - p[i]) goDown[i] = 1;\n\telse if (h[i] + h[i + 1] <= p[i + 1] - p[i]) goDown[i] = 1;\n\telse goDown[i] = 0;\n}\n\nbool judgeCan(int i) {\n\tif (p[i] - p[i - 1] + h[i - 1] < h[i]) return false;\n\telse return true;\n}\n\n// 以上两个 judge 函数是 WA 之精髓所在（雾）\n// 只考虑了相邻两个仙人掌的关系，如果在下降的时候撞到另外一个仙人掌\n// 那么小恐龙就 GG 了\n\ndouble calh(int x, int y) {\n\tif (h[x] > h[y] + p[y] - p[x] && x + 1 == y) return (double)h[x];\n\telse return (double)(p[y] - p[x] + h[x] + h[y]) / 2.0;\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"dinosaur.in\");\n\tofstream out(\"dinosaur.out\");\n\tin.tie(NULL);\n\t\n\tin >> n;\n\tinit();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tin >> p[i] >> h[i];\n\t\tif (!judgeCan(i)) {\n\t\t\tout << -1;\n\t\t\treturn 0;\n\t\t} else continue;\n\t}\n\tfor (int i = 1; i < n; ++i) judgeDown(i);\n\tint key = 1;\n\tdouble tmp;\n\tfor (int i = 1; i <= n && key <= n; ++i) {\n\t\tif (goDown[i]) {\n\t\t\tdouble tmp = calh(key, i);\n\t\t\tans = max(ans, tmp);\n\t\t\tkey = i + 1;\n\t\t\tif (p[i] + h[i] > p[i + 1]) key += 1;\n\t\t}\n\t}\n\tout << setprecision(1) << fixed << ans;\n\treturn 0;\n}\n\n// 这个实例告诉大家，贪心前先做好分析准备工作，否则就会像我这样......\n\n```\n\n那么到底该怎么做呢？\n\n由于这是一只理（bian）想（tai）化过的小恐龙，它只会与地面呈$45$度跳跃，而且可以无限升天，~~法力无边~~，所以我们可以从每一个仙人掌的跳跃边界来考虑：\n\n<div style=\"align: center\"> <img src=\"T1_1.jpg\"/> </div>\n\n考虑两种不同的仙人掌情况：\n\n<div style=\"align: center\"> <img src=\"T1_2.jpg\"/> </div>\n\n那么就有两种做法了，第一种，删去所有像绿色仙人掌那样的仙人掌，然后直接计算；第二种，也是标程的方法，逐个进行判断，维护 first 和 last 这两个值，分别表示一组跳跃（一次上和一次下）的左右边界，然后计算。\n\n**[参考代码]**\n\n```cpp\n// 注：本代码使用的是第二种方法\n// 使用第一种方法的同学可以使用类链表的方式来存储数据，加快效率\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 310000\n\nstruct segment { int l; int r; };\nint n, p, h;\ndouble ans = 0;\nsegment a[maxn];\nbool compare(segment a, segment b) {\n\treturn a.l < b.l || (a.l == b.l && a.r < b.r);\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tifstream in(\"dinosaur.in\");\n\tofstream out(\"dinosaur.out\");\n\tin.tie(NULL);\n\n\tin >> n;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tin >> p >> h;\n\t\ta[i].l = p - h;\n\t\ta[i].r = p + h;\n\t}\n\tsort(a + 1, a + n + 1, compare);\n\tif (a[1].l < 0) {\n\t\tcout << -1;\n\t\treturn 0;\n\t}\n\n\tint last = a[1].r;\n\tint first = a[1].l;\n\tfor (int i = 2; i <= n; ++i) {\n\t\tif (a[i].l < last) last = max(last, a[i].r);\n\t\telse {\n\t\t\tans = max(ans, (last - first) * 1.0 / 2.0);\n\t\t\tfirst = a[i].l;\n\t\t\tlast = a[i].r;\n\t\t}\n\t}\n\n\tans = max(ans, (last - first) * 1.0 / 2.0);\n\tout << fixed << setprecision(1) << ans;\n\n\treturn 0;\n}\n\n```\n\n**[评价]**\n\n其实思维难度并不大，主要是考验对算法是否掌握到位，譬如用贪心，这道题并不能从头贪到尾，那样会出问题，必须考虑所有可能情况，这也是本题样例的坑人之处所在，以后考试时，如果只有一个样例，那必须得小心出题老师出阴招，最好是自己~~脑滚键盘~~来出几个数据手算测试一下。\n\n### T2 相交(inter.cpp/c/pas)\n***——旧时 Dijkstra 堂前 O(mlog n)，飞入寻常 NOIER 家。***\n\n**[题目描述]**\n\n一棵大树下有$n$个巢穴，由$n-1$条双向道路连接，任意两个城市均可互相到达。\n大树附近有两群蚂蚁，每天早上，第一群蚂蚁会派一只蚂蚁到这棵树下，并在第$a$个巢穴到第$b$ 个巢穴间的最短路径上的每个巢穴留下气味。每天傍晚，第二群蚂蚁会派一只蚂蚁到这棵树下，并侦查第$c$个巢穴到第$d$个巢穴间的最短路径上是否有蚂蚁留下的气味。每天蚂蚁留下的气味会在当天深夜消失。 \n\n**[输入]**\n\n\t第一行一个正整数 n，含义如题所示。\n\t接下来 n-1 行，每行两个正整数 u,v，表示第 u 个巢穴和第 v 个巢穴间有一条双向道路。\n\t接下来一行一个正整数 q，表示天数。\n\t接下来 q 行，每行四个正整数 a,b,c,d，含义如题所示。 \n\n**[输出]**\n\n\tq 行，每行一个字符串。\n\t若第二群派出的蚂蚁侦查到蚂蚁留下的气味，则输出”YES”,否则输出”NO”\n\n**[样例输入]**\n\n\t样例输入 1\n\n\t8\n\t1 2\n\t1 3\n\t2 4\n\t2 5\n\t5 6\n\t5 7\n\t3 8\n\t4\n\t2 5 4 3\n\t5 3 8 8\n\t5 4 6 7\n\t4 8 6 7\n\n\t样例输入 2\n\n\t15\n\t2 1\n\t3 1\n\t4 2\n\t5 3\n\t6 2\n\t7 2\n\t8 5\n\t9 3\n\t10 6\n\t11 5\n\t12 7\n\t13 11\n\t14 1\n\t15 1\n\t5\n\t1 2 3 4\n\t4 7 1 9\n\t2 3 7 9\n\t2 6 7 8\n\t2 1 6 8\n\n**[样例输出]**\n\n\t样例输出 1\n\n\tYES\n\tNO\n\tYES\n\tNO\n\n\t样例输出 2\n\n\tYES\n\tNO\n\tYES\n\tYES\n\tYES\n\n**[数据规模]**\n\n\t对于 30%的数据 1<=n,q<=3000\n\t对于另外 20%的数据 第 i 条边连接第 i 个巢穴和第 i+个巢穴\n\t对于 100%的数据 1<=n,q<=100000\n\n**[题解]**\n\n首先讲一下我考试的时候是怎么想的，我想既然是最短路径，还是个图（当时没看出是树），那么 Dijkstra 无疑了，潇潇洒洒一百行打完，用了两个 bitset 再用了一个神奇的方法记录路径。好！就是这样，一定 **AC** 了！结果：**TLE**......附上 Dijkstra 暴力代码：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 110000\n#define maxq 110000\n#define NOE -1\n#define INF\t0x3f3f3f3f\n\nstruct edgeNode {\n\tint vertexFrom;\n\tint vertexTo;\n\tint edgeNext;\n\tbool weight;\n};\nstruct heapNode {\n\tint u, d;\n\tbool operator<(const heapNode& b) const {\n\t\treturn d > b.d;\n\t}\n};\n\nedgeNode edges[maxn];\nint heads[maxn];\nint numEdges = 0;\nint n, q, u, v, a, b, c, d;\nbool judge = true;\nbitset<maxn> smell1;\nbitset<maxn> smell2;\nint path[maxn];\nint dist[maxn];\npriority_queue<heapNode> Q;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\nvoid addEdge(int vertex1, int vertex2) {\n\tnumEdges++;\n\tedges[numEdges].vertexFrom = vertex1;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].weight = true;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\nvoid addDuplexEdge(int vertex1, int vertex2) {\n\taddEdge(vertex1, vertex2);\n\taddEdge(vertex2, vertex1);\n}\nvoid Dijkstra(int x) {\n\twhile (!Q.empty()) Q.pop();\n\tfor (int i = 1; i <= n; ++i) dist[i] = INF;\n\tfor (int i = 1; i <= n; ++i) path[i] = i;\n\tdist[x] = 0;\n\tQ.push((heapNode){ x, 0 });\n\twhile (!Q.empty()) {\n\t\theapNode f = Q.top();\n\t\tQ.pop();\n\t\tint u = f.u;\n\t\tint dis = f.d;\n\t\tif (dis != dist[u]) continue;\n\t\tfor (int i = heads[u]; i != NOE; i= edges[i].edgeNext) {\n\t\t\tint j = edges[i].vertexTo;\n\t\t\tint w = edges[i].weight;\n\t\t\tif (dist[j] > dist[u] + w) {\n\t\t\t\tdist[j] = dist[u] + w;\n\t\t\t\tpath[j] = u; // 记录路径\n\t\t\t\tQ.push((heapNode){ j, dist[j] });\n\t\t\t}\n\t\t}\n\t}\n}\nvoid updateSmell1(int a, int b) {\n\tint tmp = b;\n\twhile (tmp != a) {\n\t\tsmell1[tmp] = 1;\n\t\ttmp = path[tmp];\n\t}\n}\nvoid updateSmell2(int c, int d) {\n\tint tmp = d;\n\twhile (tmp != c) {\n\t\tsmell2[tmp] = 1;\n\t\ttmp = path[tmp];\n\t}\n}\n\nint main() {\n\tfreopen(\"inter.in\", \"r\", stdin);\n\tfreopen(\"inter.out\", \"w\", stdout);\n\t// fstream 不知怎么就不能取消 sync_with_stdio，为了加快速度只能使用 freopen\n\tinit();\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n - 1; ++i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\taddDuplexEdge(u, v);\n\t}\n\tscanf(\"%d\", &q);\n\tfor (int i = 1; i <= q; ++i) {\n\t\tsmell1.reset();\n\t\tsmell2.reset();\n\t\tscanf(\"%d%d%d%d\", &a, &b, &c, &d);\n\t\tif ((a == c && b == d) || (a == d && b == c)) {\n\t\t\tprintf(\"YES\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tsmell1[a] = 1;\n\t\tsmell2[c] = 1;\n\t\t// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE\n\t\tDijkstra(a);\n\t\tupdateSmell1(a, b);\n\t\tDijkstra(c);\n\t\tupdateSmell2(c, d);\n\t\t// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE\n\t\tjudge = (smell1 & smell2).any();\n\t\tif (judge) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n\n\n```\n\n其实如果看出了这是棵树的话，是可以用广搜的......可以快不少。\n\n好了，说正解：就像上面所说的，这是一棵树（啥？你问我怎么看出的？仔细读题！！），所以获取最短距离一定是求两个点的 $LCA$ 了。那如何标记呢？？这是个好问题，一般我们都会去想标记经过的点，然而，如果用倍增 $LCA$ 求，一定会跳过经过的点，如果用朴素算法求的话......那还不如 $BFS$，那么我们就必须使用另外的方法了。\n\n首先我们画一棵树：\n\n<div style=\"align: center\"> <img src=\"T2_1.jpg\"/> </div>\n\n通过观察和举例，我们发现，只有当\n\n1. $a$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；\n2. $b$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；\n3. $c$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；\n4. $d$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；\n\n以上四者满足其一时才能够是 YES，否则就是 NO。\n\n为什么是这样？如何实现呢？\n首先思考：到达$a$，$b$两点必定经过它们的 $LCA$，那么，只要它们两点与另外两点的 $LCA $在一条链上（这个不是很严谨，这里的链指的是将树看成 $DAG$ 时，即若 $LCA(u, v) = v$ 时，$u$，$v$在一条链上），且它们两个点的 $LCA$ 深度比另外两点的深度小时，两条路径必有重叠的部分（如图，$d$与 $LCA(a, b)$ 在一条链上，且 $LCA(a, b)$ 的深度比 $LCA(c, d)$ 的深度大，所以两者路径必有交集）\n\n如此分析，代码也就呼之欲出了。\n\n**[参考代码]**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 110000\n#define NOE -1\n\nstruct edgeNode {\n\tint vertexTo;\n\tint edgeNext;\n};\n\nedgeNode edges[maxn << 1];\n// 注意由于是无向边，而前向星只能按照双向边处理，所以要乘二\nint heads[maxn];\nint numEdges = 0;\nint f[maxn][20], dep[maxn];\nint n, q, u, v, a, b, c, d;\n\nvoid init() { memset(heads, NOE, sizeof(heads)); }\n\nvoid addEdge(int vertex1, int vertex2) {\n\tnumEdges++;\n\tedges[numEdges].vertexTo = vertex2;\n\tedges[numEdges].edgeNext = heads[vertex1];\n\theads[vertex1] = numEdges;\n}\n\nvoid addDuplexEdge(int vertex1, int vertex2) {\n\taddEdge(vertex1, vertex2);\n\taddEdge(vertex2, vertex1);\n}\n\nvoid rDFS(int x, int fa) {\n\tf[x][0] = fa;\n\tdep[x] = dep[fa] + 1;\n\tfor (int i = 1; i <= 18; ++i) \n\t\tf[x][i] = f[f[x][i - 1]][i - 1];\n\tfor (int i = heads[x]; i != NOE; i = edges[i].edgeNext)\n\t\tif (edges[i]. vertexTo != fa)\n\t\t\trDFS(edges[i].vertexTo, x);\n}\n\nint LCA(int u, int v) {\n\tfor (int i = 18; i >= 0; --i)\n\t\tif (dep[f[u][i]] >= dep[v])\n\t\t\tu = f[u][i];\n\tfor (int i = 18; i >= 0; --i)\n\t\tif (dep[f[v][i]] >= dep[u])\n\t\t\tv = f[v][i];\n\tif (u == v) return u;\n\tfor (int i = 18; i >= 0; --i)\n\t\tif (f[u][i] != f[v][i]) {\n\t\t\tu = f[u][i];\n\t\t\tv = f[v][i];\n\t\t}\n\n\treturn f[u][0];\n}\n// 找 LCA\n\nbool inOneChain(int u, int v, int w) {\n\treturn (LCA(u, w) == w) && (dep[w] >= dep[v]);\n\t// 判断链和深度关系\n}\n\nbool judge(int a0, int b0, int c0, int d0) {\n\tint lca1 = LCA(a0, b0);\n\tint lca2 = LCA(c0, d0);\n\treturn (inOneChain(a0, lca1, lca2) || inOneChain(b0, lca1, lca2)\n\t\t|| inOneChain(c0, lca2, lca1) || inOneChain(d0, lca2, lca1));\n\t// 四者只要满足其一就会有交集，所以取或就行\n}\n\n\nint main() {\n\tfreopen(\"inter.in\", \"r\", stdin);\n\tfreopen(\"inter.out\", \"w\", stdout);\n\t// 我也不知道为什么，fstream 一关掉同步就会崩，无奈只能用 freopen\n\tscanf(\"%d\", &n);\n\tinit();\n\t// 循环时 i 只能到 n - 1，还是提醒仔细读题\n\tfor (int i = 1; i < n; ++i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\taddDuplexEdge(u, v);\n\t}\n\tmemset(f, 0, sizeof(f)); // 别忘记初始化\n\trDFS(1, 0);\n\tscanf(\"%d\", &q);\n\tfor (int i = 1; i <= q; ++i) {\n\t\tscanf(\"%d%d%d%d\", &a, &b, &c, &d);\n\t\tif (judge(a, b, c, d)) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n\n```\n\n**[评价]**\n\n思维难度较大，想到求交集的方法后仍然要画很多图来总结规律，否则规律很有可能是错误的或者是片面的。再次提醒仔细读题，因为题目中包含了很多隐藏条件，这些隐藏条件也尤为重要，不管是对正解还是对~~暴力~~朴素算法来说，都可以提高效率。这是一道难题，还是一道坑题。\n\n\n### T3 聪明格(kenken.cpp/c/pas)\n\n**[题目描述]**\n聪明格是一种数字游戏，又堪称升级版的数独，诞生日本。它在数学上的要求比数独要高得多，它把数独规则与加减乘除四则运算相结合，使大脑在各种谜题中来回穿梭。\n\n它的规则是这样的：\n有一个 $n\\times n$ 的棋盘，每个格子里填一个在 1~n 范围内的数，使得每行每列没有重复的数字，(即 1~n 每个数在每行和每列各出现一次)，且满足下列条件:\n\n<div style=\"align: center\"> <img src=\"pic3.jpg\"/> </div>\n<div style=\"align: center\"> <img src=\"pic4.jpg\"/> </div>\n\n现在给你一个 $n\\times n$ 的棋盘，让你完成它，并输出解的个数和字典序最小的方案。数据保证一定有解。 \n\n**[输入]**\n\n\t第一行一个正整数 n，表示棋盘的行数和列数。\n\t接下来 n 行，每行 n 个正整数。表示：相同数字构成了许多个连通块，\n\t假设这个四连通块内每个数字都为 a,那么你在这些格子上填的数的乘积\n\t应该等于 a。（具体描述见样例）\n\n**[输出]**\n\n\t输出共 n+1 行，第一行输出解的个数\n\t接下来 n 行，每行 n 个正整数。表示 n*n 的矩阵里每个数字的值\n\t（字典序最小的方案）。 \n\n**[输入样例 1]**\n\n\t4\n\t6 6 1 144\n\t6 2 144 144\n\t4 2 144 4\n\t12 12 4 4\n\t注：此样例所对应 4*4 的棋盘即为上图。 \n\n**[输出样例 1]**\n\n\t1\n\t2 3 1 4\n\t1 2 4 3\n\t4 1 3 2\n\t3 4 2 1\n\n**[输入样例 2]**\n\n\t3\n\t12 12 18\n\t12 12 18\n\t18 18 18\n\n**[输出样例 2]**\n\n\t4\n\t1 2 3\n\t2 3 1\n\t3 1 2\n\n**[输入样例 3]**\n\n\t9\n\t32353542 4254 54 544\n\t322735576 10108108 1084\n\t927576576 1040 40 1008 1008\n\t9270576576 814 14 1008 1008\n\t142702705768105 3283\n\t14426882727 105 32810\n\t302688268880 6105 63 6310\n\t30 2688 12680 8024 3 639\n\t66126126 126 24 24 40 40\n\n**[输出样例 3]**\n\n\t1\n\t8 1 5 6 7 9 2 3 4\n\t4 3 7 8 5 6 9 2 1\n\t1 9 4 3 2 8 5 6 7\n\t9 5 3 1 8 2 7 4 6\n\t7 6 9 2 1 5 4 8 3\n\t2 4 6 9 3 7 8 1 5\n\t5 7 8 4 6 3 1 9 2\n\t6 8 2 5 4 1 3 7 9\n\t3 2 1 7 9 4 6 5 8\n\n**[数据规模]**\n\n| 测试点 | n= | 输入矩阵中不同种类数字个数 |\n|:-------:|:--:|:--------------------:|\n| 1-2  | 3 | >=3  |\n| 3-4  | 5 | >=10 |\n| 5-7  | 9 | >=30 |\n| 8-10 | 9 | >=20 |\n\n\t100% 的数据满足，矩阵中每个数字<=100,000，合法棋盘个数（解的个数）<=300\n\n**[题解]**\n\n这里先不多说了，关于舞蹈链我在后面的博客中会详细讲解，此处直接贴标程。\n\n**[参考代码]**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std; \nconst int N=11,M=510;\nconst int dx[4]={1,0,-1,0};\nconst int dy[4]={0,1,0,-1};\nstruct node2{ int c[N][N]; } ans[M];\nbool operator< (node2 x,node2 y){\n\tfor(int i = 1; i < N; i++)\n\t\tfor(int j = 1; j<N; j++)\n\t\t\tif(x.c[i][j] != y.c[i][j])\n\t\t\t\treturn x.c[i][j] < y.c[i][j];\n\treturn 0;\n}\nstruct node{ int x, y; };\n\nvector<node> b[N * N];\nvector<int> p[N * N]; \nint a[N][N], c[N][N], h[N][N], h1[N][N], h2[N][N];\nint n, cnt = 0, tot = 0;\n\nint read() {\n\tint x = 0, f = 1;\n\tchar c = 0;\n\tfor (; !isdigit(c); c=getchar()) if(c == '-') f = -1;\n\tfor (; isdigit(c); c=getchar()) x = x * 10 + c - 48;\n\treturn x * f;\n}\nint factor(int x) {\n\tint t = 0;\n\tfor (int i = 1; i * i <= x; i++)\n\t\tt += (int)(x % i == 0);\n\treturn t;\n}\nbool cmp(vector<node> x, vector<node> y) {\n\tif (x.size() == y.size())\n\t\treturn factor(x[0].x) <= factor(y[0].x);\n\treturn x.size() < y.size();\n}\nvoid divide(int t, int x){\n\tfor (int i = 1; i <= n; i++)\n\t\tif (x % i == 0) p[t].push_back(i);\n}\nvoid dfs(int x, int y) {\n\th[x][y] = 1;\n\tb[cnt].push_back((node){ x, y });\n\tfor (int i = 0; i < 4; i++) {\n\t\tint tx = x + dx[i];\n\t\tint ty = y + dy[i];\n\t\tif (tx > 0 && tx <= n && ty > 0 && \n\t\t\tty <= n && !h[tx][ty] &&\n\t\t\ta[tx][ty] == a[x][y])\n\t\t\tdfs(tx, ty);\n\t}\n}\nvoid work(int dep);\nvoid fillp(int t, int dep, int s, int tot) {\n\tif (dep > tot) work(t + 1);\n\telse {\n\t\tint x=b[t][dep].x, y = b[t][dep].y;\n\t\tfor (int i = 0; i < p[t].size(); i++) {\n\t\t\tint u=p[t][i];\n\t\t\tif ((s == u || dep < tot) && s % u == 0 &&\n\t\t\t\t!h1[x][u] && !h2[y][u]){\n\t\t\t\th1[x][u] = 1；\n\t\t\t\th2[y][u] = 1;\n\t\t\t\tc[x][y] = u;\n\t\t\t\tfillp(t, dep + 1, s / u, tot);\n\t\t\t\tc[x][y] = 0;\n\t\t\t\th1[x][u] = 0；\n\t\t\t\th2[y][u]=0;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid work(int dep) {\n\tif (dep > cnt) {\n\t\ttot++;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tans[tot].c[i][j] = c[i][j];\n\t} else {\n\t\tint num=b[dep][0].x；\n\t\tint tot=b[dep].size() - 1;\n\t\tfillp(dep, 1, num, tot);\n\t}\n}\nint main() {\n\tfreopen(\"kenken.in\", \"r\", stdin);\n\tfreopen(\"kenken.out\", \"w\", stdout); \n\tn = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\ta[i][j] = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tif (!h[i][j]) {\n\t\t\t\tcnt++;\n\t\t\t\tb[cnt].push_back((node){ a[i][j], 0 });\n\t\t\t\tdfs(i, j);\n\t\t\t}\n\tsort(b + 1, b + cnt + 1, cmp);\n\tfor (int i = 1; i <= cnt; i++)\n\t\tdivide(i, b[i][0].x);\n\twork(1);\n\tcout << tot << \"\\n\";\n\tnode2 t = ans[1];\n\tfor (int i = 2; i <= tot; i++)\n\t\tt = min(t, ans[i]);\n\tfor (int i = 1;i <= n; i++){\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tcout << t.c[i][j] << \" \";\n\t\tcout << t.c[i][n] << \"\\n\";\n\t}\n\treturn 0;\n}\n\n```\n\n\n### 本次考试总结\n\nToo young, too simple, sometimes naive......还是要提高知识水平和编程素养，防止考试时 GG。\n\n\n---\n\n","slug":"NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从","published":1,"updated":"2018-09-16T04:14:28.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmssgbuh004hrgc8uzayl5nk","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>今天的题似乎是 Day1 的题，然而却是压力山大，从第一题开始就崩，第二题考场上无脑 Dijkstra 求最短路，第三题更是懵逼（考后听说用 Dancing Link 做的时候彻底崩溃），总之，今天四十分，与爆零相差无几，所以这次在写题解的同时，还是会写一点考试技巧的，尤其是第一题和第二题（原谅我知识水平实在不够，对第三题仍然懵逼）。<br><a id=\"more\"></a></p>\n<h3 id=\"T1-动态仙人掌-dinosaur-cpp-c-pas\"><a href=\"#T1-动态仙人掌-dinosaur-cpp-c-pas\" class=\"headerlink\" title=\"T1 动态仙人掌(dinosaur.cpp/c/pas)\"></a>T1 动态仙人掌(dinosaur.cpp/c/pas)</h3><p><strong><em>——玩了这么多次小恐龙，没想到它还会报复我</em></strong></p>\n<p><strong>[题目描述]</strong></p>\n<p>由于 Beny 做的烧网线实验，Fife 家断网了。<br>Fife 照常打开了 Google Chrome，由于断网，他看到了以下内容：</p>\n<div style=\"align: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>看 到 这 个 简 单 而 又 有 趣 的 游 戏 ， 他 玩 了 起 来 。 然 后 ：</p>\n<div style=\"align: center\"> <img src=\"pic2.jpg\"> </div>\n\n<p>Fife 永远没有 gameover，他觉得这个游戏太简单了，现在他想考考你。小恐龙在数轴上原点出发向右运动，速度为$1$个单位每秒。现在你知道每一个仙人掌的位置$p[i]$和高度$h[i]$，且没有怪鸟突袭，请你控制小恐龙跳跃，使它能跳过最后一个仙人掌且跳跃的最大高度最小。为了送温暖简化问题，跳跃满足以下规则：它的跳跃路线为严格的与地面夹角为$45$度的直线，它在平地上能随时起跳，它能在起点和落地时刻瞬间起跳。你能控制它起跳的时刻和下落的时刻，下落时它会沿与地面夹角为$45$度的直线下降。小恐龙能跳过一个仙人掌当且仅当它在这个仙人掌的位置时的高度大于等于仙人掌的高度。 </p>\n<p><strong>[输入]</strong></p>\n<pre><code>第 1 行 1 个正整数 n\n接下来 n 行每行两个正整数 p[i]和 h[i],为第 i 个仙人掌的位置和高度，\n不保证 p[i]单调递增，\n可能会有两个仙人掌在同一位置。 \n</code></pre><p><strong>[输出]</strong></p>\n<pre><code>你需要控制小恐龙跳跃，使它能跳过所有仙人掌，且跳跃的最大高度最小，\n输出这个高度，\n保留 1 位小数，如果无解，输出-1\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>5\n5 2\n9 3\n13 2\n19 3\n20 1\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>6.0\n</code></pre><p><strong>[数据规模]</strong></p>\n<pre><code>对于 30%的数据：n&lt;=200, p[i] &lt;= 1000, h[i] &lt;= 100\n对于 60%的数据：n&lt;= 50000, p[i] &lt;= 3000000, h[i] &lt;= 500\n对于 100%的数据：n &lt;= 300000, p[i] &lt; 2^31, h[i] &lt;=40000, 数据保证无需使用 longlong 或 int64\n</code></pre><p><strong>[题解]</strong></p>\n<p>看到这是第一道题，心想，这一定很简单，只要贪心就行了，一堆判断，然后信心满满地提交……最后只对了一个点……此处附上 <strong>WA 代码</strong>:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 310000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p[maxn], h[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; goDown;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans = -INF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tgoDown.<span class=\"built_in\">set</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(h, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(h));</span><br><span class=\"line\">\tp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">judgeDown</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (h[i] &gt;= h[i + <span class=\"number\">1</span>] + p[i + <span class=\"number\">1</span>] - p[i]) goDown[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h[i] + h[i + <span class=\"number\">1</span>] &lt;= p[i + <span class=\"number\">1</span>] - p[i]) goDown[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> goDown[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judgeCan</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p[i] - p[i - <span class=\"number\">1</span>] + h[i - <span class=\"number\">1</span>] &lt; h[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上两个 judge 函数是 WA 之精髓所在（雾）</span></span><br><span class=\"line\"><span class=\"comment\">// 只考虑了相邻两个仙人掌的关系，如果在下降的时候撞到另外一个仙人掌</span></span><br><span class=\"line\"><span class=\"comment\">// 那么小恐龙就 GG 了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calh</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (h[x] &gt; h[y] + p[y] - p[x] &amp;&amp; x + <span class=\"number\">1</span> == y) <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)h[x];</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)(p[y] - p[x] + h[x] + h[y]) / <span class=\"number\">2.0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"dinosaur.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"dinosaur.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; p[i] &gt;&gt; h[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!judgeCan(i)) &#123;</span><br><span class=\"line\">\t\t\tout &lt;&lt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) judgeDown(i);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> key = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n &amp;&amp; key &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (goDown[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> tmp = calh(key, i);</span><br><span class=\"line\">\t\t\tans = max(ans, tmp);</span><br><span class=\"line\">\t\t\tkey = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p[i] + h[i] &gt; p[i + <span class=\"number\">1</span>]) key += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tout &lt;&lt; setprecision(<span class=\"number\">1</span>) &lt;&lt; fixed &lt;&lt; ans;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个实例告诉大家，贪心前先做好分析准备工作，否则就会像我这样......</span></span><br></pre></td></tr></table></figure>\n<p>那么到底该怎么做呢？</p>\n<p>由于这是一只理（bian）想（tai）化过的小恐龙，它只会与地面呈$45$度跳跃，而且可以无限升天，<del>法力无边</del>，所以我们可以从每一个仙人掌的跳跃边界来考虑：</p>\n<div style=\"align: center\"> <img src=\"T1_1.jpg\"> </div>\n\n<p>考虑两种不同的仙人掌情况：</p>\n<div style=\"align: center\"> <img src=\"T1_2.jpg\"> </div>\n\n<p>那么就有两种做法了，第一种，删去所有像绿色仙人掌那样的仙人掌，然后直接计算；第二种，也是标程的方法，逐个进行判断，维护 first 和 last 这两个值，分别表示一组跳跃（一次上和一次下）的左右边界，然后计算。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注：本代码使用的是第二种方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用第一种方法的同学可以使用类链表的方式来存储数据，加快效率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 310000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">segment</span> &#123;</span> <span class=\"keyword\">int</span> l; <span class=\"keyword\">int</span> r; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p, h;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">segment a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(segment a, segment b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.l &lt; b.l || (a.l == b.l &amp;&amp; a.r &lt; b.r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"dinosaur.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"dinosaur.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; p &gt;&gt; h;</span><br><span class=\"line\">\t\ta[i].l = p - h;</span><br><span class=\"line\">\t\ta[i].r = p + h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, compare);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a[<span class=\"number\">1</span>].l &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> last = a[<span class=\"number\">1</span>].r;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> first = a[<span class=\"number\">1</span>].l;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i].l &lt; last) last = max(last, a[i].r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tans = max(ans, (last - first) * <span class=\"number\">1.0</span> / <span class=\"number\">2.0</span>);</span><br><span class=\"line\">\t\t\tfirst = a[i].l;</span><br><span class=\"line\">\t\t\tlast = a[i].r;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tans = max(ans, (last - first) * <span class=\"number\">1.0</span> / <span class=\"number\">2.0</span>);</span><br><span class=\"line\">\tout &lt;&lt; fixed &lt;&lt; setprecision(<span class=\"number\">1</span>) &lt;&lt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>其实思维难度并不大，主要是考验对算法是否掌握到位，譬如用贪心，这道题并不能从头贪到尾，那样会出问题，必须考虑所有可能情况，这也是本题样例的坑人之处所在，以后考试时，如果只有一个样例，那必须得小心出题老师出阴招，最好是自己<del>脑滚键盘</del>来出几个数据手算测试一下。</p>\n<h3 id=\"T2-相交-inter-cpp-c-pas\"><a href=\"#T2-相交-inter-cpp-c-pas\" class=\"headerlink\" title=\"T2 相交(inter.cpp/c/pas)\"></a>T2 相交(inter.cpp/c/pas)</h3><p><strong><em>——旧时 Dijkstra 堂前 O(mlog n)，飞入寻常 NOIER 家。</em></strong></p>\n<p><strong>[题目描述]</strong></p>\n<p>一棵大树下有$n$个巢穴，由$n-1$条双向道路连接，任意两个城市均可互相到达。<br>大树附近有两群蚂蚁，每天早上，第一群蚂蚁会派一只蚂蚁到这棵树下，并在第$a$个巢穴到第$b$ 个巢穴间的最短路径上的每个巢穴留下气味。每天傍晚，第二群蚂蚁会派一只蚂蚁到这棵树下，并侦查第$c$个巢穴到第$d$个巢穴间的最短路径上是否有蚂蚁留下的气味。每天蚂蚁留下的气味会在当天深夜消失。 </p>\n<p><strong>[输入]</strong></p>\n<pre><code>第一行一个正整数 n，含义如题所示。\n接下来 n-1 行，每行两个正整数 u,v，表示第 u 个巢穴和第 v 个巢穴间有一条双向道路。\n接下来一行一个正整数 q，表示天数。\n接下来 q 行，每行四个正整数 a,b,c,d，含义如题所示。 \n</code></pre><p><strong>[输出]</strong></p>\n<pre><code>q 行，每行一个字符串。\n若第二群派出的蚂蚁侦查到蚂蚁留下的气味，则输出”YES”,否则输出”NO”\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>样例输入 1\n\n8\n1 2\n1 3\n2 4\n2 5\n5 6\n5 7\n3 8\n4\n2 5 4 3\n5 3 8 8\n5 4 6 7\n4 8 6 7\n\n样例输入 2\n\n15\n2 1\n3 1\n4 2\n5 3\n6 2\n7 2\n8 5\n9 3\n10 6\n11 5\n12 7\n13 11\n14 1\n15 1\n5\n1 2 3 4\n4 7 1 9\n2 3 7 9\n2 6 7 8\n2 1 6 8\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>样例输出 1\n\nYES\nNO\nYES\nNO\n\n样例输出 2\n\nYES\nNO\nYES\nYES\nYES\n</code></pre><p><strong>[数据规模]</strong></p>\n<pre><code>对于 30%的数据 1&lt;=n,q&lt;=3000\n对于另外 20%的数据 第 i 条边连接第 i 个巢穴和第 i+个巢穴\n对于 100%的数据 1&lt;=n,q&lt;=100000\n</code></pre><p><strong>[题解]</strong></p>\n<p>首先讲一下我考试的时候是怎么想的，我想既然是最短路径，还是个图（当时没看出是树），那么 Dijkstra 无疑了，潇潇洒洒一百行打完，用了两个 bitset 再用了一个神奇的方法记录路径。好！就是这样，一定 <strong>AC</strong> 了！结果：<strong>TLE</strong>……附上 Dijkstra 暴力代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxq 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF\t0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexFrom;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> weight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u, d;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> heapNode&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> d &gt; b.d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q, u, v, a, b, c, d;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> judge = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; smell1;</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; smell2;</span><br><span class=\"line\"><span class=\"keyword\">int</span> path[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];</span><br><span class=\"line\">priority_queue&lt;heapNode&gt; Q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexFrom = vertex1;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) dist[i] = INF;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) path[i] = i;</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.push((heapNode)&#123; x, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\theapNode f = Q.top();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u = f.u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> dis = f.d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dis != dist[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[u]; i != NOE; i= edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\tpath[j] = u; <span class=\"comment\">// 记录路径</span></span><br><span class=\"line\">\t\t\t\tQ.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateSmell1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = b;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmp != a) &#123;</span><br><span class=\"line\">\t\tsmell1[tmp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttmp = path[tmp];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateSmell2</span><span class=\"params\">(<span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = d;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmp != c) &#123;</span><br><span class=\"line\">\t\tsmell2[tmp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttmp = path[tmp];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// fstream 不知怎么就不能取消 sync_with_stdio，为了加快速度只能使用 freopen</span></span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</span><br><span class=\"line\">\t\taddDuplexEdge(u, v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\tsmell1.reset();</span><br><span class=\"line\">\t\tsmell2.reset();</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((a == c &amp;&amp; b == d) || (a == d &amp;&amp; b == c)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsmell1[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tsmell2[c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE</span></span><br><span class=\"line\">\t\tDijkstra(a);</span><br><span class=\"line\">\t\tupdateSmell1(a, b);</span><br><span class=\"line\">\t\tDijkstra(c);</span><br><span class=\"line\">\t\tupdateSmell2(c, d);</span><br><span class=\"line\">\t\t<span class=\"comment\">// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE</span></span><br><span class=\"line\">\t\tjudge = (smell1 &amp; smell2).any();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (judge) <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实如果看出了这是棵树的话，是可以用广搜的……可以快不少。</p>\n<p>好了，说正解：就像上面所说的，这是一棵树（啥？你问我怎么看出的？仔细读题！！），所以获取最短距离一定是求两个点的 $LCA$ 了。那如何标记呢？？这是个好问题，一般我们都会去想标记经过的点，然而，如果用倍增 $LCA$ 求，一定会跳过经过的点，如果用朴素算法求的话……那还不如 $BFS$，那么我们就必须使用另外的方法了。</p>\n<p>首先我们画一棵树：</p>\n<div style=\"align: center\"> <img src=\"T2_1.jpg\"> </div>\n\n<p>通过观察和举例，我们发现，只有当</p>\n<ol>\n<li>$a$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；</li>\n<li>$b$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；</li>\n<li>$c$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；</li>\n<li>$d$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；</li>\n</ol>\n<p>以上四者满足其一时才能够是 YES，否则就是 NO。</p>\n<p>为什么是这样？如何实现呢？<br>首先思考：到达$a$，$b$两点必定经过它们的 $LCA$，那么，只要它们两点与另外两点的 $LCA $在一条链上（这个不是很严谨，这里的链指的是将树看成 $DAG$ 时，即若 $LCA(u, v) = v$ 时，$u$，$v$在一条链上），且它们两个点的 $LCA$ 深度比另外两点的深度小时，两条路径必有重叠的部分（如图，$d$与 $LCA(a, b)$ 在一条链上，且 $LCA(a, b)$ 的深度比 $LCA(c, d)$ 的深度大，所以两者路径必有交集）</p>\n<p>如此分析，代码也就呼之欲出了。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">// 注意由于是无向边，而前向星只能按照双向边处理，所以要乘二</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn][<span class=\"number\">20</span>], dep[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q, u, v, a, b, c, d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rDFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tf[x][<span class=\"number\">0</span>] = fa;</span><br><span class=\"line\">\tdep[x] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">18</span>; ++i) </span><br><span class=\"line\">\t\tf[x][i] = f[f[x][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (edges[i]. vertexTo != fa)</span><br><span class=\"line\">\t\t\trDFS(edges[i].vertexTo, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dep[f[u][i]] &gt;= dep[v])</span><br><span class=\"line\">\t\t\tu = f[u][i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dep[f[v][i]] &gt;= dep[u])</span><br><span class=\"line\">\t\t\tv = f[v][i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (f[u][i] != f[v][i]) &#123;</span><br><span class=\"line\">\t\t\tu = f[u][i];</span><br><span class=\"line\">\t\t\tv = f[v][i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 找 LCA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">inOneChain</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (LCA(u, w) == w) &amp;&amp; (dep[w] &gt;= dep[v]);</span><br><span class=\"line\">\t<span class=\"comment\">// 判断链和深度关系</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> a0, <span class=\"keyword\">int</span> b0, <span class=\"keyword\">int</span> c0, <span class=\"keyword\">int</span> d0)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lca1 = LCA(a0, b0);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lca2 = LCA(c0, d0);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (inOneChain(a0, lca1, lca2) || inOneChain(b0, lca1, lca2)</span><br><span class=\"line\">\t\t|| inOneChain(c0, lca2, lca1) || inOneChain(d0, lca2, lca1));</span><br><span class=\"line\">\t<span class=\"comment\">// 四者只要满足其一就会有交集，所以取或就行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 我也不知道为什么，fstream 一关掉同步就会崩，无奈只能用 freopen</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"comment\">// 循环时 i 只能到 n - 1，还是提醒仔细读题</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</span><br><span class=\"line\">\t\taddDuplexEdge(u, v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(f)); <span class=\"comment\">// 别忘记初始化</span></span><br><span class=\"line\">\trDFS(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (judge(a, b, c, d)) <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>思维难度较大，想到求交集的方法后仍然要画很多图来总结规律，否则规律很有可能是错误的或者是片面的。再次提醒仔细读题，因为题目中包含了很多隐藏条件，这些隐藏条件也尤为重要，不管是对正解还是对<del>暴力</del>朴素算法来说，都可以提高效率。这是一道难题，还是一道坑题。</p>\n<h3 id=\"T3-聪明格-kenken-cpp-c-pas\"><a href=\"#T3-聪明格-kenken-cpp-c-pas\" class=\"headerlink\" title=\"T3 聪明格(kenken.cpp/c/pas)\"></a>T3 聪明格(kenken.cpp/c/pas)</h3><p><strong>[题目描述]</strong><br>聪明格是一种数字游戏，又堪称升级版的数独，诞生日本。它在数学上的要求比数独要高得多，它把数独规则与加减乘除四则运算相结合，使大脑在各种谜题中来回穿梭。</p>\n<p>它的规则是这样的：<br>有一个 $n\\times n$ 的棋盘，每个格子里填一个在 1~n 范围内的数，使得每行每列没有重复的数字，(即 1~n 每个数在每行和每列各出现一次)，且满足下列条件:</p>\n<div style=\"align: center\"> <img src=\"pic3.jpg\"> </div><br><div style=\"align: center\"> <img src=\"pic4.jpg\"> </div>\n\n<p>现在给你一个 $n\\times n$ 的棋盘，让你完成它，并输出解的个数和字典序最小的方案。数据保证一定有解。 </p>\n<p><strong>[输入]</strong></p>\n<pre><code>第一行一个正整数 n，表示棋盘的行数和列数。\n接下来 n 行，每行 n 个正整数。表示：相同数字构成了许多个连通块，\n假设这个四连通块内每个数字都为 a,那么你在这些格子上填的数的乘积\n应该等于 a。（具体描述见样例）\n</code></pre><p><strong>[输出]</strong></p>\n<pre><code>输出共 n+1 行，第一行输出解的个数\n接下来 n 行，每行 n 个正整数。表示 n*n 的矩阵里每个数字的值\n（字典序最小的方案）。 \n</code></pre><p><strong>[输入样例 1]</strong></p>\n<pre><code>4\n6 6 1 144\n6 2 144 144\n4 2 144 4\n12 12 4 4\n注：此样例所对应 4*4 的棋盘即为上图。 \n</code></pre><p><strong>[输出样例 1]</strong></p>\n<pre><code>1\n2 3 1 4\n1 2 4 3\n4 1 3 2\n3 4 2 1\n</code></pre><p><strong>[输入样例 2]</strong></p>\n<pre><code>3\n12 12 18\n12 12 18\n18 18 18\n</code></pre><p><strong>[输出样例 2]</strong></p>\n<pre><code>4\n1 2 3\n2 3 1\n3 1 2\n</code></pre><p><strong>[输入样例 3]</strong></p>\n<pre><code>9\n32353542 4254 54 544\n322735576 10108108 1084\n927576576 1040 40 1008 1008\n9270576576 814 14 1008 1008\n142702705768105 3283\n14426882727 105 32810\n302688268880 6105 63 6310\n30 2688 12680 8024 3 639\n66126126 126 24 24 40 40\n</code></pre><p><strong>[输出样例 3]</strong></p>\n<pre><code>1\n8 1 5 6 7 9 2 3 4\n4 3 7 8 5 6 9 2 1\n1 9 4 3 2 8 5 6 7\n9 5 3 1 8 2 7 4 6\n7 6 9 2 1 5 4 8 3\n2 4 6 9 3 7 8 1 5\n5 7 8 4 6 3 1 9 2\n6 8 2 5 4 1 3 7 9\n3 2 1 7 9 4 6 5 8\n</code></pre><p><strong>[数据规模]</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">测试点</th>\n<th style=\"text-align:center\">n=</th>\n<th style=\"text-align:center\">输入矩阵中不同种类数字个数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1-2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">&gt;=3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3-4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">&gt;=10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5-7</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">&gt;=30</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8-10</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">&gt;=20</td>\n</tr>\n</tbody>\n</table>\n<pre><code>100% 的数据满足，矩阵中每个数字&lt;=100,000，合法棋盘个数（解的个数）&lt;=300\n</code></pre><p><strong>[题解]</strong></p>\n<p>这里先不多说了，关于舞蹈链我在后面的博客中会详细讲解，此处直接贴标程。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">11</span>,M=<span class=\"number\">510</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node2</span>&#123;</span> <span class=\"keyword\">int</span> c[N][N]; &#125; ans[M];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (node2 x,node2 y)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j&lt;N; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x.c[i][j] != y.c[i][j])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.c[i][j] &lt; y.c[i][j];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span> <span class=\"keyword\">int</span> x, y; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;node&gt; b[N * N];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; p[N * N]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N][N], c[N][N], h[N][N], h1[N][N], h2[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, cnt = <span class=\"number\">0</span>, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; !<span class=\"built_in\">isdigit</span>(c); c=getchar()) <span class=\"keyword\">if</span>(c == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(c); c=getchar()) x = x * <span class=\"number\">10</span> + c - <span class=\"number\">48</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">factor</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i * i &lt;= x; i++)</span><br><span class=\"line\">\t\tt += (<span class=\"keyword\">int</span>)(x % i == <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;node&gt; x, <span class=\"built_in\">vector</span>&lt;node&gt; y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x.size() == y.size())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> factor(x[<span class=\"number\">0</span>].x) &lt;= factor(y[<span class=\"number\">0</span>].x);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x.size() &lt; y.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>) p[t].push_back(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\th[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tb[cnt].push_back((node)&#123; x, y &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tx = x + dx[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ty = y + dy[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tx &gt; <span class=\"number\">0</span> &amp;&amp; tx &lt;= n &amp;&amp; ty &gt; <span class=\"number\">0</span> &amp;&amp; </span><br><span class=\"line\">\t\t\tty &lt;= n &amp;&amp; !h[tx][ty] &amp;&amp;</span><br><span class=\"line\">\t\t\ta[tx][ty] == a[x][y])</span><br><span class=\"line\">\t\t\tdfs(tx, ty);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fillp</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> tot)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dep &gt; tot) work(t + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=b[t][dep].x, y = b[t][dep].y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p[t].size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> u=p[t][i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((s == u || dep &lt; tot) &amp;&amp; s % u == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t!h1[x][u] &amp;&amp; !h2[y][u])&#123;</span><br><span class=\"line\">\t\t\t\th1[x][u] = <span class=\"number\">1</span>；</span><br><span class=\"line\">\t\t\t\th2[y][u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tc[x][y] = u;</span><br><span class=\"line\">\t\t\t\tfillp(t, dep + <span class=\"number\">1</span>, s / u, tot);</span><br><span class=\"line\">\t\t\t\tc[x][y] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\th1[x][u] = <span class=\"number\">0</span>；</span><br><span class=\"line\">\t\t\t\th2[y][u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dep &gt; cnt) &#123;</span><br><span class=\"line\">\t\ttot++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t\t\tans[tot].c[i][j] = c[i][j];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num=b[dep][<span class=\"number\">0</span>].x；</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tot=b[dep].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tfillp(dep, <span class=\"number\">1</span>, num, tot);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"kenken.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"kenken.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>); </span><br><span class=\"line\">\tn = read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t\ta[i][j] = read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!h[i][j]) &#123;</span><br><span class=\"line\">\t\t\t\tcnt++;</span><br><span class=\"line\">\t\t\t\tb[cnt].push_back((node)&#123; a[i][j], <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t\t\t\tdfs(i, j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\tsort(b + <span class=\"number\">1</span>, b + cnt + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">\t\tdivide(i, b[i][<span class=\"number\">0</span>].x);</span><br><span class=\"line\">\twork(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; tot &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\tnode2 t = ans[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tot; i++)</span><br><span class=\"line\">\t\tt = min(t, ans[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; t.c[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; t.c[i][n] &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本次考试总结\"><a href=\"#本次考试总结\" class=\"headerlink\" title=\"本次考试总结\"></a>本次考试总结</h3><p>Too young, too simple, sometimes naive……还是要提高知识水平和编程素养，防止考试时 GG。</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>今天的题似乎是 Day1 的题，然而却是压力山大，从第一题开始就崩，第二题考场上无脑 Dijkstra 求最短路，第三题更是懵逼（考后听说用 Dancing Link 做的时候彻底崩溃），总之，今天四十分，与爆零相差无几，所以这次在写题解的同时，还是会写一点考试技巧的，尤其是第一题和第二题（原谅我知识水平实在不够，对第三题仍然懵逼）。<br>","more":"</p>\n<h3 id=\"T1-动态仙人掌-dinosaur-cpp-c-pas\"><a href=\"#T1-动态仙人掌-dinosaur-cpp-c-pas\" class=\"headerlink\" title=\"T1 动态仙人掌(dinosaur.cpp/c/pas)\"></a>T1 动态仙人掌(dinosaur.cpp/c/pas)</h3><p><strong><em>——玩了这么多次小恐龙，没想到它还会报复我</em></strong></p>\n<p><strong>[题目描述]</strong></p>\n<p>由于 Beny 做的烧网线实验，Fife 家断网了。<br>Fife 照常打开了 Google Chrome，由于断网，他看到了以下内容：</p>\n<div style=\"align: center\"> <img src=\"pic1.jpg\"> </div>\n\n<p>看 到 这 个 简 单 而 又 有 趣 的 游 戏 ， 他 玩 了 起 来 。 然 后 ：</p>\n<div style=\"align: center\"> <img src=\"pic2.jpg\"> </div>\n\n<p>Fife 永远没有 gameover，他觉得这个游戏太简单了，现在他想考考你。小恐龙在数轴上原点出发向右运动，速度为$1$个单位每秒。现在你知道每一个仙人掌的位置$p[i]$和高度$h[i]$，且没有怪鸟突袭，请你控制小恐龙跳跃，使它能跳过最后一个仙人掌且跳跃的最大高度最小。为了送温暖简化问题，跳跃满足以下规则：它的跳跃路线为严格的与地面夹角为$45$度的直线，它在平地上能随时起跳，它能在起点和落地时刻瞬间起跳。你能控制它起跳的时刻和下落的时刻，下落时它会沿与地面夹角为$45$度的直线下降。小恐龙能跳过一个仙人掌当且仅当它在这个仙人掌的位置时的高度大于等于仙人掌的高度。 </p>\n<p><strong>[输入]</strong></p>\n<pre><code>第 1 行 1 个正整数 n\n接下来 n 行每行两个正整数 p[i]和 h[i],为第 i 个仙人掌的位置和高度，\n不保证 p[i]单调递增，\n可能会有两个仙人掌在同一位置。 \n</code></pre><p><strong>[输出]</strong></p>\n<pre><code>你需要控制小恐龙跳跃，使它能跳过所有仙人掌，且跳跃的最大高度最小，\n输出这个高度，\n保留 1 位小数，如果无解，输出-1\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>5\n5 2\n9 3\n13 2\n19 3\n20 1\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>6.0\n</code></pre><p><strong>[数据规模]</strong></p>\n<pre><code>对于 30%的数据：n&lt;=200, p[i] &lt;= 1000, h[i] &lt;= 100\n对于 60%的数据：n&lt;= 50000, p[i] &lt;= 3000000, h[i] &lt;= 500\n对于 100%的数据：n &lt;= 300000, p[i] &lt; 2^31, h[i] &lt;=40000, 数据保证无需使用 longlong 或 int64\n</code></pre><p><strong>[题解]</strong></p>\n<p>看到这是第一道题，心想，这一定很简单，只要贪心就行了，一堆判断，然后信心满满地提交……最后只对了一个点……此处附上 <strong>WA 代码</strong>:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 310000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p[maxn], h[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; goDown;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans = -INF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tgoDown.<span class=\"built_in\">set</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(h, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(h));</span><br><span class=\"line\">\tp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">judgeDown</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (h[i] &gt;= h[i + <span class=\"number\">1</span>] + p[i + <span class=\"number\">1</span>] - p[i]) goDown[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h[i] + h[i + <span class=\"number\">1</span>] &lt;= p[i + <span class=\"number\">1</span>] - p[i]) goDown[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> goDown[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judgeCan</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p[i] - p[i - <span class=\"number\">1</span>] + h[i - <span class=\"number\">1</span>] &lt; h[i]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上两个 judge 函数是 WA 之精髓所在（雾）</span></span><br><span class=\"line\"><span class=\"comment\">// 只考虑了相邻两个仙人掌的关系，如果在下降的时候撞到另外一个仙人掌</span></span><br><span class=\"line\"><span class=\"comment\">// 那么小恐龙就 GG 了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calh</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (h[x] &gt; h[y] + p[y] - p[x] &amp;&amp; x + <span class=\"number\">1</span> == y) <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)h[x];</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)(p[y] - p[x] + h[x] + h[y]) / <span class=\"number\">2.0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"dinosaur.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"dinosaur.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; p[i] &gt;&gt; h[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!judgeCan(i)) &#123;</span><br><span class=\"line\">\t\t\tout &lt;&lt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) judgeDown(i);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> key = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n &amp;&amp; key &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (goDown[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> tmp = calh(key, i);</span><br><span class=\"line\">\t\t\tans = max(ans, tmp);</span><br><span class=\"line\">\t\t\tkey = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p[i] + h[i] &gt; p[i + <span class=\"number\">1</span>]) key += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tout &lt;&lt; setprecision(<span class=\"number\">1</span>) &lt;&lt; fixed &lt;&lt; ans;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个实例告诉大家，贪心前先做好分析准备工作，否则就会像我这样......</span></span><br></pre></td></tr></table></figure>\n<p>那么到底该怎么做呢？</p>\n<p>由于这是一只理（bian）想（tai）化过的小恐龙，它只会与地面呈$45$度跳跃，而且可以无限升天，<del>法力无边</del>，所以我们可以从每一个仙人掌的跳跃边界来考虑：</p>\n<div style=\"align: center\"> <img src=\"T1_1.jpg\"> </div>\n\n<p>考虑两种不同的仙人掌情况：</p>\n<div style=\"align: center\"> <img src=\"T1_2.jpg\"> </div>\n\n<p>那么就有两种做法了，第一种，删去所有像绿色仙人掌那样的仙人掌，然后直接计算；第二种，也是标程的方法，逐个进行判断，维护 first 和 last 这两个值，分别表示一组跳跃（一次上和一次下）的左右边界，然后计算。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注：本代码使用的是第二种方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用第一种方法的同学可以使用类链表的方式来存储数据，加快效率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 310000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">segment</span> &#123;</span> <span class=\"keyword\">int</span> l; <span class=\"keyword\">int</span> r; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p, h;</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">segment a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(segment a, segment b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.l &lt; b.l || (a.l == b.l &amp;&amp; a.r &lt; b.r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tios::sync_with_stdio(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"dinosaur.in\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"dinosaur.out\"</span>)</span></span>;</span><br><span class=\"line\">\tin.tie(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin &gt;&gt; p &gt;&gt; h;</span><br><span class=\"line\">\t\ta[i].l = p - h;</span><br><span class=\"line\">\t\ta[i].r = p + h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, compare);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a[<span class=\"number\">1</span>].l &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> last = a[<span class=\"number\">1</span>].r;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> first = a[<span class=\"number\">1</span>].l;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i].l &lt; last) last = max(last, a[i].r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tans = max(ans, (last - first) * <span class=\"number\">1.0</span> / <span class=\"number\">2.0</span>);</span><br><span class=\"line\">\t\t\tfirst = a[i].l;</span><br><span class=\"line\">\t\t\tlast = a[i].r;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tans = max(ans, (last - first) * <span class=\"number\">1.0</span> / <span class=\"number\">2.0</span>);</span><br><span class=\"line\">\tout &lt;&lt; fixed &lt;&lt; setprecision(<span class=\"number\">1</span>) &lt;&lt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>其实思维难度并不大，主要是考验对算法是否掌握到位，譬如用贪心，这道题并不能从头贪到尾，那样会出问题，必须考虑所有可能情况，这也是本题样例的坑人之处所在，以后考试时，如果只有一个样例，那必须得小心出题老师出阴招，最好是自己<del>脑滚键盘</del>来出几个数据手算测试一下。</p>\n<h3 id=\"T2-相交-inter-cpp-c-pas\"><a href=\"#T2-相交-inter-cpp-c-pas\" class=\"headerlink\" title=\"T2 相交(inter.cpp/c/pas)\"></a>T2 相交(inter.cpp/c/pas)</h3><p><strong><em>——旧时 Dijkstra 堂前 O(mlog n)，飞入寻常 NOIER 家。</em></strong></p>\n<p><strong>[题目描述]</strong></p>\n<p>一棵大树下有$n$个巢穴，由$n-1$条双向道路连接，任意两个城市均可互相到达。<br>大树附近有两群蚂蚁，每天早上，第一群蚂蚁会派一只蚂蚁到这棵树下，并在第$a$个巢穴到第$b$ 个巢穴间的最短路径上的每个巢穴留下气味。每天傍晚，第二群蚂蚁会派一只蚂蚁到这棵树下，并侦查第$c$个巢穴到第$d$个巢穴间的最短路径上是否有蚂蚁留下的气味。每天蚂蚁留下的气味会在当天深夜消失。 </p>\n<p><strong>[输入]</strong></p>\n<pre><code>第一行一个正整数 n，含义如题所示。\n接下来 n-1 行，每行两个正整数 u,v，表示第 u 个巢穴和第 v 个巢穴间有一条双向道路。\n接下来一行一个正整数 q，表示天数。\n接下来 q 行，每行四个正整数 a,b,c,d，含义如题所示。 \n</code></pre><p><strong>[输出]</strong></p>\n<pre><code>q 行，每行一个字符串。\n若第二群派出的蚂蚁侦查到蚂蚁留下的气味，则输出”YES”,否则输出”NO”\n</code></pre><p><strong>[样例输入]</strong></p>\n<pre><code>样例输入 1\n\n8\n1 2\n1 3\n2 4\n2 5\n5 6\n5 7\n3 8\n4\n2 5 4 3\n5 3 8 8\n5 4 6 7\n4 8 6 7\n\n样例输入 2\n\n15\n2 1\n3 1\n4 2\n5 3\n6 2\n7 2\n8 5\n9 3\n10 6\n11 5\n12 7\n13 11\n14 1\n15 1\n5\n1 2 3 4\n4 7 1 9\n2 3 7 9\n2 6 7 8\n2 1 6 8\n</code></pre><p><strong>[样例输出]</strong></p>\n<pre><code>样例输出 1\n\nYES\nNO\nYES\nNO\n\n样例输出 2\n\nYES\nNO\nYES\nYES\nYES\n</code></pre><p><strong>[数据规模]</strong></p>\n<pre><code>对于 30%的数据 1&lt;=n,q&lt;=3000\n对于另外 20%的数据 第 i 条边连接第 i 个巢穴和第 i+个巢穴\n对于 100%的数据 1&lt;=n,q&lt;=100000\n</code></pre><p><strong>[题解]</strong></p>\n<p>首先讲一下我考试的时候是怎么想的，我想既然是最短路径，还是个图（当时没看出是树），那么 Dijkstra 无疑了，潇潇洒洒一百行打完，用了两个 bitset 再用了一个神奇的方法记录路径。好！就是这样，一定 <strong>AC</strong> 了！结果：<strong>TLE</strong>……附上 Dijkstra 暴力代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxq 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF\t0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexFrom;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> weight;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heapNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> u, d;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> heapNode&amp; b) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> d &gt; b.d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q, u, v, a, b, c, d;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> judge = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; smell1;</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; smell2;</span><br><span class=\"line\"><span class=\"keyword\">int</span> path[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[maxn];</span><br><span class=\"line\">priority_queue&lt;heapNode&gt; Q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexFrom = vertex1;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].weight = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) Q.pop();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) dist[i] = INF;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) path[i] = i;</span><br><span class=\"line\">\tdist[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.push((heapNode)&#123; x, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.empty()) &#123;</span><br><span class=\"line\">\t\theapNode f = Q.top();</span><br><span class=\"line\">\t\tQ.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u = f.u;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> dis = f.d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dis != dist[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[u]; i != NOE; i= edges[i].edgeNext) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = edges[i].vertexTo;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> w = edges[i].weight;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\tpath[j] = u; <span class=\"comment\">// 记录路径</span></span><br><span class=\"line\">\t\t\t\tQ.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateSmell1</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = b;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmp != a) &#123;</span><br><span class=\"line\">\t\tsmell1[tmp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttmp = path[tmp];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateSmell2</span><span class=\"params\">(<span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = d;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (tmp != c) &#123;</span><br><span class=\"line\">\t\tsmell2[tmp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ttmp = path[tmp];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// fstream 不知怎么就不能取消 sync_with_stdio，为了加快速度只能使用 freopen</span></span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</span><br><span class=\"line\">\t\taddDuplexEdge(u, v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\tsmell1.reset();</span><br><span class=\"line\">\t\tsmell2.reset();</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((a == c &amp;&amp; b == d) || (a == d &amp;&amp; b == c)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsmell1[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tsmell2[c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE</span></span><br><span class=\"line\">\t\tDijkstra(a);</span><br><span class=\"line\">\t\tupdateSmell1(a, b);</span><br><span class=\"line\">\t\tDijkstra(c);</span><br><span class=\"line\">\t\tupdateSmell2(c, d);</span><br><span class=\"line\">\t\t<span class=\"comment\">// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE</span></span><br><span class=\"line\">\t\tjudge = (smell1 &amp; smell2).any();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (judge) <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实如果看出了这是棵树的话，是可以用广搜的……可以快不少。</p>\n<p>好了，说正解：就像上面所说的，这是一棵树（啥？你问我怎么看出的？仔细读题！！），所以获取最短距离一定是求两个点的 $LCA$ 了。那如何标记呢？？这是个好问题，一般我们都会去想标记经过的点，然而，如果用倍增 $LCA$ 求，一定会跳过经过的点，如果用朴素算法求的话……那还不如 $BFS$，那么我们就必须使用另外的方法了。</p>\n<p>首先我们画一棵树：</p>\n<div style=\"align: center\"> <img src=\"T2_1.jpg\"> </div>\n\n<p>通过观察和举例，我们发现，只有当</p>\n<ol>\n<li>$a$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；</li>\n<li>$b$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；</li>\n<li>$c$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；</li>\n<li>$d$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；</li>\n</ol>\n<p>以上四者满足其一时才能够是 YES，否则就是 NO。</p>\n<p>为什么是这样？如何实现呢？<br>首先思考：到达$a$，$b$两点必定经过它们的 $LCA$，那么，只要它们两点与另外两点的 $LCA $在一条链上（这个不是很严谨，这里的链指的是将树看成 $DAG$ 时，即若 $LCA(u, v) = v$ 时，$u$，$v$在一条链上），且它们两个点的 $LCA$ 深度比另外两点的深度小时，两条路径必有重叠的部分（如图，$d$与 $LCA(a, b)$ 在一条链上，且 $LCA(a, b)$ 的深度比 $LCA(c, d)$ 的深度大，所以两者路径必有交集）</p>\n<p>如此分析，代码也就呼之欲出了。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 110000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NOE -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edgeNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> vertexTo;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> edgeNext;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">edgeNode edges[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">// 注意由于是无向边，而前向星只能按照双向边处理，所以要乘二</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> heads[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> numEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn][<span class=\"number\">20</span>], dep[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q, u, v, a, b, c, d;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(heads, NOE, <span class=\"keyword\">sizeof</span>(heads)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\tnumEdges++;</span><br><span class=\"line\">\tedges[numEdges].vertexTo = vertex2;</span><br><span class=\"line\">\tedges[numEdges].edgeNext = heads[vertex1];</span><br><span class=\"line\">\theads[vertex1] = numEdges;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDuplexEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> vertex1, <span class=\"keyword\">int</span> vertex2)</span> </span>&#123;</span><br><span class=\"line\">\taddEdge(vertex1, vertex2);</span><br><span class=\"line\">\taddEdge(vertex2, vertex1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rDFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tf[x][<span class=\"number\">0</span>] = fa;</span><br><span class=\"line\">\tdep[x] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">18</span>; ++i) </span><br><span class=\"line\">\t\tf[x][i] = f[f[x][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (edges[i]. vertexTo != fa)</span><br><span class=\"line\">\t\t\trDFS(edges[i].vertexTo, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dep[f[u][i]] &gt;= dep[v])</span><br><span class=\"line\">\t\t\tu = f[u][i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dep[f[v][i]] &gt;= dep[u])</span><br><span class=\"line\">\t\t\tv = f[v][i];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">18</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (f[u][i] != f[v][i]) &#123;</span><br><span class=\"line\">\t\t\tu = f[u][i];</span><br><span class=\"line\">\t\t\tv = f[v][i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 找 LCA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">inOneChain</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (LCA(u, w) == w) &amp;&amp; (dep[w] &gt;= dep[v]);</span><br><span class=\"line\">\t<span class=\"comment\">// 判断链和深度关系</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> a0, <span class=\"keyword\">int</span> b0, <span class=\"keyword\">int</span> c0, <span class=\"keyword\">int</span> d0)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lca1 = LCA(a0, b0);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lca2 = LCA(c0, d0);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (inOneChain(a0, lca1, lca2) || inOneChain(b0, lca1, lca2)</span><br><span class=\"line\">\t\t|| inOneChain(c0, lca2, lca1) || inOneChain(d0, lca2, lca1));</span><br><span class=\"line\">\t<span class=\"comment\">// 四者只要满足其一就会有交集，所以取或就行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"inter.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 我也不知道为什么，fstream 一关掉同步就会崩，无奈只能用 freopen</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\t<span class=\"comment\">// 循环时 i 只能到 n - 1，还是提醒仔细读题</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;u, &amp;v);</span><br><span class=\"line\">\t\taddDuplexEdge(u, v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(f)); <span class=\"comment\">// 别忘记初始化</span></span><br><span class=\"line\">\trDFS(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (judge(a, b, c, d)) <span class=\"built_in\">printf</span>(<span class=\"string\">\"YES\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NO\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>[评价]</strong></p>\n<p>思维难度较大，想到求交集的方法后仍然要画很多图来总结规律，否则规律很有可能是错误的或者是片面的。再次提醒仔细读题，因为题目中包含了很多隐藏条件，这些隐藏条件也尤为重要，不管是对正解还是对<del>暴力</del>朴素算法来说，都可以提高效率。这是一道难题，还是一道坑题。</p>\n<h3 id=\"T3-聪明格-kenken-cpp-c-pas\"><a href=\"#T3-聪明格-kenken-cpp-c-pas\" class=\"headerlink\" title=\"T3 聪明格(kenken.cpp/c/pas)\"></a>T3 聪明格(kenken.cpp/c/pas)</h3><p><strong>[题目描述]</strong><br>聪明格是一种数字游戏，又堪称升级版的数独，诞生日本。它在数学上的要求比数独要高得多，它把数独规则与加减乘除四则运算相结合，使大脑在各种谜题中来回穿梭。</p>\n<p>它的规则是这样的：<br>有一个 $n\\times n$ 的棋盘，每个格子里填一个在 1~n 范围内的数，使得每行每列没有重复的数字，(即 1~n 每个数在每行和每列各出现一次)，且满足下列条件:</p>\n<div style=\"align: center\"> <img src=\"pic3.jpg\"> </div><br><div style=\"align: center\"> <img src=\"pic4.jpg\"> </div>\n\n<p>现在给你一个 $n\\times n$ 的棋盘，让你完成它，并输出解的个数和字典序最小的方案。数据保证一定有解。 </p>\n<p><strong>[输入]</strong></p>\n<pre><code>第一行一个正整数 n，表示棋盘的行数和列数。\n接下来 n 行，每行 n 个正整数。表示：相同数字构成了许多个连通块，\n假设这个四连通块内每个数字都为 a,那么你在这些格子上填的数的乘积\n应该等于 a。（具体描述见样例）\n</code></pre><p><strong>[输出]</strong></p>\n<pre><code>输出共 n+1 行，第一行输出解的个数\n接下来 n 行，每行 n 个正整数。表示 n*n 的矩阵里每个数字的值\n（字典序最小的方案）。 \n</code></pre><p><strong>[输入样例 1]</strong></p>\n<pre><code>4\n6 6 1 144\n6 2 144 144\n4 2 144 4\n12 12 4 4\n注：此样例所对应 4*4 的棋盘即为上图。 \n</code></pre><p><strong>[输出样例 1]</strong></p>\n<pre><code>1\n2 3 1 4\n1 2 4 3\n4 1 3 2\n3 4 2 1\n</code></pre><p><strong>[输入样例 2]</strong></p>\n<pre><code>3\n12 12 18\n12 12 18\n18 18 18\n</code></pre><p><strong>[输出样例 2]</strong></p>\n<pre><code>4\n1 2 3\n2 3 1\n3 1 2\n</code></pre><p><strong>[输入样例 3]</strong></p>\n<pre><code>9\n32353542 4254 54 544\n322735576 10108108 1084\n927576576 1040 40 1008 1008\n9270576576 814 14 1008 1008\n142702705768105 3283\n14426882727 105 32810\n302688268880 6105 63 6310\n30 2688 12680 8024 3 639\n66126126 126 24 24 40 40\n</code></pre><p><strong>[输出样例 3]</strong></p>\n<pre><code>1\n8 1 5 6 7 9 2 3 4\n4 3 7 8 5 6 9 2 1\n1 9 4 3 2 8 5 6 7\n9 5 3 1 8 2 7 4 6\n7 6 9 2 1 5 4 8 3\n2 4 6 9 3 7 8 1 5\n5 7 8 4 6 3 1 9 2\n6 8 2 5 4 1 3 7 9\n3 2 1 7 9 4 6 5 8\n</code></pre><p><strong>[数据规模]</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">测试点</th>\n<th style=\"text-align:center\">n=</th>\n<th style=\"text-align:center\">输入矩阵中不同种类数字个数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1-2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">&gt;=3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3-4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">&gt;=10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5-7</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">&gt;=30</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8-10</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">&gt;=20</td>\n</tr>\n</tbody>\n</table>\n<pre><code>100% 的数据满足，矩阵中每个数字&lt;=100,000，合法棋盘个数（解的个数）&lt;=300\n</code></pre><p><strong>[题解]</strong></p>\n<p>这里先不多说了，关于舞蹈链我在后面的博客中会详细讲解，此处直接贴标程。</p>\n<p><strong>[参考代码]</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>; </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">11</span>,M=<span class=\"number\">510</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dy[<span class=\"number\">4</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node2</span>&#123;</span> <span class=\"keyword\">int</span> c[N][N]; &#125; ans[M];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (node2 x,node2 y)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j&lt;N; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x.c[i][j] != y.c[i][j])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> x.c[i][j] &lt; y.c[i][j];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span> <span class=\"keyword\">int</span> x, y; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;node&gt; b[N * N];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; p[N * N]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N][N], c[N][N], h[N][N], h1[N][N], h2[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, cnt = <span class=\"number\">0</span>, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; !<span class=\"built_in\">isdigit</span>(c); c=getchar()) <span class=\"keyword\">if</span>(c == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(c); c=getchar()) x = x * <span class=\"number\">10</span> + c - <span class=\"number\">48</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">factor</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i * i &lt;= x; i++)</span><br><span class=\"line\">\t\tt += (<span class=\"keyword\">int</span>)(x % i == <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;node&gt; x, <span class=\"built_in\">vector</span>&lt;node&gt; y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x.size() == y.size())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> factor(x[<span class=\"number\">0</span>].x) &lt;= factor(y[<span class=\"number\">0</span>].x);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x.size() &lt; y.size();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>) p[t].push_back(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\th[x][y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tb[cnt].push_back((node)&#123; x, y &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tx = x + dx[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ty = y + dy[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (tx &gt; <span class=\"number\">0</span> &amp;&amp; tx &lt;= n &amp;&amp; ty &gt; <span class=\"number\">0</span> &amp;&amp; </span><br><span class=\"line\">\t\t\tty &lt;= n &amp;&amp; !h[tx][ty] &amp;&amp;</span><br><span class=\"line\">\t\t\ta[tx][ty] == a[x][y])</span><br><span class=\"line\">\t\t\tdfs(tx, ty);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fillp</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> dep, <span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> tot)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dep &gt; tot) work(t + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=b[t][dep].x, y = b[t][dep].y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p[t].size(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> u=p[t][i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((s == u || dep &lt; tot) &amp;&amp; s % u == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t!h1[x][u] &amp;&amp; !h2[y][u])&#123;</span><br><span class=\"line\">\t\t\t\th1[x][u] = <span class=\"number\">1</span>；</span><br><span class=\"line\">\t\t\t\th2[y][u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tc[x][y] = u;</span><br><span class=\"line\">\t\t\t\tfillp(t, dep + <span class=\"number\">1</span>, s / u, tot);</span><br><span class=\"line\">\t\t\t\tc[x][y] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\th1[x][u] = <span class=\"number\">0</span>；</span><br><span class=\"line\">\t\t\t\th2[y][u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> dep)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dep &gt; cnt) &#123;</span><br><span class=\"line\">\t\ttot++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t\t\tans[tot].c[i][j] = c[i][j];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num=b[dep][<span class=\"number\">0</span>].x；</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tot=b[dep].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tfillp(dep, <span class=\"number\">1</span>, num, tot);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"kenken.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"kenken.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>); </span><br><span class=\"line\">\tn = read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t\ta[i][j] = read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!h[i][j]) &#123;</span><br><span class=\"line\">\t\t\t\tcnt++;</span><br><span class=\"line\">\t\t\t\tb[cnt].push_back((node)&#123; a[i][j], <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">\t\t\t\tdfs(i, j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\tsort(b + <span class=\"number\">1</span>, b + cnt + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">\t\tdivide(i, b[i][<span class=\"number\">0</span>].x);</span><br><span class=\"line\">\twork(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; tot &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\tnode2 t = ans[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= tot; i++)</span><br><span class=\"line\">\t\tt = min(t, ans[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= n; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; t.c[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; t.c[i][n] &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"本次考试总结\"><a href=\"#本次考试总结\" class=\"headerlink\" title=\"本次考试总结\"></a>本次考试总结</h3><p>Too young, too simple, sometimes naive……还是要提高知识水平和编程素养，防止考试时 GG。</p>\n<hr>"}],"PostAsset":[{"_id":"source/_posts/数论-OI-中素数有关的算法整理/pic2.png","slug":"pic2.png","post":"cjmssgbsx003brgc8pbuhcrmx","modified":1,"renderable":0},{"_id":"source/_posts/C-奇技淫巧-终极快速读入-输出/photo1.png","post":"cjmssgbfu0000rgc8s27hk25o","slug":"photo1.png","modified":1,"renderable":1},{"_id":"source/_posts/HEXO-hexo-中插入视频的方法/movie.mp4","slug":"movie.mp4","post":"cjmssgbn8000ergc83pw4pkei","modified":1,"renderable":0},{"_id":"source/_posts/NOIP-初赛-总结一波读程序写结果题目/photo1.jpg","post":"cjmssgbna000frgc8n8eiz6lz","slug":"photo1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/平衡树-Treap-总结/zigzag.png","post":"cjmssgbnp000urgc8o5wz4j3s","slug":"zigzag.png","modified":1,"renderable":1},{"_id":"source/_posts/猴排！？一道高考题！？出题人的无下限猴子专场/photo1.png","slug":"photo1.png","post":"cjmssgbnr000vrgc8w9tq4pk2","modified":1,"renderable":0},{"_id":"source/_posts/杂谈-编程规范那些事/pic1.jpg","slug":"pic1.jpg","post":"cjmssgbnv0010rgc8dwddrg62","modified":1,"renderable":0},{"_id":"source/_posts/HEXO-hexo-中加入-AdSense-广告服务的方法/photo1.png","post":"cjmssgbmz0008rgc8ghd2e2cr","slug":"photo1.png","modified":1,"renderable":1},{"_id":"source/_posts/HEXO-hexo-中加入-AdSense-广告服务的方法/pic1.jpg","slug":"pic1.jpg","post":"cjmssgbmz0008rgc8ghd2e2cr","modified":1,"renderable":0},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic1.jpg","post":"cjmssgbnw0013rgc890bcvq30","slug":"pic1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic2.jpg","post":"cjmssgbnw0013rgc890bcvq30","slug":"pic2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic3.jpg","post":"cjmssgbnw0013rgc890bcvq30","slug":"pic3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic4.jpg","post":"cjmssgbnw0013rgc890bcvq30","slug":"pic4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/算法-Manacher-算法求最长回文子串/pic5.jpg","post":"cjmssgbnw0013rgc890bcvq30","slug":"pic5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/HEXO-NexT-主题提高博客颜值/photo1.jpg","slug":"photo1.jpg","post":"cjmssgbro002zrgc8sxn3hwv1","modified":1,"renderable":0},{"_id":"source/_posts/NOIP-模拟-一次出卷老师把题目出反的模拟赛/photo1.png","post":"cjmssgbsu0038rgc87yo8uqqu","slug":"photo1.png","modified":1,"renderable":1},{"_id":"source/_posts/数论-OI-中素数有关的算法整理/pic1.png","post":"cjmssgbsx003brgc8pbuhcrmx","slug":"pic1.png","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/翻译1.jpg","post":"cjmssgbsk0034rgc84smog44f","slug":"翻译1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/翻译2.jpg","post":"cjmssgbsk0034rgc84smog44f","slug":"翻译2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/翻译3.jpg","post":"cjmssgbsk0034rgc84smog44f","slug":"翻译3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-6-题解-一次戏剧性的模拟测试/黑人问号.jpg","post":"cjmssgbsk0034rgc84smog44f","slug":"黑人问号.jpg","modified":1,"renderable":1},{"_id":"source/_posts/图论-图论基础知识/pic1.jpg","post":"cjmssgbsr0036rgc8qdzqrsrd","slug":"pic1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/图论-图论基础知识/pic2.jpg","post":"cjmssgbsr0036rgc8qdzqrsrd","slug":"pic2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/图论-图论基础知识/pic3.jpg","post":"cjmssgbsr0036rgc8qdzqrsrd","slug":"pic3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/图论-图论基础知识/pic4.jpg","slug":"pic4.jpg","post":"cjmssgbsr0036rgc8qdzqrsrd","modified":1,"renderable":0},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/T1_1.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"T1_1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/T1_2.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"T1_2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/T2_1.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"T2_1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic1.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"pic1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic2.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"pic2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic3.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"pic3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/pic4.jpg","post":"cjmssgbuh004hrgc8uzayl5nk","slug":"pic4.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjmssgbfu0000rgc8s27hk25o","category_id":"cjmssgbg50001rgc8tjvcppxh","_id":"cjmssgbgd0004rgc8qgxl0yr0"},{"post_id":"cjmssgbmw0006rgc8mz2vcabr","category_id":"cjmssgbn20009rgc84fu4x8gd","_id":"cjmssgbni000lrgc8a7634chk"},{"post_id":"cjmssgbmz0008rgc8ghd2e2cr","category_id":"cjmssgbnd000grgc8pr30fvrs","_id":"cjmssgbnn000rrgc86jjq7ts3"},{"post_id":"cjmssgbn4000crgc8vh8xas4t","category_id":"cjmssgbni000mrgc8c0jcsojh","_id":"cjmssgbnt000xrgc8qli8yyzb"},{"post_id":"cjmssgbn8000ergc83pw4pkei","category_id":"cjmssgbnd000grgc8pr30fvrs","_id":"cjmssgbnv0011rgc89w1xfps0"},{"post_id":"cjmssgbna000frgc8n8eiz6lz","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbo00018rgc8xh4smj5v"},{"post_id":"cjmssgbnv0010rgc8dwddrg62","category_id":"cjmssgbn20009rgc84fu4x8gd","_id":"cjmssgbo2001brgc8h1ccwbma"},{"post_id":"cjmssgbng000jrgc8ee0ea2xz","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbo3001ergc8xmegfmdr"},{"post_id":"cjmssgbnh000krgc8krczbhou","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbo5001jrgc8u1jwxm4q"},{"post_id":"cjmssgbnk000orgc8twic2j38","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbo6001mrgc8y4lrc6t3"},{"post_id":"cjmssgbnm000qrgc8ijn6k9g4","category_id":"cjmssgbo5001irgc8jfl4syqv","_id":"cjmssgbo8001qrgc89569secp"},{"post_id":"cjmssgbnp000urgc8o5wz4j3s","category_id":"cjmssgbo7001nrgc8esoch2w0","_id":"cjmssgbo9001vrgc8kq3jpbev"},{"post_id":"cjmssgbnr000vrgc8w9tq4pk2","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgboa001xrgc874g7whua"},{"post_id":"cjmssgbnt000zrgc88uigrepe","category_id":"cjmssgbo9001urgc8jyq87y5v","_id":"cjmssgbob0020rgc8on5rooxq"},{"post_id":"cjmssgbnw0013rgc890bcvq30","category_id":"cjmssgboa001yrgc8y3pola4i","_id":"cjmssgboc0023rgc8w3l4b8c8"},{"post_id":"cjmssgbny0016rgc8l4kh0avt","category_id":"cjmssgboa001yrgc8y3pola4i","_id":"cjmssgbod0026rgc8mumivzw6"},{"post_id":"cjmssgbro002zrgc8sxn3hwv1","category_id":"cjmssgbnd000grgc8pr30fvrs","_id":"cjmssgbso0035rgc8qfgg53ld"},{"post_id":"cjmssgbs30030rgc874o5vvz3","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbss0037rgc86bt8i1ot"},{"post_id":"cjmssgbsf0032rgc87miq6n9u","category_id":"cjmssgbg50001rgc8tjvcppxh","_id":"cjmssgbsw003argc8h3nctnsc"},{"post_id":"cjmssgbsk0034rgc84smog44f","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbsx003crgc8ieaz4my4"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","category_id":"cjmssgbo5001irgc8jfl4syqv","_id":"cjmssgbt0003frgc8846wvuhy"},{"post_id":"cjmssgbsu0038rgc87yo8uqqu","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbt1003irgc89remmld9"},{"post_id":"cjmssgbsx003brgc8pbuhcrmx","category_id":"cjmssgbo9001urgc8jyq87y5v","_id":"cjmssgbt2003krgc8p1rqy73s"},{"post_id":"cjmssgbsz003ergc86uhfuico","category_id":"cjmssgbo9001urgc8jyq87y5v","_id":"cjmssgbt2003nrgc867cw5hpn"},{"post_id":"cjmssgbuh004hrgc8uzayl5nk","category_id":"cjmssgbnt000wrgc8dzoqpz3a","_id":"cjmssgbuk004jrgc89upf83y3"}],"PostTag":[{"post_id":"cjmssgbfu0000rgc8s27hk25o","tag_id":"cjmssgbg70002rgc8f356gec6","_id":"cjmssgbga0003rgc8knb4qmow"},{"post_id":"cjmssgbmw0006rgc8mz2vcabr","tag_id":"cjmssgbn3000argc8xzkam18i","_id":"cjmssgbne000irgc8j8bkn2hc"},{"post_id":"cjmssgbmz0008rgc8ghd2e2cr","tag_id":"cjmssgbne000hrgc83mlc904t","_id":"cjmssgbnl000prgc8xbjjr8xc"},{"post_id":"cjmssgbn4000crgc8vh8xas4t","tag_id":"cjmssgbnj000nrgc8w3gwp8i6","_id":"cjmssgbny0015rgc8etq8lmef"},{"post_id":"cjmssgbn4000crgc8vh8xas4t","tag_id":"cjmssgbnn000trgc8nd24mj6i","_id":"cjmssgbo00019rgc86p0fgh3s"},{"post_id":"cjmssgbn4000crgc8vh8xas4t","tag_id":"cjmssgbnt000yrgc8xm7wkzno","_id":"cjmssgbo2001crgc837yq8lin"},{"post_id":"cjmssgbn8000ergc83pw4pkei","tag_id":"cjmssgbne000hrgc83mlc904t","_id":"cjmssgbo3001frgc8hs6p3vx1"},{"post_id":"cjmssgbna000frgc8n8eiz6lz","tag_id":"cjmssgbo1001argc8puspxysv","_id":"cjmssgbo5001hrgc80cl435db"},{"post_id":"cjmssgbng000jrgc8ee0ea2xz","tag_id":"cjmssgbo1001argc8puspxysv","_id":"cjmssgbo6001lrgc89e2w1hhp"},{"post_id":"cjmssgbnh000krgc8krczbhou","tag_id":"cjmssgbo1001argc8puspxysv","_id":"cjmssgbo7001prgc8eu6c0des"},{"post_id":"cjmssgbnk000orgc8twic2j38","tag_id":"cjmssgbo7001orgc8sb9i04td","_id":"cjmssgbo9001trgc87jsppzj8"},{"post_id":"cjmssgbnm000qrgc8ijn6k9g4","tag_id":"cjmssgbo8001srgc8poga81di","_id":"cjmssgbod0025rgc8i4iicori"},{"post_id":"cjmssgbnm000qrgc8ijn6k9g4","tag_id":"cjmssgboa001wrgc8fq3ioau1","_id":"cjmssgbod0027rgc8pl8pgqnw"},{"post_id":"cjmssgbnm000qrgc8ijn6k9g4","tag_id":"cjmssgbob001zrgc8f3l01upd","_id":"cjmssgboe0029rgc8gngi66ha"},{"post_id":"cjmssgbnm000qrgc8ijn6k9g4","tag_id":"cjmssgboc0022rgc8a9kvito6","_id":"cjmssgboe002argc8m4889mce"},{"post_id":"cjmssgbnp000urgc8o5wz4j3s","tag_id":"cjmssgboc0024rgc8ix23vmgi","_id":"cjmssgboh002drgc8de5vboxu"},{"post_id":"cjmssgbnp000urgc8o5wz4j3s","tag_id":"cjmssgboe0028rgc8xn9go0sb","_id":"cjmssgboh002ergc8avcmwqfo"},{"post_id":"cjmssgbnp000urgc8o5wz4j3s","tag_id":"cjmssgboe002brgc875n3nmsn","_id":"cjmssgboi002grgc8hbgp42g1"},{"post_id":"cjmssgbnr000vrgc8w9tq4pk2","tag_id":"cjmssgbo7001orgc8sb9i04td","_id":"cjmssgboj002hrgc8sou91vwr"},{"post_id":"cjmssgbnt000zrgc88uigrepe","tag_id":"cjmssgboh002frgc8nvt439dn","_id":"cjmssgbol002lrgc8f4j0b5v4"},{"post_id":"cjmssgbnt000zrgc88uigrepe","tag_id":"cjmssgboj002irgc8kt87dzny","_id":"cjmssgbol002mrgc8mcwtrhjh"},{"post_id":"cjmssgbnt000zrgc88uigrepe","tag_id":"cjmssgbok002jrgc8j8mqvapp","_id":"cjmssgbol002orgc8zkj6yqq4"},{"post_id":"cjmssgbnv0010rgc8dwddrg62","tag_id":"cjmssgbn3000argc8xzkam18i","_id":"cjmssgbol002prgc8r2sg1njg"},{"post_id":"cjmssgbnv0010rgc8dwddrg62","tag_id":"cjmssgbok002krgc83g5y0zlu","_id":"cjmssgbom002rrgc8l2bf620p"},{"post_id":"cjmssgbnw0013rgc890bcvq30","tag_id":"cjmssgbnt000yrgc8xm7wkzno","_id":"cjmssgbom002srgc8qkyntml0"},{"post_id":"cjmssgbnw0013rgc890bcvq30","tag_id":"cjmssgbol002nrgc8odemxfm4","_id":"cjmssgbom002urgc8s3cufs1o"},{"post_id":"cjmssgbnw0013rgc890bcvq30","tag_id":"cjmssgbnn000trgc8nd24mj6i","_id":"cjmssgbom002vrgc8m3p0ojy5"},{"post_id":"cjmssgbny0016rgc8l4kh0avt","tag_id":"cjmssgbnt000yrgc8xm7wkzno","_id":"cjmssgbon002wrgc8xdebldlj"},{"post_id":"cjmssgbny0016rgc8l4kh0avt","tag_id":"cjmssgbom002qrgc86j98h03c","_id":"cjmssgbon002xrgc8qr1c40z5"},{"post_id":"cjmssgbny0016rgc8l4kh0avt","tag_id":"cjmssgbom002trgc8i78e7inz","_id":"cjmssgbon002yrgc8kk0ukq5k"},{"post_id":"cjmssgbro002zrgc8sxn3hwv1","tag_id":"cjmssgbne000hrgc83mlc904t","_id":"cjmssgbsf0031rgc8y19ncvcq"},{"post_id":"cjmssgbsu0038rgc87yo8uqqu","tag_id":"cjmssgbo7001orgc8sb9i04td","_id":"cjmssgbsy003drgc85hllgkmn"},{"post_id":"cjmssgbs30030rgc874o5vvz3","tag_id":"cjmssgbo7001orgc8sb9i04td","_id":"cjmssgbt1003hrgc82crxr7xp"},{"post_id":"cjmssgbs30030rgc874o5vvz3","tag_id":"cjmssgbsj0033rgc8u8k20jm2","_id":"cjmssgbt1003jrgc8zb2s40qu"},{"post_id":"cjmssgbs30030rgc874o5vvz3","tag_id":"cjmssgbsv0039rgc87y4t10ng","_id":"cjmssgbt2003mrgc8xxdd94lz"},{"post_id":"cjmssgbsf0032rgc87miq6n9u","tag_id":"cjmssgbg70002rgc8f356gec6","_id":"cjmssgbt4003prgc8qzflb5kw"},{"post_id":"cjmssgbsf0032rgc87miq6n9u","tag_id":"cjmssgbt0003grgc811dfgayk","_id":"cjmssgbt4003qrgc8ih5qfnhh"},{"post_id":"cjmssgbsf0032rgc87miq6n9u","tag_id":"cjmssgbt2003lrgc8ygq63qf2","_id":"cjmssgbt6003srgc844x7dh5d"},{"post_id":"cjmssgbsk0034rgc84smog44f","tag_id":"cjmssgbo7001orgc8sb9i04td","_id":"cjmssgbt8003urgc8nhty62ob"},{"post_id":"cjmssgbsk0034rgc84smog44f","tag_id":"cjmssgbsj0033rgc8u8k20jm2","_id":"cjmssgbt8003vrgc8dojriweh"},{"post_id":"cjmssgbsk0034rgc84smog44f","tag_id":"cjmssgbsv0039rgc87y4t10ng","_id":"cjmssgbt9003xrgc8lf5f90xa"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbo8001srgc8poga81di","_id":"cjmssgbtc0043rgc895ql39d3"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgboa001wrgc8fq3ioau1","_id":"cjmssgbtc0044rgc8b7quewsg"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbt7003trgc8ms4o9ur9","_id":"cjmssgbtd0046rgc8ztdkwmlb"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbt8003wrgc8ba218huh","_id":"cjmssgbtd0047rgc8bhfhd254"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbt9003yrgc8xwyn1ngt","_id":"cjmssgbtd0048rgc89asydqa6"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbta003zrgc8znkctd9l","_id":"cjmssgbtd0049rgc8cwnfnh5b"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgboc0022rgc8a9kvito6","_id":"cjmssgbtd004argc8vppnemne"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbta0040rgc8tdu0lcvk","_id":"cjmssgbtd004brgc8shm3w9r3"},{"post_id":"cjmssgbsr0036rgc8qdzqrsrd","tag_id":"cjmssgbtb0041rgc85kg5fyyv","_id":"cjmssgbte004crgc8j6386wtq"},{"post_id":"cjmssgbsx003brgc8pbuhcrmx","tag_id":"cjmssgboh002frgc8nvt439dn","_id":"cjmssgbte004drgc8zj4jvvu1"},{"post_id":"cjmssgbsx003brgc8pbuhcrmx","tag_id":"cjmssgbtb0042rgc89u1t1k5g","_id":"cjmssgbte004ergc89cqe3kph"},{"post_id":"cjmssgbsz003ergc86uhfuico","tag_id":"cjmssgboh002frgc8nvt439dn","_id":"cjmssgbte004frgc85ycsb4ip"},{"post_id":"cjmssgbsz003ergc86uhfuico","tag_id":"cjmssgbtc0045rgc8a15sknf0","_id":"cjmssgbte004grgc8ppdbml3g"},{"post_id":"cjmssgbuh004hrgc8uzayl5nk","tag_id":"cjmssgbo7001orgc8sb9i04td","_id":"cjmssgbur004krgc89ytpf6qz"},{"post_id":"cjmssgbuh004hrgc8uzayl5nk","tag_id":"cjmssgbsj0033rgc8u8k20jm2","_id":"cjmssgbur004lrgc84ti8uszl"},{"post_id":"cjmssgbuh004hrgc8uzayl5nk","tag_id":"cjmssgbsv0039rgc87y4t10ng","_id":"cjmssgbus004mrgc8uokuc0fe"},{"post_id":"cjmssgbuh004hrgc8uzayl5nk","tag_id":"cjmssgbuj004irgc8x56q6h2i","_id":"cjmssgbus004nrgc8un1mb35j"}],"Tag":[{"name":"C++ 奇技淫巧","_id":"cjmssgbg70002rgc8f356gec6"},{"name":"杂谈","_id":"cjmssgbn3000argc8xzkam18i"},{"name":"hexo","_id":"cjmssgbne000hrgc83mlc904t"},{"name":"LeetCode","_id":"cjmssgbnj000nrgc8w3gwp8i6"},{"name":"字符串","_id":"cjmssgbnn000trgc8nd24mj6i"},{"name":"算法","_id":"cjmssgbnt000yrgc8xm7wkzno"},{"name":"NOIP 初赛","_id":"cjmssgbo1001argc8puspxysv"},{"name":"NOIP 模拟","_id":"cjmssgbo7001orgc8sb9i04td"},{"name":"图论","_id":"cjmssgbo8001srgc8poga81di"},{"name":"最短路","_id":"cjmssgboa001wrgc8fq3ioau1"},{"name":"最短路计数","_id":"cjmssgbob001zrgc8f3l01upd"},{"name":"Dijkstra","_id":"cjmssgboc0022rgc8a9kvito6"},{"name":"树形结构","_id":"cjmssgboc0024rgc8ix23vmgi"},{"name":"Treap","_id":"cjmssgboe0028rgc8xn9go0sb"},{"name":"平衡树","_id":"cjmssgboe002brgc875n3nmsn"},{"name":"数论","_id":"cjmssgboh002frgc8nvt439dn"},{"name":"欧拉函数","_id":"cjmssgboj002irgc8kt87dzny"},{"name":"莫比乌斯函数","_id":"cjmssgbok002jrgc8j8mqvapp"},{"name":"编程规范","_id":"cjmssgbok002krgc83g5y0zlu"},{"name":"Manacher","_id":"cjmssgbol002nrgc8odemxfm4"},{"name":"RMQ 问题","_id":"cjmssgbom002qrgc86j98h03c"},{"name":"ST 算法","_id":"cjmssgbom002trgc8i78e7inz"},{"name":"题解","_id":"cjmssgbsj0033rgc8u8k20jm2"},{"name":"神题","_id":"cjmssgbsv0039rgc87y4t10ng"},{"name":"迭代器","_id":"cjmssgbt0003grgc811dfgayk"},{"name":"iostream","_id":"cjmssgbt2003lrgc8ygq63qf2"},{"name":"图的遍历","_id":"cjmssgbt7003trgc8ms4o9ur9"},{"name":"BFS","_id":"cjmssgbt8003wrgc8ba218huh"},{"name":"DFS","_id":"cjmssgbt9003yrgc8xwyn1ngt"},{"name":"Floyd","_id":"cjmssgbta003zrgc8znkctd9l"},{"name":"Bellman-Ford","_id":"cjmssgbta0040rgc8tdu0lcvk"},{"name":"SPFA","_id":"cjmssgbtb0041rgc85kg5fyyv"},{"name":"素数","_id":"cjmssgbtb0042rgc89u1t1k5g"},{"name":"模运算","_id":"cjmssgbtc0045rgc8a15sknf0"},{"name":"爆零日","_id":"cjmssgbuj004irgc8x56q6h2i"}]}}